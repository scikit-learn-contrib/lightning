/* Generated by Cython 0.23.4 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__lightning__impl__primal_cd_fast
#define __PYX_HAVE_API__lightning__impl__primal_cd_fast
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "math.h"
#include "randomkit.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "lightning/impl/primal_cd_fast.pyx",
  "__init__.pxd",
  "type.pxd",
  "lightning/impl/randomkit/random_fast.pxd",
  "lightning/impl/dataset_fast.pxd",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_9lightning_4impl_9randomkit_11random_fast_RandomState;
struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset;
struct __pyx_obj_9lightning_4impl_12dataset_fast_RowDataset;
struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset;
struct __pyx_obj_9lightning_4impl_12dataset_fast_ContiguousDataset;
struct __pyx_obj_9lightning_4impl_12dataset_fast_FortranDataset;
struct __pyx_obj_9lightning_4impl_12dataset_fast_CSRDataset;
struct __pyx_obj_9lightning_4impl_12dataset_fast_CSCDataset;
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction;
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared;
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge;
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge;
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber;
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "lightning/impl/randomkit/random_fast.pxd":10
 *         double gauss
 * 
 * cdef class RandomState:             # <<<<<<<<<<<<<<
 * 
 *     cdef rk_state *internal_state
 */
struct __pyx_obj_9lightning_4impl_9randomkit_11random_fast_RandomState {
  PyObject_HEAD
  struct __pyx_vtabstruct_9lightning_4impl_9randomkit_11random_fast_RandomState *__pyx_vtab;
  rk_state *internal_state;
  PyObject *initial_seed;
};


/* "lightning/impl/dataset_fast.pxd":4
 * # License: BSD
 * 
 * cdef class Dataset:             # <<<<<<<<<<<<<<
 * 
 *     cdef int n_samples
 */
struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset {
  PyObject_HEAD
  struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_Dataset *__pyx_vtab;
  int n_samples;
  int n_features;
};


/* "lightning/impl/dataset_fast.pxd":13
 * 
 * 
 * cdef class RowDataset(Dataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef void get_row_ptr(self,
 */
struct __pyx_obj_9lightning_4impl_12dataset_fast_RowDataset {
  struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset __pyx_base;
};


/* "lightning/impl/dataset_fast.pxd":24
 * 
 * 
 * cdef class ColumnDataset(Dataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef void get_column_ptr(self,
 */
struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset {
  struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset __pyx_base;
};


/* "lightning/impl/dataset_fast.pxd":35
 * 
 * 
 * cdef class ContiguousDataset(RowDataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef int* indices
 */
struct __pyx_obj_9lightning_4impl_12dataset_fast_ContiguousDataset {
  struct __pyx_obj_9lightning_4impl_12dataset_fast_RowDataset __pyx_base;
  int *indices;
  double *data;
  PyObject *X;
};


/* "lightning/impl/dataset_fast.pxd":48
 * 
 * 
 * cdef class FortranDataset(ColumnDataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef int* indices
 */
struct __pyx_obj_9lightning_4impl_12dataset_fast_FortranDataset {
  struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset __pyx_base;
  int *indices;
  double *data;
  PyObject *X;
};


/* "lightning/impl/dataset_fast.pxd":61
 * 
 * 
 * cdef class CSRDataset(RowDataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef int* indices
 */
struct __pyx_obj_9lightning_4impl_12dataset_fast_CSRDataset {
  struct __pyx_obj_9lightning_4impl_12dataset_fast_RowDataset __pyx_base;
  int *indices;
  double *data;
  int *indptr;
  PyObject *X;
};


/* "lightning/impl/dataset_fast.pxd":75
 * 
 * 
 * cdef class CSCDataset(ColumnDataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef int* indices
 */
struct __pyx_obj_9lightning_4impl_12dataset_fast_CSCDataset {
  struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset __pyx_base;
  int *indices;
  double *data;
  int *indptr;
  PyObject *X;
};


/* "lightning/impl/primal_cd_fast.pyx":28
 * 
 * 
 * cdef class LossFunction:             # <<<<<<<<<<<<<<
 * 
 *     cdef int max_steps
 */
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction {
  PyObject_HEAD
  struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_vtab;
  int max_steps;
  double sigma;
  double beta;
  int verbose;
};


/* "lightning/impl/primal_cd_fast.pyx":538
 * 
 * 
 * cdef class Squared(LossFunction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, verbose=0):
 */
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_base;
};


/* "lightning/impl/primal_cd_fast.pyx":601
 * 
 * 
 * cdef class SquaredHinge(LossFunction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_base;
};


/* "lightning/impl/primal_cd_fast.pyx":795
 * 
 * 
 * cdef class SmoothHinge(LossFunction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_base;
};


/* "lightning/impl/primal_cd_fast.pyx":875
 * 
 * 
 * cdef class ModifiedHuber(LossFunction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_base;
};


/* "lightning/impl/primal_cd_fast.pyx":951
 * 
 * 
 * cdef class Log(LossFunction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_base;
};



/* "lightning/impl/randomkit/random_fast.pxd":10
 *         double gauss
 * 
 * cdef class RandomState:             # <<<<<<<<<<<<<<
 * 
 *     cdef rk_state *internal_state
 */

struct __pyx_vtabstruct_9lightning_4impl_9randomkit_11random_fast_RandomState {
  long (*randint)(struct __pyx_obj_9lightning_4impl_9randomkit_11random_fast_RandomState *, unsigned long, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9lightning_4impl_9randomkit_11random_fast_RandomState *__pyx_vtabptr_9lightning_4impl_9randomkit_11random_fast_RandomState;


/* "lightning/impl/dataset_fast.pxd":4
 * # License: BSD
 * 
 * cdef class Dataset:             # <<<<<<<<<<<<<<
 * 
 *     cdef int n_samples
 */

struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_Dataset {
  int (*get_n_samples)(struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset *, int __pyx_skip_dispatch);
  int (*get_n_features)(struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_Dataset *__pyx_vtabptr_9lightning_4impl_12dataset_fast_Dataset;


/* "lightning/impl/dataset_fast.pxd":13
 * 
 * 
 * cdef class RowDataset(Dataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef void get_row_ptr(self,
 */

struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_RowDataset {
  struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_Dataset __pyx_base;
  void (*get_row_ptr)(struct __pyx_obj_9lightning_4impl_12dataset_fast_RowDataset *, int, int **, double **, int *);
  PyObject *(*get_row)(struct __pyx_obj_9lightning_4impl_12dataset_fast_RowDataset *, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_RowDataset *__pyx_vtabptr_9lightning_4impl_12dataset_fast_RowDataset;


/* "lightning/impl/dataset_fast.pxd":24
 * 
 * 
 * cdef class ColumnDataset(Dataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef void get_column_ptr(self,
 */

struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset {
  struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_Dataset __pyx_base;
  void (*get_column_ptr)(struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, int, int **, double **, int *);
  PyObject *(*get_column)(struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_vtabptr_9lightning_4impl_12dataset_fast_ColumnDataset;


/* "lightning/impl/dataset_fast.pxd":35
 * 
 * 
 * cdef class ContiguousDataset(RowDataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef int* indices
 */

struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ContiguousDataset {
  struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_RowDataset __pyx_base;
};
static struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ContiguousDataset *__pyx_vtabptr_9lightning_4impl_12dataset_fast_ContiguousDataset;


/* "lightning/impl/dataset_fast.pxd":48
 * 
 * 
 * cdef class FortranDataset(ColumnDataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef int* indices
 */

struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_FortranDataset {
  struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset __pyx_base;
};
static struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_FortranDataset *__pyx_vtabptr_9lightning_4impl_12dataset_fast_FortranDataset;


/* "lightning/impl/dataset_fast.pxd":61
 * 
 * 
 * cdef class CSRDataset(RowDataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef int* indices
 */

struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_CSRDataset {
  struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_RowDataset __pyx_base;
};
static struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_CSRDataset *__pyx_vtabptr_9lightning_4impl_12dataset_fast_CSRDataset;


/* "lightning/impl/dataset_fast.pxd":75
 * 
 * 
 * cdef class CSCDataset(ColumnDataset):             # <<<<<<<<<<<<<<
 * 
 *     cdef int* indices
 */

struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_CSCDataset {
  struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset __pyx_base;
};
static struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_CSCDataset *__pyx_vtabptr_9lightning_4impl_12dataset_fast_CSCDataset;


/* "lightning/impl/primal_cd_fast.pyx":28
 * 
 * 
 * cdef class LossFunction:             # <<<<<<<<<<<<<<
 * 
 *     cdef int max_steps
 */

struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction {
  void (*solve_l2)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, double *, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double *, double *, double *);
  void (*derivatives)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int *, double *, int, double *, double *, double *, double *, double *);
  void (*update)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, int *, double *, int, double *, double *, double *);
  void (*recompute)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double *, double *, double *);
  void (*_lipschitz_constant)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double, double *);
  int (*solve_l1)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, double *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double *, double *, double, double, double *, int);
  int (*solve_l1l2)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, PyArrayObject *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, int *, PyArrayObject *, int, PyArrayObject *, double, double *, double *, double *, double *, double, double *, int);
  void (*derivatives_mc)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int, int, int *, double *, int, int *, double *, double *, double *, double *, double *);
  void (*update_mc)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, double, int, int, int *, double *, int, int *, double *, double *, double *, double *, double *);
  void (*recompute_mc)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, int *, PyArrayObject *, PyArrayObject *);
  void (*lipschitz_constant_mt)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double, double *);
  void (*lipschitz_constant_mc)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double, double *);
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_LossFunction;


/* "lightning/impl/primal_cd_fast.pyx":538
 * 
 * 
 * cdef class Squared(LossFunction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, verbose=0):
 */

struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_Squared {
  struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_base;
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_Squared *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_Squared;


/* "lightning/impl/primal_cd_fast.pyx":601
 * 
 * 
 * cdef class SquaredHinge(LossFunction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */

struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_SquaredHinge {
  struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_base;
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_SquaredHinge;


/* "lightning/impl/primal_cd_fast.pyx":795
 * 
 * 
 * cdef class SmoothHinge(LossFunction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */

struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_SmoothHinge {
  struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_base;
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_SmoothHinge *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_SmoothHinge;


/* "lightning/impl/primal_cd_fast.pyx":875
 * 
 * 
 * cdef class ModifiedHuber(LossFunction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */

struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_ModifiedHuber {
  struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_base;
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_ModifiedHuber *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_ModifiedHuber;


/* "lightning/impl/primal_cd_fast.pyx":951
 * 
 * 
 * cdef class Log(LossFunction):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */

struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_Log {
  struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_base;
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_Log *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_Log;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#define __Pyx_BufPtrCContig2d(type, buf, i0, s0, i1, s1) ((type)((char*)buf + i0 * s0) + i1)
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static void __Pyx_RaiseBufferFallbackError(void);

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

#define __Pyx_BufPtrCContig1d(type, buf, i0, s0) ((type)buf + i0)
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static void* __Pyx_GetVtable(PyObject *dict);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_solve_l2(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, int __pyx_v_j, double __pyx_v_C, double __pyx_v_alpha, double *__pyx_v_w, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_violation); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED int *__pyx_v_indices, CYTHON_UNUSED double *__pyx_v_data, CYTHON_UNUSED int __pyx_v_n_nz, CYTHON_UNUSED double *__pyx_v_y, CYTHON_UNUSED double *__pyx_v_b, CYTHON_UNUSED double *__pyx_v_Lp, CYTHON_UNUSED double *__pyx_v_Lpp, CYTHON_UNUSED double *__pyx_v_L); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, CYTHON_UNUSED double __pyx_v_z_diff, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED int *__pyx_v_indices, CYTHON_UNUSED double *__pyx_v_data, CYTHON_UNUSED int __pyx_v_n_nz, CYTHON_UNUSED double *__pyx_v_y, CYTHON_UNUSED double *__pyx_v_b, CYTHON_UNUSED double *__pyx_v_L_new); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_recompute(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, CYTHON_UNUSED double *__pyx_v_y, CYTHON_UNUSED double *__pyx_v_w, CYTHON_UNUSED double *__pyx_v_b); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction__lipschitz_constant(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double __pyx_v_scale, double *__pyx_v_out); /* proto*/
static int __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_solve_l1(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, int __pyx_v_j, double __pyx_v_C, double __pyx_v_alpha, double *__pyx_v_w, int __pyx_v_n_samples, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double *__pyx_v_y, double *__pyx_v_b, double __pyx_v_Lcst, double __pyx_v_violation_old, double *__pyx_v_violation, int __pyx_v_shrinking); /* proto*/
static int __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_solve_l1l2(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, int __pyx_v_j, double __pyx_v_C, double __pyx_v_alpha, PyArrayObject *__pyx_v_w, int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, int *__pyx_v_y, PyArrayObject *__pyx_v_Y, int __pyx_v_multiclass, PyArrayObject *__pyx_v_b, double __pyx_v_Lcst, double *__pyx_v_g, double *__pyx_v_d, double *__pyx_v_d_old, double *__pyx_v_Z, double __pyx_v_violation_old, double *__pyx_v_violation, int __pyx_v_shrinking); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_derivatives_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED int __pyx_v_n_samples, CYTHON_UNUSED int __pyx_v_n_vectors, CYTHON_UNUSED int *__pyx_v_indices, CYTHON_UNUSED double *__pyx_v_data, CYTHON_UNUSED int __pyx_v_n_nz, CYTHON_UNUSED int *__pyx_v_y, CYTHON_UNUSED double *__pyx_v_b, CYTHON_UNUSED double *__pyx_v_g, CYTHON_UNUSED double *__pyx_v_Z, CYTHON_UNUSED double *__pyx_v_L, CYTHON_UNUSED double *__pyx_v_Lpp_max); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_update_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED int __pyx_v_n_samples, CYTHON_UNUSED int __pyx_v_n_vectors, CYTHON_UNUSED int *__pyx_v_indices, CYTHON_UNUSED double *__pyx_v_data, CYTHON_UNUSED int __pyx_v_n_nz, CYTHON_UNUSED int *__pyx_v_y, CYTHON_UNUSED double *__pyx_v_b, CYTHON_UNUSED double *__pyx_v_d, CYTHON_UNUSED double *__pyx_v_d_old, CYTHON_UNUSED double *__pyx_v_Z, CYTHON_UNUSED double *__pyx_v_L_new); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_recompute_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_n_vectors, CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, CYTHON_UNUSED int *__pyx_v_y, CYTHON_UNUSED PyArrayObject *__pyx_v_w, CYTHON_UNUSED PyArrayObject *__pyx_v_b); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_lipschitz_constant_mt(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_n_vectors, CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED double *__pyx_v_out); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_lipschitz_constant_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_n_vectors, CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED double *__pyx_v_out); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_7Squared_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, CYTHON_UNUSED double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_Lp, double *__pyx_v_Lpp, double *__pyx_v_L); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_7Squared_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_z_diff, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, CYTHON_UNUSED double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_L_new); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_Lp, double *__pyx_v_Lpp, double *__pyx_v_L); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_z_diff, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_L_new); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_derivatives_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int __pyx_v_n_samples, int __pyx_v_n_vectors, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, int *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_g, double *__pyx_v_h, double *__pyx_v_L, double *__pyx_v_Lpp_max); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_update_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, double __pyx_v_C, int __pyx_v_n_samples, int __pyx_v_n_vectors, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, int *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_d, double *__pyx_v_d_old, CYTHON_UNUSED double *__pyx_v_h, double *__pyx_v_L_new); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_lipschitz_constant_mt(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double __pyx_v_C, double *__pyx_v_out); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_lipschitz_constant_mc(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double __pyx_v_C, double *__pyx_v_out); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_11SmoothHinge_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_Lp, double *__pyx_v_Lpp, double *__pyx_v_L); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_11SmoothHinge_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_z_diff, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_L_new); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_13ModifiedHuber_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_Lp, double *__pyx_v_Lpp, double *__pyx_v_L); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_13ModifiedHuber_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_z_diff, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_L_new); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_Lp, double *__pyx_v_Lpp, double *__pyx_v_L); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_z_diff, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_L_new); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_derivatives_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int __pyx_v_n_samples, int __pyx_v_n_vectors, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, int *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_g, double *__pyx_v_Z, double *__pyx_v_L, double *__pyx_v_Lpp_max); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_update_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, double __pyx_v_C, int __pyx_v_n_samples, int __pyx_v_n_vectors, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, int *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_d, double *__pyx_v_d_old, double *__pyx_v_Z, double *__pyx_v_L_new); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_recompute(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double *__pyx_v_y, double *__pyx_v_w, double *__pyx_v_b); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_recompute_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, int *__pyx_v_y, PyArrayObject *__pyx_v_w, PyArrayObject *__pyx_v_b); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_lipschitz_constant_mt(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double __pyx_v_C, double *__pyx_v_out); /* proto*/
static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_lipschitz_constant_mc(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, CYTHON_UNUSED int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double __pyx_v_C, double *__pyx_v_out); /* proto*/

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libc.math' */

/* Module declarations from 'lightning.impl.randomkit.random_fast' */
static PyTypeObject *__pyx_ptype_9lightning_4impl_9randomkit_11random_fast_RandomState = 0;

/* Module declarations from 'lightning.impl.dataset_fast' */
static PyTypeObject *__pyx_ptype_9lightning_4impl_12dataset_fast_Dataset = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_12dataset_fast_RowDataset = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_12dataset_fast_ColumnDataset = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_12dataset_fast_ContiguousDataset = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_12dataset_fast_FortranDataset = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_12dataset_fast_CSRDataset = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_12dataset_fast_CSCDataset = 0;

/* Module declarations from 'lightning.impl.primal_cd_fast' */
static PyTypeObject *__pyx_ptype_9lightning_4impl_14primal_cd_fast_LossFunction = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_14primal_cd_fast_Squared = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_14primal_cd_fast_SquaredHinge = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_14primal_cd_fast_SmoothHinge = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_14primal_cd_fast_ModifiedHuber = 0;
static PyTypeObject *__pyx_ptype_9lightning_4impl_14primal_cd_fast_Log = 0;
static CYTHON_INLINE void __pyx_f_9lightning_4impl_14primal_cd_fast__swap(int *, int, int); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_int = { "int", NULL, sizeof(int), { 0 }, 0, IS_UNSIGNED(int) ? 'U' : 'I', IS_UNSIGNED(int), 0 };
#define __Pyx_MODULE_NAME "lightning.impl.primal_cd_fast"
int __pyx_module_is_main_lightning__impl__primal_cd_fast = 0;

/* Implementation of 'lightning.impl.primal_cd_fast' */
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static char __pyx_k_B[] = "B";
static char __pyx_k_C[] = "C";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_M[] = "M";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_X[] = "X";
static char __pyx_k_Y[] = "Y";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "(%d)";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_j[] = "j";
static char __pyx_k_k[] = "k";
static char __pyx_k_l[] = "l";
static char __pyx_k_m[] = "m";
static char __pyx_k_n[] = "n";
static char __pyx_k_q[] = "q";
static char __pyx_k_s[] = "s";
static char __pyx_k_t[] = "t";
static char __pyx_k_w[] = "w";
static char __pyx_k_y[] = "y";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k_np[] = "np";
static char __pyx_k_rs[] = "rs";
static char __pyx_k_buf[] = "buf";
static char __pyx_k_d_2[] = "d";
static char __pyx_k_end[] = "end";
static char __pyx_k_max[] = "max";
static char __pyx_k_ret[] = "ret";
static char __pyx_k_tol[] = "tol";
static char __pyx_k_Lcst[] = "Lcst";
static char __pyx_k_beta[] = "beta";
static char __pyx_k_file[] = "file";
static char __pyx_k_iter[] = "iter";
static char __pyx_k_loss[] = "loss";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_self[] = "self";
static char __pyx_k_stop[] = "stop";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_alpha[] = "alpha";
static char __pyx_k_b_ptr[] = "b_ptr";
static char __pyx_k_d_old[] = "d_old";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_finfo[] = "finfo";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_sigma[] = "sigma";
static char __pyx_k_w_ptr[] = "w_ptr";
static char __pyx_k_y_ptr[] = "y_ptr";
static char __pyx_k_zeros[] = "zeros";
static char __pyx_k_cyclic[] = "cyclic";
static char __pyx_k_double[] = "double";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_shrink[] = "shrink";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_DBL_MAX[] = "DBL_MAX";
static char __pyx_k_buf_ptr[] = "buf_ptr";
static char __pyx_k_float64[] = "float64";
static char __pyx_k_n_calls[] = "n_calls";
static char __pyx_k_penalty[] = "penalty";
static char __pyx_k_permute[] = "permute";
static char __pyx_k_shuffle[] = "shuffle";
static char __pyx_k_uniform[] = "uniform";
static char __pyx_k_verbose[] = "verbose";
static char __pyx_k_callback[] = "callback";
static char __pyx_k_max_iter[] = "max_iter";
static char __pyx_k_max_steps[] = "max_steps";
static char __pyx_k_n_samples[] = "n_samples";
static char __pyx_k_n_vectors[] = "n_vectors";
static char __pyx_k_primal_cd[] = "_primal_cd";
static char __pyx_k_selection[] = "selection";
static char __pyx_k_shrinking[] = "shrinking";
static char __pyx_k_violation[] = "violation";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_active_set[] = "active_set";
static char __pyx_k_multiclass[] = "multiclass";
static char __pyx_k_n_features[] = "n_features";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_active_size[] = "active_size";
static char __pyx_k_termination[] = "termination";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_has_callback[] = "has_callback";
static char __pyx_k_violation_max[] = "violation_max";
static char __pyx_k_violation_sum[] = "violation_sum";
static char __pyx_k_active_set_ptr[] = "active_set_ptr";
static char __pyx_k_violation_init[] = "violation_init";
static char __pyx_k_Shrink_variable[] = "Shrink variable";
static char __pyx_k_active_size_start[] = "active_size_start";
static char __pyx_k_violation_max_old[] = "violation_max_old";
static char __pyx_k_NotImplementedError[] = "NotImplementedError";
static char __pyx_k_check_violation_max[] = "check_violation_max";
static char __pyx_k_check_violation_sum[] = "check_violation_sum";
static char __pyx_k_Converged_at_iteration[] = "\nConverged at iteration";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_lightning_impl_primal_cd_fast[] = "lightning.impl.primal_cd_fast";
static char __pyx_k_Users_fabianpedregosa_dev_light[] = "/Users/fabianpedregosa/dev/lightning/lightning/impl/primal_cd_fast.pyx";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Max_steps_reached_during_line_se[] = "Max steps reached during line search...";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_s_C;
static PyObject *__pyx_kp_s_Converged_at_iteration;
static PyObject *__pyx_n_s_DBL_MAX;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_Lcst;
static PyObject *__pyx_n_s_M;
static PyObject *__pyx_kp_s_Max_steps_reached_during_line_se;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_Shrink_variable;
static PyObject *__pyx_kp_s_Users_fabianpedregosa_dev_light;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_X;
static PyObject *__pyx_n_s_Y;
static PyObject *__pyx_n_s_active_set;
static PyObject *__pyx_n_s_active_set_ptr;
static PyObject *__pyx_n_s_active_size;
static PyObject *__pyx_n_s_active_size_start;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_b_ptr;
static PyObject *__pyx_n_s_beta;
static PyObject *__pyx_n_s_buf;
static PyObject *__pyx_n_s_buf_ptr;
static PyObject *__pyx_n_s_callback;
static PyObject *__pyx_n_s_check_violation_max;
static PyObject *__pyx_n_s_check_violation_sum;
static PyObject *__pyx_n_s_cyclic;
static PyObject *__pyx_kp_s_d;
static PyObject *__pyx_n_s_d_2;
static PyObject *__pyx_n_s_d_old;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_finfo;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_has_callback;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_lightning_impl_primal_cd_fast;
static PyObject *__pyx_n_s_loss;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_iter;
static PyObject *__pyx_n_s_max_steps;
static PyObject *__pyx_n_s_multiclass;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n_calls;
static PyObject *__pyx_n_s_n_features;
static PyObject *__pyx_n_s_n_samples;
static PyObject *__pyx_n_s_n_vectors;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_penalty;
static PyObject *__pyx_n_s_permute;
static PyObject *__pyx_n_s_primal_cd;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_rs;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_selection;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_shrink;
static PyObject *__pyx_n_s_shrinking;
static PyObject *__pyx_n_s_shuffle;
static PyObject *__pyx_n_s_sigma;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_termination;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tol;
static PyObject *__pyx_n_s_uniform;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_verbose;
static PyObject *__pyx_n_s_violation;
static PyObject *__pyx_n_s_violation_init;
static PyObject *__pyx_n_s_violation_max;
static PyObject *__pyx_n_s_violation_max_old;
static PyObject *__pyx_n_s_violation_sum;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_w_ptr;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y_ptr;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_9lightning_4impl_14primal_cd_fast_7Squared___init__(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared *__pyx_v_self, PyObject *__pyx_v_verbose); /* proto */
static int __pyx_pf_9lightning_4impl_14primal_cd_fast_12SquaredHinge___init__(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, int __pyx_v_max_steps, double __pyx_v_sigma, double __pyx_v_beta, int __pyx_v_verbose); /* proto */
static int __pyx_pf_9lightning_4impl_14primal_cd_fast_11SmoothHinge___init__(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge *__pyx_v_self, int __pyx_v_max_steps, double __pyx_v_sigma, double __pyx_v_beta, int __pyx_v_verbose); /* proto */
static int __pyx_pf_9lightning_4impl_14primal_cd_fast_13ModifiedHuber___init__(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber *__pyx_v_self, int __pyx_v_max_steps, double __pyx_v_sigma, double __pyx_v_beta, int __pyx_v_verbose); /* proto */
static int __pyx_pf_9lightning_4impl_14primal_cd_fast_3Log___init__(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, int __pyx_v_max_steps, double __pyx_v_sigma, double __pyx_v_beta, int __pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_9lightning_4impl_14primal_cd_fast__primal_cd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyArrayObject *__pyx_v_w, PyArrayObject *__pyx_v_b, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, PyArrayObject *__pyx_v_y, PyArrayObject *__pyx_v_Y, int __pyx_v_k, int __pyx_v_multiclass, PyArrayObject *__pyx_v_active_set, int __pyx_v_penalty, struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_loss, PyObject *__pyx_v_selection, int __pyx_v_permute, PyObject *__pyx_v_termination, double __pyx_v_C, double __pyx_v_alpha, int __pyx_v_max_iter, int __pyx_v_max_steps, int __pyx_v_shrinking, double __pyx_v_violation_init, struct __pyx_obj_9lightning_4impl_9randomkit_11random_fast_RandomState *__pyx_v_rs, double __pyx_v_tol, PyObject *__pyx_v_callback, int __pyx_v_n_calls, int __pyx_v_verbose); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_LossFunction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_Squared(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_SquaredHinge(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_SmoothHinge(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_ModifiedHuber(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_Log(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_codeobj__8;

/* "lightning/impl/primal_cd_fast.pyx":21
 * 
 * 
 * cdef inline void _swap(int* arr, int a, int b):             # <<<<<<<<<<<<<<
 *     cdef int tmp
 *     tmp = arr[a]
 */

static CYTHON_INLINE void __pyx_f_9lightning_4impl_14primal_cd_fast__swap(int *__pyx_v_arr, int __pyx_v_a, int __pyx_v_b) {
  int __pyx_v_tmp;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_swap", 0);

  /* "lightning/impl/primal_cd_fast.pyx":23
 * cdef inline void _swap(int* arr, int a, int b):
 *     cdef int tmp
 *     tmp = arr[a]             # <<<<<<<<<<<<<<
 *     arr[a] = arr[b]
 *     arr[b] = tmp
 */
  __pyx_v_tmp = (__pyx_v_arr[__pyx_v_a]);

  /* "lightning/impl/primal_cd_fast.pyx":24
 *     cdef int tmp
 *     tmp = arr[a]
 *     arr[a] = arr[b]             # <<<<<<<<<<<<<<
 *     arr[b] = tmp
 * 
 */
  (__pyx_v_arr[__pyx_v_a]) = (__pyx_v_arr[__pyx_v_b]);

  /* "lightning/impl/primal_cd_fast.pyx":25
 *     tmp = arr[a]
 *     arr[a] = arr[b]
 *     arr[b] = tmp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_arr[__pyx_v_b]) = __pyx_v_tmp;

  /* "lightning/impl/primal_cd_fast.pyx":21
 * 
 * 
 * cdef inline void _swap(int* arr, int a, int b):             # <<<<<<<<<<<<<<
 *     cdef int tmp
 *     tmp = arr[a]
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":37
 *     # L2 regularization
 * 
 *     cdef void solve_l2(self,             # <<<<<<<<<<<<<<
 *                        int j,
 *                        double C,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_solve_l2(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, int __pyx_v_j, double __pyx_v_C, double __pyx_v_alpha, double *__pyx_v_w, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_violation) {
  double __pyx_v_Dp;
  double __pyx_v_Dpp;
  double __pyx_v_Dj_zero;
  double __pyx_v_z;
  double __pyx_v_d;
  int __pyx_v_step;
  int __pyx_v_recompute;
  double __pyx_v_z_diff;
  double __pyx_v_z_old;
  double __pyx_v_Dj_z;
  double __pyx_v_cond;
  double *__pyx_v_data;
  int *__pyx_v_indices;
  int __pyx_v_n_nz;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve_l2", 0);

  /* "lightning/impl/primal_cd_fast.pyx":57
 * 
 *         # Retrieve column.
 *         X.get_column_ptr(j, &indices, &data, &n_nz)             # <<<<<<<<<<<<<<
 * 
 *         # Compute derivatives.
 */
  ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->get_column_ptr(__pyx_v_X, __pyx_v_j, (&__pyx_v_indices), (&__pyx_v_data), (&__pyx_v_n_nz));

  /* "lightning/impl/primal_cd_fast.pyx":60
 * 
 *         # Compute derivatives.
 *         self.derivatives(j, C, indices, data, n_nz, y, b,             # <<<<<<<<<<<<<<
 *                          &Dp, &Dpp, &Dj_zero)
 * 
 */
  ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->derivatives(__pyx_v_self, __pyx_v_j, __pyx_v_C, __pyx_v_indices, __pyx_v_data, __pyx_v_n_nz, __pyx_v_y, __pyx_v_b, (&__pyx_v_Dp), (&__pyx_v_Dpp), (&__pyx_v_Dj_zero));

  /* "lightning/impl/primal_cd_fast.pyx":64
 * 
 *         # Add regularization term.
 *         Dp = alpha * w[j] + Dp # first derivative             # <<<<<<<<<<<<<<
 *         Dpp = alpha + Dpp # second derivative
 * 
 */
  __pyx_v_Dp = ((__pyx_v_alpha * (__pyx_v_w[__pyx_v_j])) + __pyx_v_Dp);

  /* "lightning/impl/primal_cd_fast.pyx":65
 *         # Add regularization term.
 *         Dp = alpha * w[j] + Dp # first derivative
 *         Dpp = alpha + Dpp # second derivative             # <<<<<<<<<<<<<<
 * 
 *         if fabs(Dp/Dpp) <= 1e-12:
 */
  __pyx_v_Dpp = (__pyx_v_alpha + __pyx_v_Dpp);

  /* "lightning/impl/primal_cd_fast.pyx":67
 *         Dpp = alpha + Dpp # second derivative
 * 
 *         if fabs(Dp/Dpp) <= 1e-12:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = ((fabs((__pyx_v_Dp / __pyx_v_Dpp)) <= 1e-12) != 0);
  if (__pyx_t_1) {

    /* "lightning/impl/primal_cd_fast.pyx":68
 * 
 *         if fabs(Dp/Dpp) <= 1e-12:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # Newton step
 */
    goto __pyx_L0;

    /* "lightning/impl/primal_cd_fast.pyx":67
 *         Dpp = alpha + Dpp # second derivative
 * 
 *         if fabs(Dp/Dpp) <= 1e-12:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":71
 * 
 *         # Newton step
 *         d = -Dp / Dpp             # <<<<<<<<<<<<<<
 * 
 *         # Perform line search.
 */
  __pyx_v_d = ((-__pyx_v_Dp) / __pyx_v_Dpp);

  /* "lightning/impl/primal_cd_fast.pyx":74
 * 
 *         # Perform line search.
 *         z_old = 0             # <<<<<<<<<<<<<<
 *         z = d
 * 
 */
  __pyx_v_z_old = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":75
 *         # Perform line search.
 *         z_old = 0
 *         z = d             # <<<<<<<<<<<<<<
 * 
 *         step = 1
 */
  __pyx_v_z = __pyx_v_d;

  /* "lightning/impl/primal_cd_fast.pyx":77
 *         z = d
 * 
 *         step = 1             # <<<<<<<<<<<<<<
 *         recompute = 0
 *         while True:
 */
  __pyx_v_step = 1;

  /* "lightning/impl/primal_cd_fast.pyx":78
 * 
 *         step = 1
 *         recompute = 0             # <<<<<<<<<<<<<<
 *         while True:
 *             z_diff = z_old - z
 */
  __pyx_v_recompute = 0;

  /* "lightning/impl/primal_cd_fast.pyx":79
 *         step = 1
 *         recompute = 0
 *         while True:             # <<<<<<<<<<<<<<
 *             z_diff = z_old - z
 * 
 */
  while (1) {

    /* "lightning/impl/primal_cd_fast.pyx":80
 *         recompute = 0
 *         while True:
 *             z_diff = z_old - z             # <<<<<<<<<<<<<<
 * 
 *             # Update predictions / errors / residuals (depends on loss).
 */
    __pyx_v_z_diff = (__pyx_v_z_old - __pyx_v_z);

    /* "lightning/impl/primal_cd_fast.pyx":83
 * 
 *             # Update predictions / errors / residuals (depends on loss).
 *             self.update(j, z_diff, C, indices, data, n_nz,             # <<<<<<<<<<<<<<
 *                         y, b, &Dj_z)
 * 
 */
    ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->update(__pyx_v_self, __pyx_v_j, __pyx_v_z_diff, __pyx_v_C, __pyx_v_indices, __pyx_v_data, __pyx_v_n_nz, __pyx_v_y, __pyx_v_b, (&__pyx_v_Dj_z));

    /* "lightning/impl/primal_cd_fast.pyx":86
 *                         y, b, &Dj_z)
 * 
 *             if step >= self.max_steps:             # <<<<<<<<<<<<<<
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:
 */
    __pyx_t_1 = ((__pyx_v_step >= __pyx_v_self->max_steps) != 0);
    if (__pyx_t_1) {

      /* "lightning/impl/primal_cd_fast.pyx":87
 * 
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:             # <<<<<<<<<<<<<<
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."
 */
      __pyx_t_1 = ((__pyx_v_self->max_steps > 1) != 0);
      if (__pyx_t_1) {

        /* "lightning/impl/primal_cd_fast.pyx":88
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:             # <<<<<<<<<<<<<<
 *                         print "Max steps reached during line search..."
 *                     recompute = 1
 */
        __pyx_t_1 = ((__pyx_v_self->verbose >= 2) != 0);
        if (__pyx_t_1) {

          /* "lightning/impl/primal_cd_fast.pyx":89
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."             # <<<<<<<<<<<<<<
 *                     recompute = 1
 *                 break
 */
          if (__Pyx_PrintOne(0, __pyx_kp_s_Max_steps_reached_during_line_se) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

          /* "lightning/impl/primal_cd_fast.pyx":88
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:             # <<<<<<<<<<<<<<
 *                         print "Max steps reached during line search..."
 *                     recompute = 1
 */
        }

        /* "lightning/impl/primal_cd_fast.pyx":90
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."
 *                     recompute = 1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_recompute = 1;

        /* "lightning/impl/primal_cd_fast.pyx":87
 * 
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:             # <<<<<<<<<<<<<<
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":91
 *                         print "Max steps reached during line search..."
 *                     recompute = 1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             # Check decrease condition
 */
      goto __pyx_L5_break;

      /* "lightning/impl/primal_cd_fast.pyx":86
 *                         y, b, &Dj_z)
 * 
 *             if step >= self.max_steps:             # <<<<<<<<<<<<<<
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":96
 *             #   0.5 * alpha * (w + z e_j)^T (w + z e_j)
 *             # = 0.5 * alpha * w^T w + alpha * w_j z + 0.5 * alpha * z^2
 *             cond = alpha * w[j] * z + (0.5 * alpha + self.sigma) * z * z             # <<<<<<<<<<<<<<
 *             if cond + Dj_z - Dj_zero <= 0:
 *                 break
 */
    __pyx_v_cond = (((__pyx_v_alpha * (__pyx_v_w[__pyx_v_j])) * __pyx_v_z) + ((((0.5 * __pyx_v_alpha) + __pyx_v_self->sigma) * __pyx_v_z) * __pyx_v_z));

    /* "lightning/impl/primal_cd_fast.pyx":97
 *             # = 0.5 * alpha * w^T w + alpha * w_j z + 0.5 * alpha * z^2
 *             cond = alpha * w[j] * z + (0.5 * alpha + self.sigma) * z * z
 *             if cond + Dj_z - Dj_zero <= 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_1 = ((((__pyx_v_cond + __pyx_v_Dj_z) - __pyx_v_Dj_zero) <= 0.0) != 0);
    if (__pyx_t_1) {

      /* "lightning/impl/primal_cd_fast.pyx":98
 *             cond = alpha * w[j] * z + (0.5 * alpha + self.sigma) * z * z
 *             if cond + Dj_z - Dj_zero <= 0:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             z_old = z
 */
      goto __pyx_L5_break;

      /* "lightning/impl/primal_cd_fast.pyx":97
 *             # = 0.5 * alpha * w^T w + alpha * w_j z + 0.5 * alpha * z^2
 *             cond = alpha * w[j] * z + (0.5 * alpha + self.sigma) * z * z
 *             if cond + Dj_z - Dj_zero <= 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":100
 *                 break
 * 
 *             z_old = z             # <<<<<<<<<<<<<<
 *             z *= self.beta
 *             step += 1
 */
    __pyx_v_z_old = __pyx_v_z;

    /* "lightning/impl/primal_cd_fast.pyx":101
 * 
 *             z_old = z
 *             z *= self.beta             # <<<<<<<<<<<<<<
 *             step += 1
 * 
 */
    __pyx_v_z = (__pyx_v_z * __pyx_v_self->beta);

    /* "lightning/impl/primal_cd_fast.pyx":102
 *             z_old = z
 *             z *= self.beta
 *             step += 1             # <<<<<<<<<<<<<<
 * 
 *         # Update weight w[j].
 */
    __pyx_v_step = (__pyx_v_step + 1);
  }
  __pyx_L5_break:;

  /* "lightning/impl/primal_cd_fast.pyx":105
 * 
 *         # Update weight w[j].
 *         w[j] += z             # <<<<<<<<<<<<<<
 * 
 *         # Recompute predictions / errors / residuals if needed.
 */
  __pyx_t_2 = __pyx_v_j;
  (__pyx_v_w[__pyx_t_2]) = ((__pyx_v_w[__pyx_t_2]) + __pyx_v_z);

  /* "lightning/impl/primal_cd_fast.pyx":108
 * 
 *         # Recompute predictions / errors / residuals if needed.
 *         if recompute:             # <<<<<<<<<<<<<<
 *             self.recompute(X, y, w, b)
 * 
 */
  __pyx_t_1 = (__pyx_v_recompute != 0);
  if (__pyx_t_1) {

    /* "lightning/impl/primal_cd_fast.pyx":109
 *         # Recompute predictions / errors / residuals if needed.
 *         if recompute:
 *             self.recompute(X, y, w, b)             # <<<<<<<<<<<<<<
 * 
 *         # For L2-regularized problems, we can simply use the absolute value of
 */
    ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->recompute(__pyx_v_self, __pyx_v_X, __pyx_v_y, __pyx_v_w, __pyx_v_b);

    /* "lightning/impl/primal_cd_fast.pyx":108
 * 
 *         # Recompute predictions / errors / residuals if needed.
 *         if recompute:             # <<<<<<<<<<<<<<
 *             self.recompute(X, y, w, b)
 * 
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":113
 *         # For L2-regularized problems, we can simply use the absolute value of
 *         # the gradient as violation.
 *         violation[0] = fabs(Dp)             # <<<<<<<<<<<<<<
 * 
 *     cdef void derivatives(self,
 */
  (__pyx_v_violation[0]) = fabs(__pyx_v_Dp);

  /* "lightning/impl/primal_cd_fast.pyx":37
 *     # L2 regularization
 * 
 *     cdef void solve_l2(self,             # <<<<<<<<<<<<<<
 *                        int j,
 *                        double C,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.LossFunction.solve_l2", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":115
 *         violation[0] = fabs(Dp)
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED int *__pyx_v_indices, CYTHON_UNUSED double *__pyx_v_data, CYTHON_UNUSED int __pyx_v_n_nz, CYTHON_UNUSED double *__pyx_v_y, CYTHON_UNUSED double *__pyx_v_b, CYTHON_UNUSED double *__pyx_v_Lp, CYTHON_UNUSED double *__pyx_v_Lpp, CYTHON_UNUSED double *__pyx_v_L) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("derivatives", 0);

  /* "lightning/impl/primal_cd_fast.pyx":126
 *                           double *Lpp,
 *                           double *L):
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 *     cdef void update(self,
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "lightning/impl/primal_cd_fast.pyx":115
 *         violation[0] = fabs(Dp)
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.LossFunction.derivatives", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":128
 *         raise NotImplementedError()
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, CYTHON_UNUSED double __pyx_v_z_diff, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED int *__pyx_v_indices, CYTHON_UNUSED double *__pyx_v_data, CYTHON_UNUSED int __pyx_v_n_nz, CYTHON_UNUSED double *__pyx_v_y, CYTHON_UNUSED double *__pyx_v_b, CYTHON_UNUSED double *__pyx_v_L_new) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update", 0);

  /* "lightning/impl/primal_cd_fast.pyx":138
 *                      double *b,
 *                      double *L_new):
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 *     cdef void recompute(self,
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "lightning/impl/primal_cd_fast.pyx":128
 *         raise NotImplementedError()
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.LossFunction.update", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":140
 *         raise NotImplementedError()
 * 
 *     cdef void recompute(self,             # <<<<<<<<<<<<<<
 *                         ColumnDataset X,
 *                         double* y,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_recompute(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, CYTHON_UNUSED double *__pyx_v_y, CYTHON_UNUSED double *__pyx_v_w, CYTHON_UNUSED double *__pyx_v_b) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("recompute", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":147
 *         pass
 * 
 *     cdef void _lipschitz_constant(self,             # <<<<<<<<<<<<<<
 *                                   ColumnDataset X,
 *                                   double scale,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction__lipschitz_constant(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double __pyx_v_scale, double *__pyx_v_out) {
  CYTHON_UNUSED int __pyx_v_n_samples;
  int __pyx_v_n_features;
  CYTHON_UNUSED int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_ii;
  double *__pyx_v_data;
  int *__pyx_v_indices;
  int __pyx_v_n_nz;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_lipschitz_constant", 0);

  /* "lightning/impl/primal_cd_fast.pyx":152
 *                                   double* out):
 * 
 *         cdef int n_samples = X.get_n_samples()             # <<<<<<<<<<<<<<
 *         cdef int n_features = X.get_n_features()
 *         cdef int i, j, ii
 */
  __pyx_v_n_samples = ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->__pyx_base.get_n_samples(((struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset *)__pyx_v_X), 0);

  /* "lightning/impl/primal_cd_fast.pyx":153
 * 
 *         cdef int n_samples = X.get_n_samples()
 *         cdef int n_features = X.get_n_features()             # <<<<<<<<<<<<<<
 *         cdef int i, j, ii
 * 
 */
  __pyx_v_n_features = ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->__pyx_base.get_n_features(((struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset *)__pyx_v_X), 0);

  /* "lightning/impl/primal_cd_fast.pyx":161
 *         cdef int n_nz
 * 
 *         for j in xrange(n_features):             # <<<<<<<<<<<<<<
 *             X.get_column_ptr(j, &indices, &data, &n_nz)
 * 
 */
  __pyx_t_1 = __pyx_v_n_features;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_j = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":162
 * 
 *         for j in xrange(n_features):
 *             X.get_column_ptr(j, &indices, &data, &n_nz)             # <<<<<<<<<<<<<<
 * 
 *             for ii in xrange(n_nz):
 */
    ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->get_column_ptr(__pyx_v_X, __pyx_v_j, (&__pyx_v_indices), (&__pyx_v_data), (&__pyx_v_n_nz));

    /* "lightning/impl/primal_cd_fast.pyx":164
 *             X.get_column_ptr(j, &indices, &data, &n_nz)
 * 
 *             for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *                 i = indices[ii]
 * 
 */
    __pyx_t_3 = __pyx_v_n_nz;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_ii = __pyx_t_4;

      /* "lightning/impl/primal_cd_fast.pyx":165
 * 
 *             for ii in xrange(n_nz):
 *                 i = indices[ii]             # <<<<<<<<<<<<<<
 * 
 *                 out[j] += scale * data[ii] * data[ii]
 */
      __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

      /* "lightning/impl/primal_cd_fast.pyx":167
 *                 i = indices[ii]
 * 
 *                 out[j] += scale * data[ii] * data[ii]             # <<<<<<<<<<<<<<
 * 
 *     # L1 regularization
 */
      __pyx_t_5 = __pyx_v_j;
      (__pyx_v_out[__pyx_t_5]) = ((__pyx_v_out[__pyx_t_5]) + ((__pyx_v_scale * (__pyx_v_data[__pyx_v_ii])) * (__pyx_v_data[__pyx_v_ii])));
    }
  }

  /* "lightning/impl/primal_cd_fast.pyx":147
 *         pass
 * 
 *     cdef void _lipschitz_constant(self,             # <<<<<<<<<<<<<<
 *                                   ColumnDataset X,
 *                                   double scale,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":171
 *     # L1 regularization
 * 
 *     cdef int solve_l1(self,             # <<<<<<<<<<<<<<
 *                       int j,
 *                       double C,
 */

static int __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_solve_l1(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, int __pyx_v_j, double __pyx_v_C, double __pyx_v_alpha, double *__pyx_v_w, int __pyx_v_n_samples, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double *__pyx_v_y, double *__pyx_v_b, double __pyx_v_Lcst, double __pyx_v_violation_old, double *__pyx_v_violation, int __pyx_v_shrinking) {
  double __pyx_v_Lj_zero;
  double __pyx_v_Lp;
  double __pyx_v_Lpp;
  double __pyx_v_Lpp_wj;
  double __pyx_v_d;
  double __pyx_v_wj_abs;
  double __pyx_v_cond;
  double __pyx_v_Lj_z;
  int __pyx_v_step;
  int __pyx_v_recompute;
  double *__pyx_v_data;
  int *__pyx_v_indices;
  int __pyx_v_n_nz;
  CYTHON_UNUSED double __pyx_v_Lpp_max;
  double __pyx_v_Lp_p;
  double __pyx_v_Lp_n;
  double __pyx_v_delta;
  double __pyx_v_z_old;
  double __pyx_v_z;
  double __pyx_v_z_diff;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve_l1", 0);

  /* "lightning/impl/primal_cd_fast.pyx":184
 *                       double *violation,
 *                       int shrinking):
 *         cdef double Lj_zero = 0             # <<<<<<<<<<<<<<
 *         cdef double Lp = 0
 *         cdef double Lpp = 0
 */
  __pyx_v_Lj_zero = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":185
 *                       int shrinking):
 *         cdef double Lj_zero = 0
 *         cdef double Lp = 0             # <<<<<<<<<<<<<<
 *         cdef double Lpp = 0
 *         cdef double Lpp_wj, d, wj_abs
 */
  __pyx_v_Lp = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":186
 *         cdef double Lj_zero = 0
 *         cdef double Lp = 0
 *         cdef double Lpp = 0             # <<<<<<<<<<<<<<
 *         cdef double Lpp_wj, d, wj_abs
 *         cdef double cond
 */
  __pyx_v_Lpp = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":198
 * 
 *         # Retrieve column.
 *         X.get_column_ptr(j, &indices, &data, &n_nz)             # <<<<<<<<<<<<<<
 * 
 *         # Compute derivatives
 */
  ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->get_column_ptr(__pyx_v_X, __pyx_v_j, (&__pyx_v_indices), (&__pyx_v_data), (&__pyx_v_n_nz));

  /* "lightning/impl/primal_cd_fast.pyx":201
 * 
 *         # Compute derivatives
 *         self.derivatives(j, C, indices, data, n_nz, y, b,             # <<<<<<<<<<<<<<
 *                          &Lp, &Lpp, &Lj_zero)
 * 
 */
  ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->derivatives(__pyx_v_self, __pyx_v_j, __pyx_v_C, __pyx_v_indices, __pyx_v_data, __pyx_v_n_nz, __pyx_v_y, __pyx_v_b, (&__pyx_v_Lp), (&__pyx_v_Lpp), (&__pyx_v_Lj_zero));

  /* "lightning/impl/primal_cd_fast.pyx":205
 * 
 *         # User chose to run the algorithm without line search.
 *         if self.max_steps == 0:             # <<<<<<<<<<<<<<
 *             Lpp_max = Lcst
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->max_steps == 0) != 0);
  if (__pyx_t_1) {

    /* "lightning/impl/primal_cd_fast.pyx":206
 *         # User chose to run the algorithm without line search.
 *         if self.max_steps == 0:
 *             Lpp_max = Lcst             # <<<<<<<<<<<<<<
 * 
 *         Lpp = max(Lpp, 1e-12)
 */
    __pyx_v_Lpp_max = __pyx_v_Lcst;

    /* "lightning/impl/primal_cd_fast.pyx":205
 * 
 *         # User chose to run the algorithm without line search.
 *         if self.max_steps == 0:             # <<<<<<<<<<<<<<
 *             Lpp_max = Lcst
 * 
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":208
 *             Lpp_max = Lcst
 * 
 *         Lpp = max(Lpp, 1e-12)             # <<<<<<<<<<<<<<
 * 
 *         # Add regularization term.
 */
  __pyx_t_2 = 1e-12;
  __pyx_t_3 = __pyx_v_Lpp;
  if (((__pyx_t_2 > __pyx_t_3) != 0)) {
    __pyx_t_4 = __pyx_t_2;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  __pyx_v_Lpp = __pyx_t_4;

  /* "lightning/impl/primal_cd_fast.pyx":211
 * 
 *         # Add regularization term.
 *         Lp_p = Lp + alpha             # <<<<<<<<<<<<<<
 *         Lp_n = Lp - alpha
 *         violation[0] = 0
 */
  __pyx_v_Lp_p = (__pyx_v_Lp + __pyx_v_alpha);

  /* "lightning/impl/primal_cd_fast.pyx":212
 *         # Add regularization term.
 *         Lp_p = Lp + alpha
 *         Lp_n = Lp - alpha             # <<<<<<<<<<<<<<
 *         violation[0] = 0
 * 
 */
  __pyx_v_Lp_n = (__pyx_v_Lp - __pyx_v_alpha);

  /* "lightning/impl/primal_cd_fast.pyx":213
 *         Lp_p = Lp + alpha
 *         Lp_n = Lp - alpha
 *         violation[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         # Violation and shrinking.
 */
  (__pyx_v_violation[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":216
 * 
 *         # Violation and shrinking.
 *         if w[j] == 0:             # <<<<<<<<<<<<<<
 *             if Lp_p < 0:
 *                 violation[0] = -Lp_p
 */
  __pyx_t_1 = (((__pyx_v_w[__pyx_v_j]) == 0.0) != 0);
  if (__pyx_t_1) {

    /* "lightning/impl/primal_cd_fast.pyx":217
 *         # Violation and shrinking.
 *         if w[j] == 0:
 *             if Lp_p < 0:             # <<<<<<<<<<<<<<
 *                 violation[0] = -Lp_p
 *             elif Lp_n > 0:
 */
    __pyx_t_1 = ((__pyx_v_Lp_p < 0.0) != 0);
    if (__pyx_t_1) {

      /* "lightning/impl/primal_cd_fast.pyx":218
 *         if w[j] == 0:
 *             if Lp_p < 0:
 *                 violation[0] = -Lp_p             # <<<<<<<<<<<<<<
 *             elif Lp_n > 0:
 *                 violation[0] = Lp_n
 */
      (__pyx_v_violation[0]) = (-__pyx_v_Lp_p);

      /* "lightning/impl/primal_cd_fast.pyx":217
 *         # Violation and shrinking.
 *         if w[j] == 0:
 *             if Lp_p < 0:             # <<<<<<<<<<<<<<
 *                 violation[0] = -Lp_p
 *             elif Lp_n > 0:
 */
      goto __pyx_L5;
    }

    /* "lightning/impl/primal_cd_fast.pyx":219
 *             if Lp_p < 0:
 *                 violation[0] = -Lp_p
 *             elif Lp_n > 0:             # <<<<<<<<<<<<<<
 *                 violation[0] = Lp_n
 *             elif shrinking and \
 */
    __pyx_t_1 = ((__pyx_v_Lp_n > 0.0) != 0);
    if (__pyx_t_1) {

      /* "lightning/impl/primal_cd_fast.pyx":220
 *                 violation[0] = -Lp_p
 *             elif Lp_n > 0:
 *                 violation[0] = Lp_n             # <<<<<<<<<<<<<<
 *             elif shrinking and \
 *                  Lp_p > violation_old / n_samples and \
 */
      (__pyx_v_violation[0]) = __pyx_v_Lp_n;

      /* "lightning/impl/primal_cd_fast.pyx":219
 *             if Lp_p < 0:
 *                 violation[0] = -Lp_p
 *             elif Lp_n > 0:             # <<<<<<<<<<<<<<
 *                 violation[0] = Lp_n
 *             elif shrinking and \
 */
      goto __pyx_L5;
    }

    /* "lightning/impl/primal_cd_fast.pyx":221
 *             elif Lp_n > 0:
 *                 violation[0] = Lp_n
 *             elif shrinking and \             # <<<<<<<<<<<<<<
 *                  Lp_p > violation_old / n_samples and \
 *                  Lp_n < -violation_old / n_samples:
 */
    __pyx_t_5 = (__pyx_v_shrinking != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }

    /* "lightning/impl/primal_cd_fast.pyx":222
 *                 violation[0] = Lp_n
 *             elif shrinking and \
 *                  Lp_p > violation_old / n_samples and \             # <<<<<<<<<<<<<<
 *                  Lp_n < -violation_old / n_samples:
 *                 # Shrink!
 */
    __pyx_t_5 = ((__pyx_v_Lp_p > (__pyx_v_violation_old / __pyx_v_n_samples)) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }

    /* "lightning/impl/primal_cd_fast.pyx":223
 *             elif shrinking and \
 *                  Lp_p > violation_old / n_samples and \
 *                  Lp_n < -violation_old / n_samples:             # <<<<<<<<<<<<<<
 *                 # Shrink!
 *                 if self.verbose >= 3:
 */
    __pyx_t_5 = ((__pyx_v_Lp_n < ((-__pyx_v_violation_old) / __pyx_v_n_samples)) != 0);
    __pyx_t_1 = __pyx_t_5;
    __pyx_L6_bool_binop_done:;

    /* "lightning/impl/primal_cd_fast.pyx":221
 *             elif Lp_n > 0:
 *                 violation[0] = Lp_n
 *             elif shrinking and \             # <<<<<<<<<<<<<<
 *                  Lp_p > violation_old / n_samples and \
 *                  Lp_n < -violation_old / n_samples:
 */
    if (__pyx_t_1) {

      /* "lightning/impl/primal_cd_fast.pyx":225
 *                  Lp_n < -violation_old / n_samples:
 *                 # Shrink!
 *                 if self.verbose >= 3:             # <<<<<<<<<<<<<<
 *                     print "Shrink variable", j
 *                 return 1
 */
      __pyx_t_1 = ((__pyx_v_self->verbose >= 3) != 0);
      if (__pyx_t_1) {

        /* "lightning/impl/primal_cd_fast.pyx":226
 *                 # Shrink!
 *                 if self.verbose >= 3:
 *                     print "Shrink variable", j             # <<<<<<<<<<<<<<
 *                 return 1
 *         elif w[j] > 0:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_kp_s_Shrink_variable);
        __Pyx_GIVEREF(__pyx_kp_s_Shrink_variable);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_s_Shrink_variable);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
        __pyx_t_6 = 0;
        if (__Pyx_Print(0, __pyx_t_7, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "lightning/impl/primal_cd_fast.pyx":225
 *                  Lp_n < -violation_old / n_samples:
 *                 # Shrink!
 *                 if self.verbose >= 3:             # <<<<<<<<<<<<<<
 *                     print "Shrink variable", j
 *                 return 1
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":227
 *                 if self.verbose >= 3:
 *                     print "Shrink variable", j
 *                 return 1             # <<<<<<<<<<<<<<
 *         elif w[j] > 0:
 *             violation[0] = fabs(Lp_p)
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "lightning/impl/primal_cd_fast.pyx":221
 *             elif Lp_n > 0:
 *                 violation[0] = Lp_n
 *             elif shrinking and \             # <<<<<<<<<<<<<<
 *                  Lp_p > violation_old / n_samples and \
 *                  Lp_n < -violation_old / n_samples:
 */
    }
    __pyx_L5:;

    /* "lightning/impl/primal_cd_fast.pyx":216
 * 
 *         # Violation and shrinking.
 *         if w[j] == 0:             # <<<<<<<<<<<<<<
 *             if Lp_p < 0:
 *                 violation[0] = -Lp_p
 */
    goto __pyx_L4;
  }

  /* "lightning/impl/primal_cd_fast.pyx":228
 *                     print "Shrink variable", j
 *                 return 1
 *         elif w[j] > 0:             # <<<<<<<<<<<<<<
 *             violation[0] = fabs(Lp_p)
 *         else:
 */
  __pyx_t_1 = (((__pyx_v_w[__pyx_v_j]) > 0.0) != 0);
  if (__pyx_t_1) {

    /* "lightning/impl/primal_cd_fast.pyx":229
 *                 return 1
 *         elif w[j] > 0:
 *             violation[0] = fabs(Lp_p)             # <<<<<<<<<<<<<<
 *         else:
 *             violation[0] = fabs(Lp_n)
 */
    (__pyx_v_violation[0]) = fabs(__pyx_v_Lp_p);

    /* "lightning/impl/primal_cd_fast.pyx":228
 *                     print "Shrink variable", j
 *                 return 1
 *         elif w[j] > 0:             # <<<<<<<<<<<<<<
 *             violation[0] = fabs(Lp_p)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "lightning/impl/primal_cd_fast.pyx":231
 *             violation[0] = fabs(Lp_p)
 *         else:
 *             violation[0] = fabs(Lp_n)             # <<<<<<<<<<<<<<
 * 
 *         # Obtain Newton direction d.
 */
  /*else*/ {
    (__pyx_v_violation[0]) = fabs(__pyx_v_Lp_n);
  }
  __pyx_L4:;

  /* "lightning/impl/primal_cd_fast.pyx":234
 * 
 *         # Obtain Newton direction d.
 *         Lpp_wj = Lpp * w[j]             # <<<<<<<<<<<<<<
 *         if Lp_p <= Lpp_wj:
 *             d = -Lp_p / Lpp
 */
  __pyx_v_Lpp_wj = (__pyx_v_Lpp * (__pyx_v_w[__pyx_v_j]));

  /* "lightning/impl/primal_cd_fast.pyx":235
 *         # Obtain Newton direction d.
 *         Lpp_wj = Lpp * w[j]
 *         if Lp_p <= Lpp_wj:             # <<<<<<<<<<<<<<
 *             d = -Lp_p / Lpp
 *         elif Lp_n >= Lpp_wj:
 */
  __pyx_t_1 = ((__pyx_v_Lp_p <= __pyx_v_Lpp_wj) != 0);
  if (__pyx_t_1) {

    /* "lightning/impl/primal_cd_fast.pyx":236
 *         Lpp_wj = Lpp * w[j]
 *         if Lp_p <= Lpp_wj:
 *             d = -Lp_p / Lpp             # <<<<<<<<<<<<<<
 *         elif Lp_n >= Lpp_wj:
 *             d = -Lp_n / Lpp
 */
    __pyx_v_d = ((-__pyx_v_Lp_p) / __pyx_v_Lpp);

    /* "lightning/impl/primal_cd_fast.pyx":235
 *         # Obtain Newton direction d.
 *         Lpp_wj = Lpp * w[j]
 *         if Lp_p <= Lpp_wj:             # <<<<<<<<<<<<<<
 *             d = -Lp_p / Lpp
 *         elif Lp_n >= Lpp_wj:
 */
    goto __pyx_L10;
  }

  /* "lightning/impl/primal_cd_fast.pyx":237
 *         if Lp_p <= Lpp_wj:
 *             d = -Lp_p / Lpp
 *         elif Lp_n >= Lpp_wj:             # <<<<<<<<<<<<<<
 *             d = -Lp_n / Lpp
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_Lp_n >= __pyx_v_Lpp_wj) != 0);
  if (__pyx_t_1) {

    /* "lightning/impl/primal_cd_fast.pyx":238
 *             d = -Lp_p / Lpp
 *         elif Lp_n >= Lpp_wj:
 *             d = -Lp_n / Lpp             # <<<<<<<<<<<<<<
 *         else:
 *             d = -w[j]
 */
    __pyx_v_d = ((-__pyx_v_Lp_n) / __pyx_v_Lpp);

    /* "lightning/impl/primal_cd_fast.pyx":237
 *         if Lp_p <= Lpp_wj:
 *             d = -Lp_p / Lpp
 *         elif Lp_n >= Lpp_wj:             # <<<<<<<<<<<<<<
 *             d = -Lp_n / Lpp
 *         else:
 */
    goto __pyx_L10;
  }

  /* "lightning/impl/primal_cd_fast.pyx":240
 *             d = -Lp_n / Lpp
 *         else:
 *             d = -w[j]             # <<<<<<<<<<<<<<
 * 
 *         if fabs(d) < 1.0e-12:
 */
  /*else*/ {
    __pyx_v_d = (-(__pyx_v_w[__pyx_v_j]));
  }
  __pyx_L10:;

  /* "lightning/impl/primal_cd_fast.pyx":242
 *             d = -w[j]
 * 
 *         if fabs(d) < 1.0e-12:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
  __pyx_t_1 = ((fabs(__pyx_v_d) < 1.0e-12) != 0);
  if (__pyx_t_1) {

    /* "lightning/impl/primal_cd_fast.pyx":243
 * 
 *         if fabs(d) < 1.0e-12:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         # Perform line search.
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "lightning/impl/primal_cd_fast.pyx":242
 *             d = -w[j]
 * 
 *         if fabs(d) < 1.0e-12:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":248
 *         # Check z = lambda*d for lambda = 1, beta, beta^2 until a
 *         # sufficient decrease condition is met.
 *         wj_abs = fabs(w[j])             # <<<<<<<<<<<<<<
 *         delta = alpha * (fabs(w[j] + d) - wj_abs) + Lp * d
 *         z_old = 0
 */
  __pyx_v_wj_abs = fabs((__pyx_v_w[__pyx_v_j]));

  /* "lightning/impl/primal_cd_fast.pyx":249
 *         # sufficient decrease condition is met.
 *         wj_abs = fabs(w[j])
 *         delta = alpha * (fabs(w[j] + d) - wj_abs) + Lp * d             # <<<<<<<<<<<<<<
 *         z_old = 0
 *         z = d
 */
  __pyx_v_delta = ((__pyx_v_alpha * (fabs(((__pyx_v_w[__pyx_v_j]) + __pyx_v_d)) - __pyx_v_wj_abs)) + (__pyx_v_Lp * __pyx_v_d));

  /* "lightning/impl/primal_cd_fast.pyx":250
 *         wj_abs = fabs(w[j])
 *         delta = alpha * (fabs(w[j] + d) - wj_abs) + Lp * d
 *         z_old = 0             # <<<<<<<<<<<<<<
 *         z = d
 * 
 */
  __pyx_v_z_old = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":251
 *         delta = alpha * (fabs(w[j] + d) - wj_abs) + Lp * d
 *         z_old = 0
 *         z = d             # <<<<<<<<<<<<<<
 * 
 *         step = 1
 */
  __pyx_v_z = __pyx_v_d;

  /* "lightning/impl/primal_cd_fast.pyx":253
 *         z = d
 * 
 *         step = 1             # <<<<<<<<<<<<<<
 *         recompute = 0
 *         while True:
 */
  __pyx_v_step = 1;

  /* "lightning/impl/primal_cd_fast.pyx":254
 * 
 *         step = 1
 *         recompute = 0             # <<<<<<<<<<<<<<
 *         while True:
 *             # Reversed because of the minus in b[i] = 1 - y_i w^T x_i.
 */
  __pyx_v_recompute = 0;

  /* "lightning/impl/primal_cd_fast.pyx":255
 *         step = 1
 *         recompute = 0
 *         while True:             # <<<<<<<<<<<<<<
 *             # Reversed because of the minus in b[i] = 1 - y_i w^T x_i.
 *             z_diff = z_old - z
 */
  while (1) {

    /* "lightning/impl/primal_cd_fast.pyx":257
 *         while True:
 *             # Reversed because of the minus in b[i] = 1 - y_i w^T x_i.
 *             z_diff = z_old - z             # <<<<<<<<<<<<<<
 * 
 *             # Compute objective function value.
 */
    __pyx_v_z_diff = (__pyx_v_z_old - __pyx_v_z);

    /* "lightning/impl/primal_cd_fast.pyx":260
 * 
 *             # Compute objective function value.
 *             self.update(j, z_diff, C, indices, data, n_nz, y, b, &Lj_z)             # <<<<<<<<<<<<<<
 * 
 *             if step >= self.max_steps:
 */
    ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->update(__pyx_v_self, __pyx_v_j, __pyx_v_z_diff, __pyx_v_C, __pyx_v_indices, __pyx_v_data, __pyx_v_n_nz, __pyx_v_y, __pyx_v_b, (&__pyx_v_Lj_z));

    /* "lightning/impl/primal_cd_fast.pyx":262
 *             self.update(j, z_diff, C, indices, data, n_nz, y, b, &Lj_z)
 * 
 *             if step >= self.max_steps:             # <<<<<<<<<<<<<<
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:
 */
    __pyx_t_1 = ((__pyx_v_step >= __pyx_v_self->max_steps) != 0);
    if (__pyx_t_1) {

      /* "lightning/impl/primal_cd_fast.pyx":263
 * 
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:             # <<<<<<<<<<<<<<
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."
 */
      __pyx_t_1 = ((__pyx_v_self->max_steps > 1) != 0);
      if (__pyx_t_1) {

        /* "lightning/impl/primal_cd_fast.pyx":264
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:             # <<<<<<<<<<<<<<
 *                         print "Max steps reached during line search..."
 *                     recompute = 1
 */
        __pyx_t_1 = ((__pyx_v_self->verbose >= 2) != 0);
        if (__pyx_t_1) {

          /* "lightning/impl/primal_cd_fast.pyx":265
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."             # <<<<<<<<<<<<<<
 *                     recompute = 1
 *                 break
 */
          if (__Pyx_PrintOne(0, __pyx_kp_s_Max_steps_reached_during_line_se) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

          /* "lightning/impl/primal_cd_fast.pyx":264
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:             # <<<<<<<<<<<<<<
 *                         print "Max steps reached during line search..."
 *                     recompute = 1
 */
        }

        /* "lightning/impl/primal_cd_fast.pyx":266
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."
 *                     recompute = 1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_recompute = 1;

        /* "lightning/impl/primal_cd_fast.pyx":263
 * 
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:             # <<<<<<<<<<<<<<
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":267
 *                         print "Max steps reached during line search..."
 *                     recompute = 1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             # Check stopping condition.
 */
      goto __pyx_L13_break;

      /* "lightning/impl/primal_cd_fast.pyx":262
 *             self.update(j, z_diff, C, indices, data, n_nz, y, b, &Lj_z)
 * 
 *             if step >= self.max_steps:             # <<<<<<<<<<<<<<
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":270
 * 
 *             # Check stopping condition.
 *             cond = alpha * (fabs(w[j] + z) - wj_abs) - self.sigma * delta             # <<<<<<<<<<<<<<
 *             if cond + Lj_z - Lj_zero <= 0:
 *                 break
 */
    __pyx_v_cond = ((__pyx_v_alpha * (fabs(((__pyx_v_w[__pyx_v_j]) + __pyx_v_z)) - __pyx_v_wj_abs)) - (__pyx_v_self->sigma * __pyx_v_delta));

    /* "lightning/impl/primal_cd_fast.pyx":271
 *             # Check stopping condition.
 *             cond = alpha * (fabs(w[j] + z) - wj_abs) - self.sigma * delta
 *             if cond + Lj_z - Lj_zero <= 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_1 = ((((__pyx_v_cond + __pyx_v_Lj_z) - __pyx_v_Lj_zero) <= 0.0) != 0);
    if (__pyx_t_1) {

      /* "lightning/impl/primal_cd_fast.pyx":272
 *             cond = alpha * (fabs(w[j] + z) - wj_abs) - self.sigma * delta
 *             if cond + Lj_z - Lj_zero <= 0:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             z_old = z
 */
      goto __pyx_L13_break;

      /* "lightning/impl/primal_cd_fast.pyx":271
 *             # Check stopping condition.
 *             cond = alpha * (fabs(w[j] + z) - wj_abs) - self.sigma * delta
 *             if cond + Lj_z - Lj_zero <= 0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":274
 *                 break
 * 
 *             z_old = z             # <<<<<<<<<<<<<<
 *             z *= self.beta
 *             delta *= self.beta
 */
    __pyx_v_z_old = __pyx_v_z;

    /* "lightning/impl/primal_cd_fast.pyx":275
 * 
 *             z_old = z
 *             z *= self.beta             # <<<<<<<<<<<<<<
 *             delta *= self.beta
 *             step += 1
 */
    __pyx_v_z = (__pyx_v_z * __pyx_v_self->beta);

    /* "lightning/impl/primal_cd_fast.pyx":276
 *             z_old = z
 *             z *= self.beta
 *             delta *= self.beta             # <<<<<<<<<<<<<<
 *             step += 1
 * 
 */
    __pyx_v_delta = (__pyx_v_delta * __pyx_v_self->beta);

    /* "lightning/impl/primal_cd_fast.pyx":277
 *             z *= self.beta
 *             delta *= self.beta
 *             step += 1             # <<<<<<<<<<<<<<
 * 
 *         # end for num_linesearch
 */
    __pyx_v_step = (__pyx_v_step + 1);
  }
  __pyx_L13_break:;

  /* "lightning/impl/primal_cd_fast.pyx":282
 * 
 *         # Update weight w[j].
 *         w[j] += z             # <<<<<<<<<<<<<<
 * 
 *         # Recompute predictions / errors / residuals if needed.
 */
  __pyx_t_8 = __pyx_v_j;
  (__pyx_v_w[__pyx_t_8]) = ((__pyx_v_w[__pyx_t_8]) + __pyx_v_z);

  /* "lightning/impl/primal_cd_fast.pyx":285
 * 
 *         # Recompute predictions / errors / residuals if needed.
 *         if recompute:             # <<<<<<<<<<<<<<
 *             self.recompute(X, y, w, b)
 * 
 */
  __pyx_t_1 = (__pyx_v_recompute != 0);
  if (__pyx_t_1) {

    /* "lightning/impl/primal_cd_fast.pyx":286
 *         # Recompute predictions / errors / residuals if needed.
 *         if recompute:
 *             self.recompute(X, y, w, b)             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->recompute(__pyx_v_self, __pyx_v_X, __pyx_v_y, __pyx_v_w, __pyx_v_b);

    /* "lightning/impl/primal_cd_fast.pyx":285
 * 
 *         # Recompute predictions / errors / residuals if needed.
 *         if recompute:             # <<<<<<<<<<<<<<
 *             self.recompute(X, y, w, b)
 * 
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":288
 *             self.recompute(X, y, w, b)
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     # L1/L2 regularization
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "lightning/impl/primal_cd_fast.pyx":171
 *     # L1 regularization
 * 
 *     cdef int solve_l1(self,             # <<<<<<<<<<<<<<
 *                       int j,
 *                       double C,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.LossFunction.solve_l1", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lightning/impl/primal_cd_fast.pyx":292
 *     # L1/L2 regularization
 * 
 *     cdef int solve_l1l2(self,             # <<<<<<<<<<<<<<
 *                         int j,
 *                         double C,
 */

static int __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_solve_l1l2(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, int __pyx_v_j, double __pyx_v_C, double __pyx_v_alpha, PyArrayObject *__pyx_v_w, int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, int *__pyx_v_y, PyArrayObject *__pyx_v_Y, int __pyx_v_multiclass, PyArrayObject *__pyx_v_b, double __pyx_v_Lcst, double *__pyx_v_g, double *__pyx_v_d, double *__pyx_v_d_old, double *__pyx_v_Z, double __pyx_v_violation_old, double *__pyx_v_violation, int __pyx_v_shrinking) {
  int __pyx_v_n_samples;
  int __pyx_v_n_features;
  int __pyx_v_k;
  int __pyx_v_step;
  int __pyx_v_recompute;
  double __pyx_v_scaling;
  double __pyx_v_delta;
  double __pyx_v_L;
  double __pyx_v_R_j;
  double __pyx_v_Lpp_max;
  double __pyx_v_dmax;
  double __pyx_v_tmp;
  double __pyx_v_L_new;
  double __pyx_v_R_j_new;
  double __pyx_v_L_tmp;
  double __pyx_v_Lpp_tmp;
  double *__pyx_v_y_ptr;
  double *__pyx_v_b_ptr;
  double *__pyx_v_w_ptr;
  double __pyx_v_z_diff;
  double __pyx_v_g_norm;
  int __pyx_v_nv;
  double __pyx_v_DBL_MAX;
  double *__pyx_v_data;
  int *__pyx_v_indices;
  int __pyx_v_n_nz;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_Y;
  __Pyx_Buffer __pyx_pybuffer_Y;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_b;
  __Pyx_Buffer __pyx_pybuffer_b;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_w;
  __Pyx_Buffer __pyx_pybuffer_w;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  int __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("solve_l1l2", 0);
  __pyx_pybuffer_w.pybuffer.buf = NULL;
  __pyx_pybuffer_w.refcount = 0;
  __pyx_pybuffernd_w.data = NULL;
  __pyx_pybuffernd_w.rcbuffer = &__pyx_pybuffer_w;
  __pyx_pybuffer_Y.pybuffer.buf = NULL;
  __pyx_pybuffer_Y.refcount = 0;
  __pyx_pybuffernd_Y.data = NULL;
  __pyx_pybuffernd_Y.rcbuffer = &__pyx_pybuffer_Y;
  __pyx_pybuffer_b.pybuffer.buf = NULL;
  __pyx_pybuffer_b.refcount = 0;
  __pyx_pybuffernd_b.data = NULL;
  __pyx_pybuffernd_b.rcbuffer = &__pyx_pybuffer_b;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_w.rcbuffer->pybuffer, (PyObject*)__pyx_v_w, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_w.diminfo[0].strides = __pyx_pybuffernd_w.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_w.diminfo[0].shape = __pyx_pybuffernd_w.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_w.diminfo[1].strides = __pyx_pybuffernd_w.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_w.diminfo[1].shape = __pyx_pybuffernd_w.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_Y.rcbuffer->pybuffer, (PyObject*)__pyx_v_Y, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_F_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_Y.diminfo[0].strides = __pyx_pybuffernd_Y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_Y.diminfo[0].shape = __pyx_pybuffernd_Y.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_Y.diminfo[1].strides = __pyx_pybuffernd_Y.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_Y.diminfo[1].shape = __pyx_pybuffernd_Y.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_b.rcbuffer->pybuffer, (PyObject*)__pyx_v_b, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_b.diminfo[0].strides = __pyx_pybuffernd_b.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_b.diminfo[0].shape = __pyx_pybuffernd_b.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_b.diminfo[1].strides = __pyx_pybuffernd_b.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_b.diminfo[1].shape = __pyx_pybuffernd_b.rcbuffer->pybuffer.shape[1];

  /* "lightning/impl/primal_cd_fast.pyx":312
 *                         int shrinking):
 * 
 *         cdef int n_samples = Y.shape[0]             # <<<<<<<<<<<<<<
 *         cdef int n_features = w.shape[1]
 *         cdef int i, k, ii, step, recompute
 */
  __pyx_v_n_samples = (__pyx_v_Y->dimensions[0]);

  /* "lightning/impl/primal_cd_fast.pyx":313
 * 
 *         cdef int n_samples = Y.shape[0]
 *         cdef int n_features = w.shape[1]             # <<<<<<<<<<<<<<
 *         cdef int i, k, ii, step, recompute
 *         cdef double scaling, delta, L, R_j, Lpp_max, dmax
 */
  __pyx_v_n_features = (__pyx_v_w->dimensions[1]);

  /* "lightning/impl/primal_cd_fast.pyx":318
 *         cdef double tmp, L_new, R_j_new
 *         cdef double L_tmp, Lpp_tmp
 *         cdef double* y_ptr = <double*>Y.data             # <<<<<<<<<<<<<<
 *         cdef double* b_ptr = <double*>b.data
 *         cdef double* w_ptr = <double*>w.data
 */
  __pyx_v_y_ptr = ((double *)__pyx_v_Y->data);

  /* "lightning/impl/primal_cd_fast.pyx":319
 *         cdef double L_tmp, Lpp_tmp
 *         cdef double* y_ptr = <double*>Y.data
 *         cdef double* b_ptr = <double*>b.data             # <<<<<<<<<<<<<<
 *         cdef double* w_ptr = <double*>w.data
 *         cdef double z_diff, g_norm
 */
  __pyx_v_b_ptr = ((double *)__pyx_v_b->data);

  /* "lightning/impl/primal_cd_fast.pyx":320
 *         cdef double* y_ptr = <double*>Y.data
 *         cdef double* b_ptr = <double*>b.data
 *         cdef double* w_ptr = <double*>w.data             # <<<<<<<<<<<<<<
 *         cdef double z_diff, g_norm
 *         cdef int nv = n_samples * n_vectors
 */
  __pyx_v_w_ptr = ((double *)__pyx_v_w->data);

  /* "lightning/impl/primal_cd_fast.pyx":322
 *         cdef double* w_ptr = <double*>w.data
 *         cdef double z_diff, g_norm
 *         cdef int nv = n_samples * n_vectors             # <<<<<<<<<<<<<<
 * 
 *         # getting DBL_MAX from float.h fails for some reason on
 */
  __pyx_v_nv = (__pyx_v_n_samples * __pyx_v_n_vectors);

  /* "lightning/impl/primal_cd_fast.pyx":327
 *         # MSVC 9.0 (which is needed to compile on Python 2.7)
 *         # To avoid it we take this constant from numpy
 *         cdef double DBL_MAX = np.finfo(np.double).max             # <<<<<<<<<<<<<<
 * 
 *         # Data pointers
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_finfo); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_max); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_DBL_MAX = __pyx_t_6;

  /* "lightning/impl/primal_cd_fast.pyx":335
 * 
 *         # Retrieve column.
 *         X.get_column_ptr(j, &indices, &data, &n_nz)             # <<<<<<<<<<<<<<
 * 
 *         # Compute partial gradient.
 */
  ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->get_column_ptr(__pyx_v_X, __pyx_v_j, (&__pyx_v_indices), (&__pyx_v_data), (&__pyx_v_n_nz));

  /* "lightning/impl/primal_cd_fast.pyx":338
 * 
 *         # Compute partial gradient.
 *         if multiclass:             # <<<<<<<<<<<<<<
 *             self.derivatives_mc(j, C, n_samples, n_vectors, indices, data, n_nz,
 *                                 y, b_ptr, g, Z, &L, &Lpp_max)
 */
  __pyx_t_7 = (__pyx_v_multiclass != 0);
  if (__pyx_t_7) {

    /* "lightning/impl/primal_cd_fast.pyx":339
 *         # Compute partial gradient.
 *         if multiclass:
 *             self.derivatives_mc(j, C, n_samples, n_vectors, indices, data, n_nz,             # <<<<<<<<<<<<<<
 *                                 y, b_ptr, g, Z, &L, &Lpp_max)
 *         else: # multi-task
 */
    ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->derivatives_mc(__pyx_v_self, __pyx_v_j, __pyx_v_C, __pyx_v_n_samples, __pyx_v_n_vectors, __pyx_v_indices, __pyx_v_data, __pyx_v_n_nz, __pyx_v_y, __pyx_v_b_ptr, __pyx_v_g, __pyx_v_Z, (&__pyx_v_L), (&__pyx_v_Lpp_max));

    /* "lightning/impl/primal_cd_fast.pyx":338
 * 
 *         # Compute partial gradient.
 *         if multiclass:             # <<<<<<<<<<<<<<
 *             self.derivatives_mc(j, C, n_samples, n_vectors, indices, data, n_nz,
 *                                 y, b_ptr, g, Z, &L, &Lpp_max)
 */
    goto __pyx_L3;
  }

  /* "lightning/impl/primal_cd_fast.pyx":342
 *                                 y, b_ptr, g, Z, &L, &Lpp_max)
 *         else: # multi-task
 *             L = 0             # <<<<<<<<<<<<<<
 *             Lpp_max = -DBL_MAX
 * 
 */
  /*else*/ {
    __pyx_v_L = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":343
 *         else: # multi-task
 *             L = 0
 *             Lpp_max = -DBL_MAX             # <<<<<<<<<<<<<<
 * 
 *             for k in xrange(n_vectors):
 */
    __pyx_v_Lpp_max = (-__pyx_v_DBL_MAX);

    /* "lightning/impl/primal_cd_fast.pyx":345
 *             Lpp_max = -DBL_MAX
 * 
 *             for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                 self.derivatives(j, C, indices, data, n_nz, y_ptr,
 *                                  b_ptr, &g[k], &Lpp_tmp, &L_tmp)
 */
    __pyx_t_8 = __pyx_v_n_vectors;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_k = __pyx_t_9;

      /* "lightning/impl/primal_cd_fast.pyx":346
 * 
 *             for k in xrange(n_vectors):
 *                 self.derivatives(j, C, indices, data, n_nz, y_ptr,             # <<<<<<<<<<<<<<
 *                                  b_ptr, &g[k], &Lpp_tmp, &L_tmp)
 *                 L += L_tmp
 */
      ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->derivatives(__pyx_v_self, __pyx_v_j, __pyx_v_C, __pyx_v_indices, __pyx_v_data, __pyx_v_n_nz, __pyx_v_y_ptr, __pyx_v_b_ptr, (&(__pyx_v_g[__pyx_v_k])), (&__pyx_v_Lpp_tmp), (&__pyx_v_L_tmp));

      /* "lightning/impl/primal_cd_fast.pyx":348
 *                 self.derivatives(j, C, indices, data, n_nz, y_ptr,
 *                                  b_ptr, &g[k], &Lpp_tmp, &L_tmp)
 *                 L += L_tmp             # <<<<<<<<<<<<<<
 *                 Lpp_max = max(Lpp_max, Lpp_tmp)
 *                 y_ptr += n_samples
 */
      __pyx_v_L = (__pyx_v_L + __pyx_v_L_tmp);

      /* "lightning/impl/primal_cd_fast.pyx":349
 *                                  b_ptr, &g[k], &Lpp_tmp, &L_tmp)
 *                 L += L_tmp
 *                 Lpp_max = max(Lpp_max, Lpp_tmp)             # <<<<<<<<<<<<<<
 *                 y_ptr += n_samples
 *                 b_ptr += n_samples
 */
      __pyx_t_6 = __pyx_v_Lpp_tmp;
      __pyx_t_10 = __pyx_v_Lpp_max;
      if (((__pyx_t_6 > __pyx_t_10) != 0)) {
        __pyx_t_11 = __pyx_t_6;
      } else {
        __pyx_t_11 = __pyx_t_10;
      }
      __pyx_v_Lpp_max = __pyx_t_11;

      /* "lightning/impl/primal_cd_fast.pyx":350
 *                 L += L_tmp
 *                 Lpp_max = max(Lpp_max, Lpp_tmp)
 *                 y_ptr += n_samples             # <<<<<<<<<<<<<<
 *                 b_ptr += n_samples
 * 
 */
      __pyx_v_y_ptr = (__pyx_v_y_ptr + __pyx_v_n_samples);

      /* "lightning/impl/primal_cd_fast.pyx":351
 *                 Lpp_max = max(Lpp_max, Lpp_tmp)
 *                 y_ptr += n_samples
 *                 b_ptr += n_samples             # <<<<<<<<<<<<<<
 * 
 *             # Make sure Lpp is not too small (negative) or too large.
 */
      __pyx_v_b_ptr = (__pyx_v_b_ptr + __pyx_v_n_samples);
    }

    /* "lightning/impl/primal_cd_fast.pyx":354
 * 
 *             # Make sure Lpp is not too small (negative) or too large.
 *             Lpp_max = min(max(Lpp_max, LOWER), UPPER)             # <<<<<<<<<<<<<<
 * 
 *         # User chose to run the algorithm without line search.
 */
    __pyx_t_11 = 1000000000.0;
    __pyx_t_6 = 0.01;
    __pyx_t_10 = __pyx_v_Lpp_max;
    if (((__pyx_t_6 > __pyx_t_10) != 0)) {
      __pyx_t_12 = __pyx_t_6;
    } else {
      __pyx_t_12 = __pyx_t_10;
    }
    __pyx_t_6 = __pyx_t_12;
    if (((__pyx_t_11 < __pyx_t_6) != 0)) {
      __pyx_t_12 = __pyx_t_11;
    } else {
      __pyx_t_12 = __pyx_t_6;
    }
    __pyx_v_Lpp_max = __pyx_t_12;
  }
  __pyx_L3:;

  /* "lightning/impl/primal_cd_fast.pyx":357
 * 
 *         # User chose to run the algorithm without line search.
 *         if self.max_steps == 0:             # <<<<<<<<<<<<<<
 *             if Lcst == 0:
 *                 return 0 # The corresponding column is entirely 0.
 */
  __pyx_t_7 = ((__pyx_v_self->max_steps == 0) != 0);
  if (__pyx_t_7) {

    /* "lightning/impl/primal_cd_fast.pyx":358
 *         # User chose to run the algorithm without line search.
 *         if self.max_steps == 0:
 *             if Lcst == 0:             # <<<<<<<<<<<<<<
 *                 return 0 # The corresponding column is entirely 0.
 *             Lpp_max = Lcst
 */
    __pyx_t_7 = ((__pyx_v_Lcst == 0.0) != 0);
    if (__pyx_t_7) {

      /* "lightning/impl/primal_cd_fast.pyx":359
 *         if self.max_steps == 0:
 *             if Lcst == 0:
 *                 return 0 # The corresponding column is entirely 0.             # <<<<<<<<<<<<<<
 *             Lpp_max = Lcst
 * 
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "lightning/impl/primal_cd_fast.pyx":358
 *         # User chose to run the algorithm without line search.
 *         if self.max_steps == 0:
 *             if Lcst == 0:             # <<<<<<<<<<<<<<
 *                 return 0 # The corresponding column is entirely 0.
 *             Lpp_max = Lcst
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":360
 *             if Lcst == 0:
 *                 return 0 # The corresponding column is entirely 0.
 *             Lpp_max = Lcst             # <<<<<<<<<<<<<<
 * 
 *         # Compute partial gradient norm and regularization term.
 */
    __pyx_v_Lpp_max = __pyx_v_Lcst;

    /* "lightning/impl/primal_cd_fast.pyx":357
 * 
 *         # User chose to run the algorithm without line search.
 *         if self.max_steps == 0:             # <<<<<<<<<<<<<<
 *             if Lcst == 0:
 *                 return 0 # The corresponding column is entirely 0.
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":363
 * 
 *         # Compute partial gradient norm and regularization term.
 *         g_norm = 0             # <<<<<<<<<<<<<<
 *         R_j = 0
 * 
 */
  __pyx_v_g_norm = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":364
 *         # Compute partial gradient norm and regularization term.
 *         g_norm = 0
 *         R_j = 0             # <<<<<<<<<<<<<<
 * 
 *         for k in xrange(n_vectors):
 */
  __pyx_v_R_j = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":366
 *         R_j = 0
 * 
 *         for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *             g_norm += g[k] * g[k]
 *             R_j += w[k, j] * w[k, j]
 */
  __pyx_t_8 = __pyx_v_n_vectors;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_k = __pyx_t_9;

    /* "lightning/impl/primal_cd_fast.pyx":367
 * 
 *         for k in xrange(n_vectors):
 *             g_norm += g[k] * g[k]             # <<<<<<<<<<<<<<
 *             R_j += w[k, j] * w[k, j]
 * 
 */
    __pyx_v_g_norm = (__pyx_v_g_norm + ((__pyx_v_g[__pyx_v_k]) * (__pyx_v_g[__pyx_v_k])));

    /* "lightning/impl/primal_cd_fast.pyx":368
 *         for k in xrange(n_vectors):
 *             g_norm += g[k] * g[k]
 *             R_j += w[k, j] * w[k, j]             # <<<<<<<<<<<<<<
 * 
 *         g_norm = sqrt(g_norm)
 */
    __pyx_t_13 = __pyx_v_k;
    __pyx_t_14 = __pyx_v_j;
    __pyx_t_15 = __pyx_v_k;
    __pyx_t_16 = __pyx_v_j;
    __pyx_v_R_j = (__pyx_v_R_j + ((*__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_w.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_w.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_w.diminfo[1].strides)) * (*__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_w.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_w.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_w.diminfo[1].strides))));
  }

  /* "lightning/impl/primal_cd_fast.pyx":370
 *             R_j += w[k, j] * w[k, j]
 * 
 *         g_norm = sqrt(g_norm)             # <<<<<<<<<<<<<<
 *         R_j = sqrt(R_j)
 * 
 */
  __pyx_v_g_norm = sqrt(__pyx_v_g_norm);

  /* "lightning/impl/primal_cd_fast.pyx":371
 * 
 *         g_norm = sqrt(g_norm)
 *         R_j = sqrt(R_j)             # <<<<<<<<<<<<<<
 * 
 *         # Violation and shrinking.
 */
  __pyx_v_R_j = sqrt(__pyx_v_R_j);

  /* "lightning/impl/primal_cd_fast.pyx":374
 * 
 *         # Violation and shrinking.
 *         if R_j == 0:             # <<<<<<<<<<<<<<
 *             g_norm -= alpha
 *             if g_norm > 0:
 */
  __pyx_t_7 = ((__pyx_v_R_j == 0.0) != 0);
  if (__pyx_t_7) {

    /* "lightning/impl/primal_cd_fast.pyx":375
 *         # Violation and shrinking.
 *         if R_j == 0:
 *             g_norm -= alpha             # <<<<<<<<<<<<<<
 *             if g_norm > 0:
 *                 violation[0] = g_norm
 */
    __pyx_v_g_norm = (__pyx_v_g_norm - __pyx_v_alpha);

    /* "lightning/impl/primal_cd_fast.pyx":376
 *         if R_j == 0:
 *             g_norm -= alpha
 *             if g_norm > 0:             # <<<<<<<<<<<<<<
 *                 violation[0] = g_norm
 *             elif shrinking and \
 */
    __pyx_t_7 = ((__pyx_v_g_norm > 0.0) != 0);
    if (__pyx_t_7) {

      /* "lightning/impl/primal_cd_fast.pyx":377
 *             g_norm -= alpha
 *             if g_norm > 0:
 *                 violation[0] = g_norm             # <<<<<<<<<<<<<<
 *             elif shrinking and \
 *                  g_norm + violation_old / nv <= 0:
 */
      (__pyx_v_violation[0]) = __pyx_v_g_norm;

      /* "lightning/impl/primal_cd_fast.pyx":376
 *         if R_j == 0:
 *             g_norm -= alpha
 *             if g_norm > 0:             # <<<<<<<<<<<<<<
 *                 violation[0] = g_norm
 *             elif shrinking and \
 */
      goto __pyx_L11;
    }

    /* "lightning/impl/primal_cd_fast.pyx":378
 *             if g_norm > 0:
 *                 violation[0] = g_norm
 *             elif shrinking and \             # <<<<<<<<<<<<<<
 *                  g_norm + violation_old / nv <= 0:
 *                 # Shrink!
 */
    __pyx_t_17 = (__pyx_v_shrinking != 0);
    if (__pyx_t_17) {
    } else {
      __pyx_t_7 = __pyx_t_17;
      goto __pyx_L12_bool_binop_done;
    }

    /* "lightning/impl/primal_cd_fast.pyx":379
 *                 violation[0] = g_norm
 *             elif shrinking and \
 *                  g_norm + violation_old / nv <= 0:             # <<<<<<<<<<<<<<
 *                 # Shrink!
 *                 if self.verbose >= 2:
 */
    __pyx_t_17 = (((__pyx_v_g_norm + (__pyx_v_violation_old / __pyx_v_nv)) <= 0.0) != 0);
    __pyx_t_7 = __pyx_t_17;
    __pyx_L12_bool_binop_done:;

    /* "lightning/impl/primal_cd_fast.pyx":378
 *             if g_norm > 0:
 *                 violation[0] = g_norm
 *             elif shrinking and \             # <<<<<<<<<<<<<<
 *                  g_norm + violation_old / nv <= 0:
 *                 # Shrink!
 */
    if (__pyx_t_7) {

      /* "lightning/impl/primal_cd_fast.pyx":381
 *                  g_norm + violation_old / nv <= 0:
 *                 # Shrink!
 *                 if self.verbose >= 2:             # <<<<<<<<<<<<<<
 *                     print "Shrink variable", j
 *                 return 1
 */
      __pyx_t_7 = ((__pyx_v_self->verbose >= 2) != 0);
      if (__pyx_t_7) {

        /* "lightning/impl/primal_cd_fast.pyx":382
 *                 # Shrink!
 *                 if self.verbose >= 2:
 *                     print "Shrink variable", j             # <<<<<<<<<<<<<<
 *                 return 1
 *         else:
 */
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_kp_s_Shrink_variable);
        __Pyx_GIVEREF(__pyx_kp_s_Shrink_variable);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_Shrink_variable);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
        __pyx_t_3 = 0;
        if (__Pyx_Print(0, __pyx_t_1, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "lightning/impl/primal_cd_fast.pyx":381
 *                  g_norm + violation_old / nv <= 0:
 *                 # Shrink!
 *                 if self.verbose >= 2:             # <<<<<<<<<<<<<<
 *                     print "Shrink variable", j
 *                 return 1
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":383
 *                 if self.verbose >= 2:
 *                     print "Shrink variable", j
 *                 return 1             # <<<<<<<<<<<<<<
 *         else:
 *             violation[0] = fabs(g_norm - alpha)
 */
      __pyx_r = 1;
      goto __pyx_L0;

      /* "lightning/impl/primal_cd_fast.pyx":378
 *             if g_norm > 0:
 *                 violation[0] = g_norm
 *             elif shrinking and \             # <<<<<<<<<<<<<<
 *                  g_norm + violation_old / nv <= 0:
 *                 # Shrink!
 */
    }
    __pyx_L11:;

    /* "lightning/impl/primal_cd_fast.pyx":374
 * 
 *         # Violation and shrinking.
 *         if R_j == 0:             # <<<<<<<<<<<<<<
 *             g_norm -= alpha
 *             if g_norm > 0:
 */
    goto __pyx_L10;
  }

  /* "lightning/impl/primal_cd_fast.pyx":385
 *                 return 1
 *         else:
 *             violation[0] = fabs(g_norm - alpha)             # <<<<<<<<<<<<<<
 * 
 *         # Compute vector to be projected and scaling factor.
 */
  /*else*/ {
    (__pyx_v_violation[0]) = fabs((__pyx_v_g_norm - __pyx_v_alpha));
  }
  __pyx_L10:;

  /* "lightning/impl/primal_cd_fast.pyx":388
 * 
 *         # Compute vector to be projected and scaling factor.
 *         scaling = 0             # <<<<<<<<<<<<<<
 *         for k in xrange(n_vectors):
 *             d_old[k] = 0
 */
  __pyx_v_scaling = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":389
 *         # Compute vector to be projected and scaling factor.
 *         scaling = 0
 *         for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *             d_old[k] = 0
 *             d[k] = w[k, j] - g[k] / Lpp_max
 */
  __pyx_t_8 = __pyx_v_n_vectors;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_k = __pyx_t_9;

    /* "lightning/impl/primal_cd_fast.pyx":390
 *         scaling = 0
 *         for k in xrange(n_vectors):
 *             d_old[k] = 0             # <<<<<<<<<<<<<<
 *             d[k] = w[k, j] - g[k] / Lpp_max
 *             scaling += d[k] * d[k]
 */
    (__pyx_v_d_old[__pyx_v_k]) = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":391
 *         for k in xrange(n_vectors):
 *             d_old[k] = 0
 *             d[k] = w[k, j] - g[k] / Lpp_max             # <<<<<<<<<<<<<<
 *             scaling += d[k] * d[k]
 * 
 */
    __pyx_t_18 = __pyx_v_k;
    __pyx_t_19 = __pyx_v_j;
    (__pyx_v_d[__pyx_v_k]) = ((*__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_w.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_w.diminfo[0].strides, __pyx_t_19, __pyx_pybuffernd_w.diminfo[1].strides)) - ((__pyx_v_g[__pyx_v_k]) / __pyx_v_Lpp_max));

    /* "lightning/impl/primal_cd_fast.pyx":392
 *             d_old[k] = 0
 *             d[k] = w[k, j] - g[k] / Lpp_max
 *             scaling += d[k] * d[k]             # <<<<<<<<<<<<<<
 * 
 *         scaling = 1 - alpha / (Lpp_max * sqrt(scaling))
 */
    __pyx_v_scaling = (__pyx_v_scaling + ((__pyx_v_d[__pyx_v_k]) * (__pyx_v_d[__pyx_v_k])));
  }

  /* "lightning/impl/primal_cd_fast.pyx":394
 *             scaling += d[k] * d[k]
 * 
 *         scaling = 1 - alpha / (Lpp_max * sqrt(scaling))             # <<<<<<<<<<<<<<
 * 
 *         if scaling < 0:
 */
  __pyx_v_scaling = (1.0 - (__pyx_v_alpha / (__pyx_v_Lpp_max * sqrt(__pyx_v_scaling))));

  /* "lightning/impl/primal_cd_fast.pyx":396
 *         scaling = 1 - alpha / (Lpp_max * sqrt(scaling))
 * 
 *         if scaling < 0:             # <<<<<<<<<<<<<<
 *             scaling = 0
 * 
 */
  __pyx_t_7 = ((__pyx_v_scaling < 0.0) != 0);
  if (__pyx_t_7) {

    /* "lightning/impl/primal_cd_fast.pyx":397
 * 
 *         if scaling < 0:
 *             scaling = 0             # <<<<<<<<<<<<<<
 * 
 *         # Project (proximity operator).
 */
    __pyx_v_scaling = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":396
 *         scaling = 1 - alpha / (Lpp_max * sqrt(scaling))
 * 
 *         if scaling < 0:             # <<<<<<<<<<<<<<
 *             scaling = 0
 * 
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":400
 * 
 *         # Project (proximity operator).
 *         delta = 0             # <<<<<<<<<<<<<<
 *         dmax = -DBL_MAX
 *         for k in xrange(n_vectors):
 */
  __pyx_v_delta = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":401
 *         # Project (proximity operator).
 *         delta = 0
 *         dmax = -DBL_MAX             # <<<<<<<<<<<<<<
 *         for k in xrange(n_vectors):
 *             # Difference between new and old solution.
 */
  __pyx_v_dmax = (-__pyx_v_DBL_MAX);

  /* "lightning/impl/primal_cd_fast.pyx":402
 *         delta = 0
 *         dmax = -DBL_MAX
 *         for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *             # Difference between new and old solution.
 *             d[k] = scaling * d[k] - w[k, j]
 */
  __pyx_t_8 = __pyx_v_n_vectors;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_k = __pyx_t_9;

    /* "lightning/impl/primal_cd_fast.pyx":404
 *         for k in xrange(n_vectors):
 *             # Difference between new and old solution.
 *             d[k] = scaling * d[k] - w[k, j]             # <<<<<<<<<<<<<<
 *             delta += d[k] * g[k]
 *             dmax = max(dmax, fabs(d[k]))
 */
    __pyx_t_20 = __pyx_v_k;
    __pyx_t_21 = __pyx_v_j;
    (__pyx_v_d[__pyx_v_k]) = ((__pyx_v_scaling * (__pyx_v_d[__pyx_v_k])) - (*__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_w.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_w.diminfo[0].strides, __pyx_t_21, __pyx_pybuffernd_w.diminfo[1].strides)));

    /* "lightning/impl/primal_cd_fast.pyx":405
 *             # Difference between new and old solution.
 *             d[k] = scaling * d[k] - w[k, j]
 *             delta += d[k] * g[k]             # <<<<<<<<<<<<<<
 *             dmax = max(dmax, fabs(d[k]))
 * 
 */
    __pyx_v_delta = (__pyx_v_delta + ((__pyx_v_d[__pyx_v_k]) * (__pyx_v_g[__pyx_v_k])));

    /* "lightning/impl/primal_cd_fast.pyx":406
 *             d[k] = scaling * d[k] - w[k, j]
 *             delta += d[k] * g[k]
 *             dmax = max(dmax, fabs(d[k]))             # <<<<<<<<<<<<<<
 * 
 *         # Do not bother update if update is too small.
 */
    __pyx_t_12 = fabs((__pyx_v_d[__pyx_v_k]));
    __pyx_t_11 = __pyx_v_dmax;
    if (((__pyx_t_12 > __pyx_t_11) != 0)) {
      __pyx_t_6 = __pyx_t_12;
    } else {
      __pyx_t_6 = __pyx_t_11;
    }
    __pyx_v_dmax = __pyx_t_6;
  }

  /* "lightning/impl/primal_cd_fast.pyx":409
 * 
 *         # Do not bother update if update is too small.
 *         if dmax < 1e-12:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
  __pyx_t_7 = ((__pyx_v_dmax < 1e-12) != 0);
  if (__pyx_t_7) {

    /* "lightning/impl/primal_cd_fast.pyx":410
 *         # Do not bother update if update is too small.
 *         if dmax < 1e-12:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *         # Perform line search.
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "lightning/impl/primal_cd_fast.pyx":409
 * 
 *         # Do not bother update if update is too small.
 *         if dmax < 1e-12:             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":413
 * 
 *         # Perform line search.
 *         step = 1             # <<<<<<<<<<<<<<
 *         recompute = 0
 *         while True:
 */
  __pyx_v_step = 1;

  /* "lightning/impl/primal_cd_fast.pyx":414
 *         # Perform line search.
 *         step = 1
 *         recompute = 0             # <<<<<<<<<<<<<<
 *         while True:
 * 
 */
  __pyx_v_recompute = 0;

  /* "lightning/impl/primal_cd_fast.pyx":415
 *         step = 1
 *         recompute = 0
 *         while True:             # <<<<<<<<<<<<<<
 * 
 *             # Update predictions, normalizations and objective value.
 */
  while (1) {

    /* "lightning/impl/primal_cd_fast.pyx":418
 * 
 *             # Update predictions, normalizations and objective value.
 *             if multiclass:             # <<<<<<<<<<<<<<
 *                 self.update_mc(C, n_samples, n_vectors, indices, data, n_nz,
 *                                y, b_ptr, d, d_old, Z, &L_new)
 */
    __pyx_t_7 = (__pyx_v_multiclass != 0);
    if (__pyx_t_7) {

      /* "lightning/impl/primal_cd_fast.pyx":419
 *             # Update predictions, normalizations and objective value.
 *             if multiclass:
 *                 self.update_mc(C, n_samples, n_vectors, indices, data, n_nz,             # <<<<<<<<<<<<<<
 *                                y, b_ptr, d, d_old, Z, &L_new)
 *             else: # multi-task
 */
      ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->update_mc(__pyx_v_self, __pyx_v_C, __pyx_v_n_samples, __pyx_v_n_vectors, __pyx_v_indices, __pyx_v_data, __pyx_v_n_nz, __pyx_v_y, __pyx_v_b_ptr, __pyx_v_d, __pyx_v_d_old, __pyx_v_Z, (&__pyx_v_L_new));

      /* "lightning/impl/primal_cd_fast.pyx":418
 * 
 *             # Update predictions, normalizations and objective value.
 *             if multiclass:             # <<<<<<<<<<<<<<
 *                 self.update_mc(C, n_samples, n_vectors, indices, data, n_nz,
 *                                y, b_ptr, d, d_old, Z, &L_new)
 */
      goto __pyx_L23;
    }

    /* "lightning/impl/primal_cd_fast.pyx":422
 *                                y, b_ptr, d, d_old, Z, &L_new)
 *             else: # multi-task
 *                 L_new = 0             # <<<<<<<<<<<<<<
 *                 y_ptr = <double*>Y.data
 *                 b_ptr = <double*>b.data
 */
    /*else*/ {
      __pyx_v_L_new = 0.0;

      /* "lightning/impl/primal_cd_fast.pyx":423
 *             else: # multi-task
 *                 L_new = 0
 *                 y_ptr = <double*>Y.data             # <<<<<<<<<<<<<<
 *                 b_ptr = <double*>b.data
 * 
 */
      __pyx_v_y_ptr = ((double *)__pyx_v_Y->data);

      /* "lightning/impl/primal_cd_fast.pyx":424
 *                 L_new = 0
 *                 y_ptr = <double*>Y.data
 *                 b_ptr = <double*>b.data             # <<<<<<<<<<<<<<
 * 
 *                 for k in xrange(n_vectors):
 */
      __pyx_v_b_ptr = ((double *)__pyx_v_b->data);

      /* "lightning/impl/primal_cd_fast.pyx":426
 *                 b_ptr = <double*>b.data
 * 
 *                 for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                     z_diff = d_old[k] - d[k]
 *                     self.update(j, z_diff, C, indices, data, n_nz,
 */
      __pyx_t_8 = __pyx_v_n_vectors;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "lightning/impl/primal_cd_fast.pyx":427
 * 
 *                 for k in xrange(n_vectors):
 *                     z_diff = d_old[k] - d[k]             # <<<<<<<<<<<<<<
 *                     self.update(j, z_diff, C, indices, data, n_nz,
 *                                 y_ptr, b_ptr, &L_tmp)
 */
        __pyx_v_z_diff = ((__pyx_v_d_old[__pyx_v_k]) - (__pyx_v_d[__pyx_v_k]));

        /* "lightning/impl/primal_cd_fast.pyx":428
 *                 for k in xrange(n_vectors):
 *                     z_diff = d_old[k] - d[k]
 *                     self.update(j, z_diff, C, indices, data, n_nz,             # <<<<<<<<<<<<<<
 *                                 y_ptr, b_ptr, &L_tmp)
 *                     L_new += L_tmp
 */
        ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->update(__pyx_v_self, __pyx_v_j, __pyx_v_z_diff, __pyx_v_C, __pyx_v_indices, __pyx_v_data, __pyx_v_n_nz, __pyx_v_y_ptr, __pyx_v_b_ptr, (&__pyx_v_L_tmp));

        /* "lightning/impl/primal_cd_fast.pyx":430
 *                     self.update(j, z_diff, C, indices, data, n_nz,
 *                                 y_ptr, b_ptr, &L_tmp)
 *                     L_new += L_tmp             # <<<<<<<<<<<<<<
 *                     y_ptr += n_samples
 *                     b_ptr += n_samples
 */
        __pyx_v_L_new = (__pyx_v_L_new + __pyx_v_L_tmp);

        /* "lightning/impl/primal_cd_fast.pyx":431
 *                                 y_ptr, b_ptr, &L_tmp)
 *                     L_new += L_tmp
 *                     y_ptr += n_samples             # <<<<<<<<<<<<<<
 *                     b_ptr += n_samples
 * 
 */
        __pyx_v_y_ptr = (__pyx_v_y_ptr + __pyx_v_n_samples);

        /* "lightning/impl/primal_cd_fast.pyx":432
 *                     L_new += L_tmp
 *                     y_ptr += n_samples
 *                     b_ptr += n_samples             # <<<<<<<<<<<<<<
 * 
 *             if step >= self.max_steps:
 */
        __pyx_v_b_ptr = (__pyx_v_b_ptr + __pyx_v_n_samples);
      }
    }
    __pyx_L23:;

    /* "lightning/impl/primal_cd_fast.pyx":434
 *                     b_ptr += n_samples
 * 
 *             if step >= self.max_steps:             # <<<<<<<<<<<<<<
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:
 */
    __pyx_t_7 = ((__pyx_v_step >= __pyx_v_self->max_steps) != 0);
    if (__pyx_t_7) {

      /* "lightning/impl/primal_cd_fast.pyx":435
 * 
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:             # <<<<<<<<<<<<<<
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."
 */
      __pyx_t_7 = ((__pyx_v_self->max_steps > 1) != 0);
      if (__pyx_t_7) {

        /* "lightning/impl/primal_cd_fast.pyx":436
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:             # <<<<<<<<<<<<<<
 *                         print "Max steps reached during line search..."
 *                     recompute = 1
 */
        __pyx_t_7 = ((__pyx_v_self->verbose >= 2) != 0);
        if (__pyx_t_7) {

          /* "lightning/impl/primal_cd_fast.pyx":437
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."             # <<<<<<<<<<<<<<
 *                     recompute = 1
 *                 break
 */
          if (__Pyx_PrintOne(0, __pyx_kp_s_Max_steps_reached_during_line_se) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

          /* "lightning/impl/primal_cd_fast.pyx":436
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:             # <<<<<<<<<<<<<<
 *                         print "Max steps reached during line search..."
 *                     recompute = 1
 */
        }

        /* "lightning/impl/primal_cd_fast.pyx":438
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."
 *                     recompute = 1             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_v_recompute = 1;

        /* "lightning/impl/primal_cd_fast.pyx":435
 * 
 *             if step >= self.max_steps:
 *                 if self.max_steps > 1:             # <<<<<<<<<<<<<<
 *                     if self.verbose >= 2:
 *                         print "Max steps reached during line search..."
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":439
 *                         print "Max steps reached during line search..."
 *                     recompute = 1
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             # Compute regularization term.
 */
      goto __pyx_L22_break;

      /* "lightning/impl/primal_cd_fast.pyx":434
 *                     b_ptr += n_samples
 * 
 *             if step >= self.max_steps:             # <<<<<<<<<<<<<<
 *                 if self.max_steps > 1:
 *                     if self.verbose >= 2:
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":442
 * 
 *             # Compute regularization term.
 *             R_j_new = 0             # <<<<<<<<<<<<<<
 *             for k in xrange(n_vectors):
 *                 tmp = w[k, j] + d[k]
 */
    __pyx_v_R_j_new = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":443
 *             # Compute regularization term.
 *             R_j_new = 0
 *             for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                 tmp = w[k, j] + d[k]
 *                 R_j_new += tmp * tmp
 */
    __pyx_t_8 = __pyx_v_n_vectors;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_k = __pyx_t_9;

      /* "lightning/impl/primal_cd_fast.pyx":444
 *             R_j_new = 0
 *             for k in xrange(n_vectors):
 *                 tmp = w[k, j] + d[k]             # <<<<<<<<<<<<<<
 *                 R_j_new += tmp * tmp
 *             R_j_new = sqrt(R_j_new)
 */
      __pyx_t_22 = __pyx_v_k;
      __pyx_t_23 = __pyx_v_j;
      __pyx_v_tmp = ((*__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_w.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_w.diminfo[0].strides, __pyx_t_23, __pyx_pybuffernd_w.diminfo[1].strides)) + (__pyx_v_d[__pyx_v_k]));

      /* "lightning/impl/primal_cd_fast.pyx":445
 *             for k in xrange(n_vectors):
 *                 tmp = w[k, j] + d[k]
 *                 R_j_new += tmp * tmp             # <<<<<<<<<<<<<<
 *             R_j_new = sqrt(R_j_new)
 *             # R_new = R - R_j + R_j_new
 */
      __pyx_v_R_j_new = (__pyx_v_R_j_new + (__pyx_v_tmp * __pyx_v_tmp));
    }

    /* "lightning/impl/primal_cd_fast.pyx":446
 *                 tmp = w[k, j] + d[k]
 *                 R_j_new += tmp * tmp
 *             R_j_new = sqrt(R_j_new)             # <<<<<<<<<<<<<<
 *             # R_new = R - R_j + R_j_new
 * 
 */
    __pyx_v_R_j_new = sqrt(__pyx_v_R_j_new);

    /* "lightning/impl/primal_cd_fast.pyx":449
 *             # R_new = R - R_j + R_j_new
 * 
 *             if step == 1:             # <<<<<<<<<<<<<<
 *                 delta += alpha * (R_j_new - R_j)
 *                 delta *= self.sigma
 */
    __pyx_t_7 = ((__pyx_v_step == 1) != 0);
    if (__pyx_t_7) {

      /* "lightning/impl/primal_cd_fast.pyx":450
 * 
 *             if step == 1:
 *                 delta += alpha * (R_j_new - R_j)             # <<<<<<<<<<<<<<
 *                 delta *= self.sigma
 * 
 */
      __pyx_v_delta = (__pyx_v_delta + (__pyx_v_alpha * (__pyx_v_R_j_new - __pyx_v_R_j)));

      /* "lightning/impl/primal_cd_fast.pyx":451
 *             if step == 1:
 *                 delta += alpha * (R_j_new - R_j)
 *                 delta *= self.sigma             # <<<<<<<<<<<<<<
 * 
 *             # Check decrease condition
 */
      __pyx_v_delta = (__pyx_v_delta * __pyx_v_self->sigma);

      /* "lightning/impl/primal_cd_fast.pyx":449
 *             # R_new = R - R_j + R_j_new
 * 
 *             if step == 1:             # <<<<<<<<<<<<<<
 *                 delta += alpha * (R_j_new - R_j)
 *                 delta *= self.sigma
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":454
 * 
 *             # Check decrease condition
 *             if L_new - L + alpha * (R_j_new - R_j) <= delta:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_7 = ((((__pyx_v_L_new - __pyx_v_L) + (__pyx_v_alpha * (__pyx_v_R_j_new - __pyx_v_R_j))) <= __pyx_v_delta) != 0);
    if (__pyx_t_7) {

      /* "lightning/impl/primal_cd_fast.pyx":455
 *             # Check decrease condition
 *             if L_new - L + alpha * (R_j_new - R_j) <= delta:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             delta *= self.beta
 */
      goto __pyx_L22_break;

      /* "lightning/impl/primal_cd_fast.pyx":454
 * 
 *             # Check decrease condition
 *             if L_new - L + alpha * (R_j_new - R_j) <= delta:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":457
 *                 break
 * 
 *             delta *= self.beta             # <<<<<<<<<<<<<<
 *             for k in xrange(n_vectors):
 *                 d_old[k] = d[k]
 */
    __pyx_v_delta = (__pyx_v_delta * __pyx_v_self->beta);

    /* "lightning/impl/primal_cd_fast.pyx":458
 * 
 *             delta *= self.beta
 *             for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                 d_old[k] = d[k]
 *                 d[k] *= self.beta
 */
    __pyx_t_8 = __pyx_v_n_vectors;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_k = __pyx_t_9;

      /* "lightning/impl/primal_cd_fast.pyx":459
 *             delta *= self.beta
 *             for k in xrange(n_vectors):
 *                 d_old[k] = d[k]             # <<<<<<<<<<<<<<
 *                 d[k] *= self.beta
 *             step += 1
 */
      (__pyx_v_d_old[__pyx_v_k]) = (__pyx_v_d[__pyx_v_k]);

      /* "lightning/impl/primal_cd_fast.pyx":460
 *             for k in xrange(n_vectors):
 *                 d_old[k] = d[k]
 *                 d[k] *= self.beta             # <<<<<<<<<<<<<<
 *             step += 1
 * 
 */
      __pyx_t_24 = __pyx_v_k;
      (__pyx_v_d[__pyx_t_24]) = ((__pyx_v_d[__pyx_t_24]) * __pyx_v_self->beta);
    }

    /* "lightning/impl/primal_cd_fast.pyx":461
 *                 d_old[k] = d[k]
 *                 d[k] *= self.beta
 *             step += 1             # <<<<<<<<<<<<<<
 * 
 *         # Update solution
 */
    __pyx_v_step = (__pyx_v_step + 1);
  }
  __pyx_L22_break:;

  /* "lightning/impl/primal_cd_fast.pyx":464
 * 
 *         # Update solution
 *         for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *             w[k, j] += d[k]
 * 
 */
  __pyx_t_8 = __pyx_v_n_vectors;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_k = __pyx_t_9;

    /* "lightning/impl/primal_cd_fast.pyx":465
 *         # Update solution
 *         for k in xrange(n_vectors):
 *             w[k, j] += d[k]             # <<<<<<<<<<<<<<
 * 
 *         # Recompute errors if necessary.
 */
    __pyx_t_25 = __pyx_v_k;
    __pyx_t_26 = __pyx_v_j;
    *__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_w.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_w.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_w.diminfo[1].strides) += (__pyx_v_d[__pyx_v_k]);
  }

  /* "lightning/impl/primal_cd_fast.pyx":468
 * 
 *         # Recompute errors if necessary.
 *         if recompute:             # <<<<<<<<<<<<<<
 *             if multiclass:
 *                 self.recompute_mc(n_vectors, X, y, w, b)
 */
  __pyx_t_7 = (__pyx_v_recompute != 0);
  if (__pyx_t_7) {

    /* "lightning/impl/primal_cd_fast.pyx":469
 *         # Recompute errors if necessary.
 *         if recompute:
 *             if multiclass:             # <<<<<<<<<<<<<<
 *                 self.recompute_mc(n_vectors, X, y, w, b)
 *             else: # multi-task
 */
    __pyx_t_7 = (__pyx_v_multiclass != 0);
    if (__pyx_t_7) {

      /* "lightning/impl/primal_cd_fast.pyx":470
 *         if recompute:
 *             if multiclass:
 *                 self.recompute_mc(n_vectors, X, y, w, b)             # <<<<<<<<<<<<<<
 *             else: # multi-task
 *                 y_ptr = <double*>Y.data
 */
      ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->recompute_mc(__pyx_v_self, __pyx_v_n_vectors, __pyx_v_X, __pyx_v_y, ((PyArrayObject *)__pyx_v_w), ((PyArrayObject *)__pyx_v_b));

      /* "lightning/impl/primal_cd_fast.pyx":469
 *         # Recompute errors if necessary.
 *         if recompute:
 *             if multiclass:             # <<<<<<<<<<<<<<
 *                 self.recompute_mc(n_vectors, X, y, w, b)
 *             else: # multi-task
 */
      goto __pyx_L38;
    }

    /* "lightning/impl/primal_cd_fast.pyx":472
 *                 self.recompute_mc(n_vectors, X, y, w, b)
 *             else: # multi-task
 *                 y_ptr = <double*>Y.data             # <<<<<<<<<<<<<<
 *                 b_ptr = <double*>b.data
 *                 w_ptr = <double*>w.data
 */
    /*else*/ {
      __pyx_v_y_ptr = ((double *)__pyx_v_Y->data);

      /* "lightning/impl/primal_cd_fast.pyx":473
 *             else: # multi-task
 *                 y_ptr = <double*>Y.data
 *                 b_ptr = <double*>b.data             # <<<<<<<<<<<<<<
 *                 w_ptr = <double*>w.data
 * 
 */
      __pyx_v_b_ptr = ((double *)__pyx_v_b->data);

      /* "lightning/impl/primal_cd_fast.pyx":474
 *                 y_ptr = <double*>Y.data
 *                 b_ptr = <double*>b.data
 *                 w_ptr = <double*>w.data             # <<<<<<<<<<<<<<
 * 
 *                 for k in xrange(n_vectors):
 */
      __pyx_v_w_ptr = ((double *)__pyx_v_w->data);

      /* "lightning/impl/primal_cd_fast.pyx":476
 *                 w_ptr = <double*>w.data
 * 
 *                 for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                     self.recompute(X, y_ptr, w_ptr, b_ptr)
 *                     y_ptr += n_samples
 */
      __pyx_t_8 = __pyx_v_n_vectors;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "lightning/impl/primal_cd_fast.pyx":477
 * 
 *                 for k in xrange(n_vectors):
 *                     self.recompute(X, y_ptr, w_ptr, b_ptr)             # <<<<<<<<<<<<<<
 *                     y_ptr += n_samples
 *                     b_ptr += n_samples
 */
        ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self->__pyx_vtab)->recompute(__pyx_v_self, __pyx_v_X, __pyx_v_y_ptr, __pyx_v_w_ptr, __pyx_v_b_ptr);

        /* "lightning/impl/primal_cd_fast.pyx":478
 *                 for k in xrange(n_vectors):
 *                     self.recompute(X, y_ptr, w_ptr, b_ptr)
 *                     y_ptr += n_samples             # <<<<<<<<<<<<<<
 *                     b_ptr += n_samples
 *                     w_ptr += n_features
 */
        __pyx_v_y_ptr = (__pyx_v_y_ptr + __pyx_v_n_samples);

        /* "lightning/impl/primal_cd_fast.pyx":479
 *                     self.recompute(X, y_ptr, w_ptr, b_ptr)
 *                     y_ptr += n_samples
 *                     b_ptr += n_samples             # <<<<<<<<<<<<<<
 *                     w_ptr += n_features
 * 
 */
        __pyx_v_b_ptr = (__pyx_v_b_ptr + __pyx_v_n_samples);

        /* "lightning/impl/primal_cd_fast.pyx":480
 *                     y_ptr += n_samples
 *                     b_ptr += n_samples
 *                     w_ptr += n_features             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
        __pyx_v_w_ptr = (__pyx_v_w_ptr + __pyx_v_n_features);
      }
    }
    __pyx_L38:;

    /* "lightning/impl/primal_cd_fast.pyx":468
 * 
 *         # Recompute errors if necessary.
 *         if recompute:             # <<<<<<<<<<<<<<
 *             if multiclass:
 *                 self.recompute_mc(n_vectors, X, y, w, b)
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":482
 *                     w_ptr += n_features
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef void derivatives_mc(self,
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "lightning/impl/primal_cd_fast.pyx":292
 *     # L1/L2 regularization
 * 
 *     cdef int solve_l1l2(self,             # <<<<<<<<<<<<<<
 *                         int j,
 *                         double C,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Y.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_b.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_w.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.LossFunction.solve_l1l2", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Y.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_b.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_w.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lightning/impl/primal_cd_fast.pyx":484
 *         return 0
 * 
 *     cdef void derivatives_mc(self,             # <<<<<<<<<<<<<<
 *                              int j,
 *                              double C,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_derivatives_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED int __pyx_v_n_samples, CYTHON_UNUSED int __pyx_v_n_vectors, CYTHON_UNUSED int *__pyx_v_indices, CYTHON_UNUSED double *__pyx_v_data, CYTHON_UNUSED int __pyx_v_n_nz, CYTHON_UNUSED int *__pyx_v_y, CYTHON_UNUSED double *__pyx_v_b, CYTHON_UNUSED double *__pyx_v_g, CYTHON_UNUSED double *__pyx_v_Z, CYTHON_UNUSED double *__pyx_v_L, CYTHON_UNUSED double *__pyx_v_Lpp_max) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("derivatives_mc", 0);

  /* "lightning/impl/primal_cd_fast.pyx":498
 *                              double* L,
 *                              double* Lpp_max):
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 *     cdef void update_mc(self,
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "lightning/impl/primal_cd_fast.pyx":484
 *         return 0
 * 
 *     cdef void derivatives_mc(self,             # <<<<<<<<<<<<<<
 *                              int j,
 *                              double C,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.LossFunction.derivatives_mc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":500
 *         raise NotImplementedError()
 * 
 *     cdef void update_mc(self,             # <<<<<<<<<<<<<<
 *                         double C,
 *                         int n_samples,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_update_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED int __pyx_v_n_samples, CYTHON_UNUSED int __pyx_v_n_vectors, CYTHON_UNUSED int *__pyx_v_indices, CYTHON_UNUSED double *__pyx_v_data, CYTHON_UNUSED int __pyx_v_n_nz, CYTHON_UNUSED int *__pyx_v_y, CYTHON_UNUSED double *__pyx_v_b, CYTHON_UNUSED double *__pyx_v_d, CYTHON_UNUSED double *__pyx_v_d_old, CYTHON_UNUSED double *__pyx_v_Z, CYTHON_UNUSED double *__pyx_v_L_new) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_mc", 0);

  /* "lightning/impl/primal_cd_fast.pyx":513
 *                         double* Z,
 *                         double* L_new):
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 *     cdef void recompute_mc(self,
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "lightning/impl/primal_cd_fast.pyx":500
 *         raise NotImplementedError()
 * 
 *     cdef void update_mc(self,             # <<<<<<<<<<<<<<
 *                         double C,
 *                         int n_samples,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.LossFunction.update_mc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":515
 *         raise NotImplementedError()
 * 
 *     cdef void recompute_mc(self,             # <<<<<<<<<<<<<<
 *                            int n_vectors,
 *                            ColumnDataset X,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_recompute_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_n_vectors, CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, CYTHON_UNUSED int *__pyx_v_y, CYTHON_UNUSED PyArrayObject *__pyx_v_w, CYTHON_UNUSED PyArrayObject *__pyx_v_b) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_b;
  __Pyx_Buffer __pyx_pybuffer_b;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_w;
  __Pyx_Buffer __pyx_pybuffer_w;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("recompute_mc", 0);
  __pyx_pybuffer_w.pybuffer.buf = NULL;
  __pyx_pybuffer_w.refcount = 0;
  __pyx_pybuffernd_w.data = NULL;
  __pyx_pybuffernd_w.rcbuffer = &__pyx_pybuffer_w;
  __pyx_pybuffer_b.pybuffer.buf = NULL;
  __pyx_pybuffer_b.refcount = 0;
  __pyx_pybuffernd_b.data = NULL;
  __pyx_pybuffernd_b.rcbuffer = &__pyx_pybuffer_b;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_w.rcbuffer->pybuffer, (PyObject*)__pyx_v_w, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_w.diminfo[0].strides = __pyx_pybuffernd_w.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_w.diminfo[0].shape = __pyx_pybuffernd_w.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_w.diminfo[1].strides = __pyx_pybuffernd_w.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_w.diminfo[1].shape = __pyx_pybuffernd_w.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_b.rcbuffer->pybuffer, (PyObject*)__pyx_v_b, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_b.diminfo[0].strides = __pyx_pybuffernd_b.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_b.diminfo[0].shape = __pyx_pybuffernd_b.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_b.diminfo[1].strides = __pyx_pybuffernd_b.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_b.diminfo[1].shape = __pyx_pybuffernd_b.rcbuffer->pybuffer.shape[1];

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.LossFunction.recompute_mc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":523
 *         pass
 * 
 *     cdef void lipschitz_constant_mt(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_lipschitz_constant_mt(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_n_vectors, CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED double *__pyx_v_out) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lipschitz_constant_mt", 0);

  /* "lightning/impl/primal_cd_fast.pyx":528
 *                                     double C,
 *                                     double* out):
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 *     cdef void lipschitz_constant_mc(self,
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "lightning/impl/primal_cd_fast.pyx":523
 *         pass
 * 
 *     cdef void lipschitz_constant_mt(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.LossFunction.lipschitz_constant_mt", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":530
 *         raise NotImplementedError()
 * 
 *     cdef void lipschitz_constant_mc(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_lipschitz_constant_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_self, CYTHON_UNUSED int __pyx_v_n_vectors, CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, CYTHON_UNUSED double __pyx_v_C, CYTHON_UNUSED double *__pyx_v_out) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lipschitz_constant_mc", 0);

  /* "lightning/impl/primal_cd_fast.pyx":535
 *                                     double C,
 *                                     double* out):
 *         raise NotImplementedError()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplementedError); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "lightning/impl/primal_cd_fast.pyx":530
 *         raise NotImplementedError()
 * 
 *     cdef void lipschitz_constant_mc(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.LossFunction.lipschitz_constant_mc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":540
 * cdef class Squared(LossFunction):
 * 
 *     def __init__(self, verbose=0):             # <<<<<<<<<<<<<<
 *         # Squared loss enjoys closed form solution.
 *         # Therefore a single step is enough (no line search needed).
 */

/* Python wrapper */
static int __pyx_pw_9lightning_4impl_14primal_cd_fast_7Squared_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9lightning_4impl_14primal_cd_fast_7Squared_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_verbose = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_verbose,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_verbose = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lightning.impl.primal_cd_fast.Squared.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9lightning_4impl_14primal_cd_fast_7Squared___init__(((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared *)__pyx_v_self), __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9lightning_4impl_14primal_cd_fast_7Squared___init__(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared *__pyx_v_self, PyObject *__pyx_v_verbose) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "lightning/impl/primal_cd_fast.pyx":543
 *         # Squared loss enjoys closed form solution.
 *         # Therefore a single step is enough (no line search needed).
 *         self.max_steps = 1             # <<<<<<<<<<<<<<
 *         self.beta = 0.5
 *         self.sigma = 0.01
 */
  __pyx_v_self->__pyx_base.max_steps = 1;

  /* "lightning/impl/primal_cd_fast.pyx":544
 *         # Therefore a single step is enough (no line search needed).
 *         self.max_steps = 1
 *         self.beta = 0.5             # <<<<<<<<<<<<<<
 *         self.sigma = 0.01
 *         self.verbose = verbose
 */
  __pyx_v_self->__pyx_base.beta = 0.5;

  /* "lightning/impl/primal_cd_fast.pyx":545
 *         self.max_steps = 1
 *         self.beta = 0.5
 *         self.sigma = 0.01             # <<<<<<<<<<<<<<
 *         self.verbose = verbose
 * 
 */
  __pyx_v_self->__pyx_base.sigma = 0.01;

  /* "lightning/impl/primal_cd_fast.pyx":546
 *         self.beta = 0.5
 *         self.sigma = 0.01
 *         self.verbose = verbose             # <<<<<<<<<<<<<<
 * 
 *     cdef void derivatives(self,
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_verbose); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 546; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->__pyx_base.verbose = __pyx_t_1;

  /* "lightning/impl/primal_cd_fast.pyx":540
 * cdef class Squared(LossFunction):
 * 
 *     def __init__(self, verbose=0):             # <<<<<<<<<<<<<<
 *         # Squared loss enjoys closed form solution.
 *         # Therefore a single step is enough (no line search needed).
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("lightning.impl.primal_cd_fast.Squared.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lightning/impl/primal_cd_fast.pyx":548
 *         self.verbose = verbose
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_7Squared_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, CYTHON_UNUSED double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_Lp, double *__pyx_v_Lpp, double *__pyx_v_L) {
  int __pyx_v_ii;
  int __pyx_v_i;
  double __pyx_v_tmp;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  __Pyx_RefNannySetupContext("derivatives", 0);

  /* "lightning/impl/primal_cd_fast.pyx":563
 * 
 *         # First-derivative
 *         Lp[0] = 0             # <<<<<<<<<<<<<<
 *         # Second derivative
 *         Lpp[0] = 0
 */
  (__pyx_v_Lp[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":565
 *         Lp[0] = 0
 *         # Second derivative
 *         Lpp[0] = 0             # <<<<<<<<<<<<<<
 *         # Objective value
 *         L[0] = 0
 */
  (__pyx_v_Lpp[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":567
 *         Lpp[0] = 0
 *         # Objective value
 *         L[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":569
 *         L[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             tmp = data[ii] * C
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":570
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             tmp = data[ii] * C
 *             Lpp[0] += data[ii] * tmp
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":571
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             tmp = data[ii] * C             # <<<<<<<<<<<<<<
 *             Lpp[0] += data[ii] * tmp
 *             Lp[0] += b[i] * tmp
 */
    __pyx_v_tmp = ((__pyx_v_data[__pyx_v_ii]) * __pyx_v_C);

    /* "lightning/impl/primal_cd_fast.pyx":572
 *             i = indices[ii]
 *             tmp = data[ii] * C
 *             Lpp[0] += data[ii] * tmp             # <<<<<<<<<<<<<<
 *             Lp[0] += b[i] * tmp
 *             L[0] += C * b[i] * b[i]
 */
    __pyx_t_3 = 0;
    (__pyx_v_Lpp[__pyx_t_3]) = ((__pyx_v_Lpp[__pyx_t_3]) + ((__pyx_v_data[__pyx_v_ii]) * __pyx_v_tmp));

    /* "lightning/impl/primal_cd_fast.pyx":573
 *             tmp = data[ii] * C
 *             Lpp[0] += data[ii] * tmp
 *             Lp[0] += b[i] * tmp             # <<<<<<<<<<<<<<
 *             L[0] += C * b[i] * b[i]
 * 
 */
    __pyx_t_3 = 0;
    (__pyx_v_Lp[__pyx_t_3]) = ((__pyx_v_Lp[__pyx_t_3]) + ((__pyx_v_b[__pyx_v_i]) * __pyx_v_tmp));

    /* "lightning/impl/primal_cd_fast.pyx":574
 *             Lpp[0] += data[ii] * tmp
 *             Lp[0] += b[i] * tmp
 *             L[0] += C * b[i] * b[i]             # <<<<<<<<<<<<<<
 * 
 *         Lpp[0] *= 2
 */
    __pyx_t_3 = 0;
    (__pyx_v_L[__pyx_t_3]) = ((__pyx_v_L[__pyx_t_3]) + ((__pyx_v_C * (__pyx_v_b[__pyx_v_i])) * (__pyx_v_b[__pyx_v_i])));
  }

  /* "lightning/impl/primal_cd_fast.pyx":576
 *             L[0] += C * b[i] * b[i]
 * 
 *         Lpp[0] *= 2             # <<<<<<<<<<<<<<
 *         Lp[0] *= 2
 * 
 */
  __pyx_t_3 = 0;
  (__pyx_v_Lpp[__pyx_t_3]) = ((__pyx_v_Lpp[__pyx_t_3]) * 2.0);

  /* "lightning/impl/primal_cd_fast.pyx":577
 * 
 *         Lpp[0] *= 2
 *         Lp[0] *= 2             # <<<<<<<<<<<<<<
 * 
 *     cdef void update(self,
 */
  __pyx_t_3 = 0;
  (__pyx_v_Lp[__pyx_t_3]) = ((__pyx_v_Lp[__pyx_t_3]) * 2.0);

  /* "lightning/impl/primal_cd_fast.pyx":548
 *         self.verbose = verbose
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":579
 *         Lp[0] *= 2
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_7Squared_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_z_diff, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, CYTHON_UNUSED double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_L_new) {
  int __pyx_v_ii;
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  __Pyx_RefNannySetupContext("update", 0);

  /* "lightning/impl/primal_cd_fast.pyx":592
 * 
 *         # New objective value
 *         L_new[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L_new[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":594
 *         L_new[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             # Update residuals.
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":595
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             # Update residuals.
 *             b[i] -= z_diff * data[ii]
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":597
 *             i = indices[ii]
 *             # Update residuals.
 *             b[i] -= z_diff * data[ii]             # <<<<<<<<<<<<<<
 *             L_new[0] += C * b[i] * b[i]
 * 
 */
    __pyx_t_3 = __pyx_v_i;
    (__pyx_v_b[__pyx_t_3]) = ((__pyx_v_b[__pyx_t_3]) - (__pyx_v_z_diff * (__pyx_v_data[__pyx_v_ii])));

    /* "lightning/impl/primal_cd_fast.pyx":598
 *             # Update residuals.
 *             b[i] -= z_diff * data[ii]
 *             L_new[0] += C * b[i] * b[i]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = 0;
    (__pyx_v_L_new[__pyx_t_4]) = ((__pyx_v_L_new[__pyx_t_4]) + ((__pyx_v_C * (__pyx_v_b[__pyx_v_i])) * (__pyx_v_b[__pyx_v_i])));
  }

  /* "lightning/impl/primal_cd_fast.pyx":579
 *         Lp[0] *= 2
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":603
 * cdef class SquaredHinge(LossFunction):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  int max_steps=20,
 *                  double sigma=0.01,
 */

/* Python wrapper */
static int __pyx_pw_9lightning_4impl_14primal_cd_fast_12SquaredHinge_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9lightning_4impl_14primal_cd_fast_12SquaredHinge_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_max_steps;
  double __pyx_v_sigma;
  double __pyx_v_beta;
  int __pyx_v_verbose;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_steps,&__pyx_n_s_sigma,&__pyx_n_s_beta,&__pyx_n_s_verbose,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_steps);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beta);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_max_steps = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_max_steps == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_max_steps = ((int)20);
    }
    if (values[1]) {
      __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sigma = ((double)0.01);
    }
    if (values[2]) {
      __pyx_v_beta = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_beta == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_beta = ((double)0.5);
    }
    if (values[3]) {
      __pyx_v_verbose = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_verbose == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_verbose = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lightning.impl.primal_cd_fast.SquaredHinge.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9lightning_4impl_14primal_cd_fast_12SquaredHinge___init__(((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *)__pyx_v_self), __pyx_v_max_steps, __pyx_v_sigma, __pyx_v_beta, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9lightning_4impl_14primal_cd_fast_12SquaredHinge___init__(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, int __pyx_v_max_steps, double __pyx_v_sigma, double __pyx_v_beta, int __pyx_v_verbose) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "lightning/impl/primal_cd_fast.pyx":608
 *                  double beta=0.5,
 *                  int verbose=0):
 *         self.max_steps = max_steps             # <<<<<<<<<<<<<<
 *         self.sigma = sigma
 *         self.beta = beta
 */
  __pyx_v_self->__pyx_base.max_steps = __pyx_v_max_steps;

  /* "lightning/impl/primal_cd_fast.pyx":609
 *                  int verbose=0):
 *         self.max_steps = max_steps
 *         self.sigma = sigma             # <<<<<<<<<<<<<<
 *         self.beta = beta
 *         self.verbose = verbose
 */
  __pyx_v_self->__pyx_base.sigma = __pyx_v_sigma;

  /* "lightning/impl/primal_cd_fast.pyx":610
 *         self.max_steps = max_steps
 *         self.sigma = sigma
 *         self.beta = beta             # <<<<<<<<<<<<<<
 *         self.verbose = verbose
 * 
 */
  __pyx_v_self->__pyx_base.beta = __pyx_v_beta;

  /* "lightning/impl/primal_cd_fast.pyx":611
 *         self.sigma = sigma
 *         self.beta = beta
 *         self.verbose = verbose             # <<<<<<<<<<<<<<
 * 
 *     # Binary
 */
  __pyx_v_self->__pyx_base.verbose = __pyx_v_verbose;

  /* "lightning/impl/primal_cd_fast.pyx":603
 * cdef class SquaredHinge(LossFunction):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  int max_steps=20,
 *                  double sigma=0.01,
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lightning/impl/primal_cd_fast.pyx":615
 *     # Binary
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_Lp, double *__pyx_v_Lpp, double *__pyx_v_L) {
  int __pyx_v_i;
  int __pyx_v_ii;
  double __pyx_v_val;
  double __pyx_v_tmp;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  __Pyx_RefNannySetupContext("derivatives", 0);

  /* "lightning/impl/primal_cd_fast.pyx":630
 * 
 *         # First derivative
 *         Lp[0] = 0             # <<<<<<<<<<<<<<
 *         # Second derivative
 *         Lpp[0] = 0
 */
  (__pyx_v_Lp[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":632
 *         Lp[0] = 0
 *         # Second derivative
 *         Lpp[0] = 0             # <<<<<<<<<<<<<<
 *         # Objective value
 *         L[0] = 0
 */
  (__pyx_v_Lpp[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":634
 *         Lpp[0] = 0
 *         # Objective value
 *         L[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":636
 *         L[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             val = data[ii] * y[i]
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":637
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             val = data[ii] * y[i]
 * 
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":638
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             val = data[ii] * y[i]             # <<<<<<<<<<<<<<
 * 
 *             if b[i] > 0:
 */
    __pyx_v_val = ((__pyx_v_data[__pyx_v_ii]) * (__pyx_v_y[__pyx_v_i]));

    /* "lightning/impl/primal_cd_fast.pyx":640
 *             val = data[ii] * y[i]
 * 
 *             if b[i] > 0:             # <<<<<<<<<<<<<<
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp
 */
    __pyx_t_3 = (((__pyx_v_b[__pyx_v_i]) > 0.0) != 0);
    if (__pyx_t_3) {

      /* "lightning/impl/primal_cd_fast.pyx":641
 * 
 *             if b[i] > 0:
 *                 tmp = val * C             # <<<<<<<<<<<<<<
 *                 Lp[0] -= b[i] * tmp
 *                 Lpp[0] += val * tmp
 */
      __pyx_v_tmp = (__pyx_v_val * __pyx_v_C);

      /* "lightning/impl/primal_cd_fast.pyx":642
 *             if b[i] > 0:
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp             # <<<<<<<<<<<<<<
 *                 Lpp[0] += val * tmp
 *                 L[0] += C * b[i] * b[i]
 */
      __pyx_t_4 = 0;
      (__pyx_v_Lp[__pyx_t_4]) = ((__pyx_v_Lp[__pyx_t_4]) - ((__pyx_v_b[__pyx_v_i]) * __pyx_v_tmp));

      /* "lightning/impl/primal_cd_fast.pyx":643
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp
 *                 Lpp[0] += val * tmp             # <<<<<<<<<<<<<<
 *                 L[0] += C * b[i] * b[i]
 * 
 */
      __pyx_t_4 = 0;
      (__pyx_v_Lpp[__pyx_t_4]) = ((__pyx_v_Lpp[__pyx_t_4]) + (__pyx_v_val * __pyx_v_tmp));

      /* "lightning/impl/primal_cd_fast.pyx":644
 *                 Lp[0] -= b[i] * tmp
 *                 Lpp[0] += val * tmp
 *                 L[0] += C * b[i] * b[i]             # <<<<<<<<<<<<<<
 * 
 *         Lp[0] *= 2
 */
      __pyx_t_4 = 0;
      (__pyx_v_L[__pyx_t_4]) = ((__pyx_v_L[__pyx_t_4]) + ((__pyx_v_C * (__pyx_v_b[__pyx_v_i])) * (__pyx_v_b[__pyx_v_i])));

      /* "lightning/impl/primal_cd_fast.pyx":640
 *             val = data[ii] * y[i]
 * 
 *             if b[i] > 0:             # <<<<<<<<<<<<<<
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp
 */
    }
  }

  /* "lightning/impl/primal_cd_fast.pyx":646
 *                 L[0] += C * b[i] * b[i]
 * 
 *         Lp[0] *= 2             # <<<<<<<<<<<<<<
 *         Lpp[0] *= 2
 * 
 */
  __pyx_t_4 = 0;
  (__pyx_v_Lp[__pyx_t_4]) = ((__pyx_v_Lp[__pyx_t_4]) * 2.0);

  /* "lightning/impl/primal_cd_fast.pyx":647
 * 
 *         Lp[0] *= 2
 *         Lpp[0] *= 2             # <<<<<<<<<<<<<<
 * 
 *     cdef void update(self,
 */
  __pyx_t_4 = 0;
  (__pyx_v_Lpp[__pyx_t_4]) = ((__pyx_v_Lpp[__pyx_t_4]) * 2.0);

  /* "lightning/impl/primal_cd_fast.pyx":615
 *     # Binary
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":649
 *         Lpp[0] *= 2
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_z_diff, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_L_new) {
  int __pyx_v_i;
  int __pyx_v_ii;
  double __pyx_v_b_new;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  __Pyx_RefNannySetupContext("update", 0);

  /* "lightning/impl/primal_cd_fast.pyx":663
 * 
 *         # New objective value
 *         L_new[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L_new[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":665
 *         L_new[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             b_new = b[i] + z_diff * data[ii] * y[i]
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":666
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             b_new = b[i] + z_diff * data[ii] * y[i]
 *             # b[i] = 1 - y[i] * np.dot(w, X[i])
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":667
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             b_new = b[i] + z_diff * data[ii] * y[i]             # <<<<<<<<<<<<<<
 *             # b[i] = 1 - y[i] * np.dot(w, X[i])
 *             b[i] = b_new
 */
    __pyx_v_b_new = ((__pyx_v_b[__pyx_v_i]) + ((__pyx_v_z_diff * (__pyx_v_data[__pyx_v_ii])) * (__pyx_v_y[__pyx_v_i])));

    /* "lightning/impl/primal_cd_fast.pyx":669
 *             b_new = b[i] + z_diff * data[ii] * y[i]
 *             # b[i] = 1 - y[i] * np.dot(w, X[i])
 *             b[i] = b_new             # <<<<<<<<<<<<<<
 *             if b_new > 0:
 *                 L_new[0] += b_new * b_new
 */
    (__pyx_v_b[__pyx_v_i]) = __pyx_v_b_new;

    /* "lightning/impl/primal_cd_fast.pyx":670
 *             # b[i] = 1 - y[i] * np.dot(w, X[i])
 *             b[i] = b_new
 *             if b_new > 0:             # <<<<<<<<<<<<<<
 *                 L_new[0] += b_new * b_new
 * 
 */
    __pyx_t_3 = ((__pyx_v_b_new > 0.0) != 0);
    if (__pyx_t_3) {

      /* "lightning/impl/primal_cd_fast.pyx":671
 *             b[i] = b_new
 *             if b_new > 0:
 *                 L_new[0] += b_new * b_new             # <<<<<<<<<<<<<<
 * 
 *         L_new[0] *= C
 */
      __pyx_t_4 = 0;
      (__pyx_v_L_new[__pyx_t_4]) = ((__pyx_v_L_new[__pyx_t_4]) + (__pyx_v_b_new * __pyx_v_b_new));

      /* "lightning/impl/primal_cd_fast.pyx":670
 *             # b[i] = 1 - y[i] * np.dot(w, X[i])
 *             b[i] = b_new
 *             if b_new > 0:             # <<<<<<<<<<<<<<
 *                 L_new[0] += b_new * b_new
 * 
 */
    }
  }

  /* "lightning/impl/primal_cd_fast.pyx":673
 *                 L_new[0] += b_new * b_new
 * 
 *         L_new[0] *= C             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = 0;
  (__pyx_v_L_new[__pyx_t_4]) = ((__pyx_v_L_new[__pyx_t_4]) * __pyx_v_C);

  /* "lightning/impl/primal_cd_fast.pyx":649
 *         Lpp[0] *= 2
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":678
 *     # Multiclass
 * 
 *     cdef void derivatives_mc(self,             # <<<<<<<<<<<<<<
 *                              int j,
 *                              double C,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_derivatives_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int __pyx_v_n_samples, int __pyx_v_n_vectors, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, int *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_g, double *__pyx_v_h, double *__pyx_v_L, double *__pyx_v_Lpp_max) {
  int __pyx_v_ii;
  int __pyx_v_i;
  int __pyx_v_k;
  double __pyx_v_tmp;
  double __pyx_v_tmp2;
  double __pyx_v_b_val;
  double *__pyx_v_b_ptr;
  double __pyx_v_DBL_MAX;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  long __pyx_t_12;
  int __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("derivatives_mc", 0);

  /* "lightning/impl/primal_cd_fast.pyx":695
 *         cdef int ii, i, k
 *         cdef double tmp, tmp2, b_val
 *         cdef double* b_ptr = b             # <<<<<<<<<<<<<<
 *         cdef double DBL_MAX = np.finfo(np.double).max
 * 
 */
  __pyx_v_b_ptr = __pyx_v_b;

  /* "lightning/impl/primal_cd_fast.pyx":696
 *         cdef double tmp, tmp2, b_val
 *         cdef double* b_ptr = b
 *         cdef double DBL_MAX = np.finfo(np.double).max             # <<<<<<<<<<<<<<
 * 
 *         # Largest second derivative.
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_finfo); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_max); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_DBL_MAX = __pyx_t_6;

  /* "lightning/impl/primal_cd_fast.pyx":699
 * 
 *         # Largest second derivative.
 *         Lpp_max[0] = 0             # <<<<<<<<<<<<<<
 *         # Objective value
 *         L[0] = 0
 */
  (__pyx_v_Lpp_max[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":701
 *         Lpp_max[0] = 0
 *         # Objective value
 *         L[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for k in xrange(n_vectors):
 */
  (__pyx_v_L[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":703
 *         L[0] = 0
 * 
 *         for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *             # First derivative with respect to w_jk
 *             g[k] = 0
 */
  __pyx_t_7 = __pyx_v_n_vectors;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_k = __pyx_t_8;

    /* "lightning/impl/primal_cd_fast.pyx":705
 *         for k in xrange(n_vectors):
 *             # First derivative with respect to w_jk
 *             g[k] = 0             # <<<<<<<<<<<<<<
 *             # Second derivative with respect to  w_jk^2
 *             h[k] = 0
 */
    (__pyx_v_g[__pyx_v_k]) = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":707
 *             g[k] = 0
 *             # Second derivative with respect to  w_jk^2
 *             h[k] = 0             # <<<<<<<<<<<<<<
 * 
 *         for k in xrange(n_vectors):
 */
    (__pyx_v_h[__pyx_v_k]) = 0.0;
  }

  /* "lightning/impl/primal_cd_fast.pyx":709
 *             h[k] = 0
 * 
 *         for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 * 
 *             for ii in xrange(n_nz):
 */
  __pyx_t_7 = __pyx_v_n_vectors;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_k = __pyx_t_8;

    /* "lightning/impl/primal_cd_fast.pyx":711
 *         for k in xrange(n_vectors):
 * 
 *             for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *                 i = indices[ii]
 * 
 */
    __pyx_t_9 = __pyx_v_n_nz;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_ii = __pyx_t_10;

      /* "lightning/impl/primal_cd_fast.pyx":712
 * 
 *             for ii in xrange(n_nz):
 *                 i = indices[ii]             # <<<<<<<<<<<<<<
 * 
 *                 if y[i] == k:
 */
      __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

      /* "lightning/impl/primal_cd_fast.pyx":714
 *                 i = indices[ii]
 * 
 *                 if y[i] == k:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_11 = (((__pyx_v_y[__pyx_v_i]) == __pyx_v_k) != 0);
      if (__pyx_t_11) {

        /* "lightning/impl/primal_cd_fast.pyx":715
 * 
 *                 if y[i] == k:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # b_val = b[k, i]
 */
        goto __pyx_L7_continue;

        /* "lightning/impl/primal_cd_fast.pyx":714
 *                 i = indices[ii]
 * 
 *                 if y[i] == k:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":718
 * 
 *                 # b_val = b[k, i]
 *                 b_val = b_ptr[i]             # <<<<<<<<<<<<<<
 * 
 *                 if b_val > 0:
 */
      __pyx_v_b_val = (__pyx_v_b_ptr[__pyx_v_i]);

      /* "lightning/impl/primal_cd_fast.pyx":720
 *                 b_val = b_ptr[i]
 * 
 *                 if b_val > 0:             # <<<<<<<<<<<<<<
 *                     L[0] += C * b_val * b_val
 *                     tmp = C * data[ii]
 */
      __pyx_t_11 = ((__pyx_v_b_val > 0.0) != 0);
      if (__pyx_t_11) {

        /* "lightning/impl/primal_cd_fast.pyx":721
 * 
 *                 if b_val > 0:
 *                     L[0] += C * b_val * b_val             # <<<<<<<<<<<<<<
 *                     tmp = C * data[ii]
 *                     tmp2 = tmp * b_val
 */
        __pyx_t_12 = 0;
        (__pyx_v_L[__pyx_t_12]) = ((__pyx_v_L[__pyx_t_12]) + ((__pyx_v_C * __pyx_v_b_val) * __pyx_v_b_val));

        /* "lightning/impl/primal_cd_fast.pyx":722
 *                 if b_val > 0:
 *                     L[0] += C * b_val * b_val
 *                     tmp = C * data[ii]             # <<<<<<<<<<<<<<
 *                     tmp2 = tmp * b_val
 *                     g[y[i]] -= tmp2
 */
        __pyx_v_tmp = (__pyx_v_C * (__pyx_v_data[__pyx_v_ii]));

        /* "lightning/impl/primal_cd_fast.pyx":723
 *                     L[0] += C * b_val * b_val
 *                     tmp = C * data[ii]
 *                     tmp2 = tmp * b_val             # <<<<<<<<<<<<<<
 *                     g[y[i]] -= tmp2
 *                     g[k] += tmp2
 */
        __pyx_v_tmp2 = (__pyx_v_tmp * __pyx_v_b_val);

        /* "lightning/impl/primal_cd_fast.pyx":724
 *                     tmp = C * data[ii]
 *                     tmp2 = tmp * b_val
 *                     g[y[i]] -= tmp2             # <<<<<<<<<<<<<<
 *                     g[k] += tmp2
 *                     tmp2 = tmp * data[ii]
 */
        __pyx_t_13 = (__pyx_v_y[__pyx_v_i]);
        (__pyx_v_g[__pyx_t_13]) = ((__pyx_v_g[__pyx_t_13]) - __pyx_v_tmp2);

        /* "lightning/impl/primal_cd_fast.pyx":725
 *                     tmp2 = tmp * b_val
 *                     g[y[i]] -= tmp2
 *                     g[k] += tmp2             # <<<<<<<<<<<<<<
 *                     tmp2 = tmp * data[ii]
 *                     h[y[i]] += tmp2
 */
        __pyx_t_13 = __pyx_v_k;
        (__pyx_v_g[__pyx_t_13]) = ((__pyx_v_g[__pyx_t_13]) + __pyx_v_tmp2);

        /* "lightning/impl/primal_cd_fast.pyx":726
 *                     g[y[i]] -= tmp2
 *                     g[k] += tmp2
 *                     tmp2 = tmp * data[ii]             # <<<<<<<<<<<<<<
 *                     h[y[i]] += tmp2
 *                     h[k] += tmp2
 */
        __pyx_v_tmp2 = (__pyx_v_tmp * (__pyx_v_data[__pyx_v_ii]));

        /* "lightning/impl/primal_cd_fast.pyx":727
 *                     g[k] += tmp2
 *                     tmp2 = tmp * data[ii]
 *                     h[y[i]] += tmp2             # <<<<<<<<<<<<<<
 *                     h[k] += tmp2
 * 
 */
        __pyx_t_13 = (__pyx_v_y[__pyx_v_i]);
        (__pyx_v_h[__pyx_t_13]) = ((__pyx_v_h[__pyx_t_13]) + __pyx_v_tmp2);

        /* "lightning/impl/primal_cd_fast.pyx":728
 *                     tmp2 = tmp * data[ii]
 *                     h[y[i]] += tmp2
 *                     h[k] += tmp2             # <<<<<<<<<<<<<<
 * 
 *             b_ptr += n_samples
 */
        __pyx_t_13 = __pyx_v_k;
        (__pyx_v_h[__pyx_t_13]) = ((__pyx_v_h[__pyx_t_13]) + __pyx_v_tmp2);

        /* "lightning/impl/primal_cd_fast.pyx":720
 *                 b_val = b_ptr[i]
 * 
 *                 if b_val > 0:             # <<<<<<<<<<<<<<
 *                     L[0] += C * b_val * b_val
 *                     tmp = C * data[ii]
 */
      }
      __pyx_L7_continue:;
    }

    /* "lightning/impl/primal_cd_fast.pyx":730
 *                     h[k] += tmp2
 * 
 *             b_ptr += n_samples             # <<<<<<<<<<<<<<
 * 
 *         Lpp_max[0] = -DBL_MAX
 */
    __pyx_v_b_ptr = (__pyx_v_b_ptr + __pyx_v_n_samples);
  }

  /* "lightning/impl/primal_cd_fast.pyx":732
 *             b_ptr += n_samples
 * 
 *         Lpp_max[0] = -DBL_MAX             # <<<<<<<<<<<<<<
 *         for k in xrange(n_vectors):
 *             g[k] *= 2
 */
  (__pyx_v_Lpp_max[0]) = (-__pyx_v_DBL_MAX);

  /* "lightning/impl/primal_cd_fast.pyx":733
 * 
 *         Lpp_max[0] = -DBL_MAX
 *         for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *             g[k] *= 2
 *             Lpp_max[0] = max(Lpp_max[0], h[k])
 */
  __pyx_t_7 = __pyx_v_n_vectors;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_k = __pyx_t_8;

    /* "lightning/impl/primal_cd_fast.pyx":734
 *         Lpp_max[0] = -DBL_MAX
 *         for k in xrange(n_vectors):
 *             g[k] *= 2             # <<<<<<<<<<<<<<
 *             Lpp_max[0] = max(Lpp_max[0], h[k])
 * 
 */
    __pyx_t_9 = __pyx_v_k;
    (__pyx_v_g[__pyx_t_9]) = ((__pyx_v_g[__pyx_t_9]) * 2.0);

    /* "lightning/impl/primal_cd_fast.pyx":735
 *         for k in xrange(n_vectors):
 *             g[k] *= 2
 *             Lpp_max[0] = max(Lpp_max[0], h[k])             # <<<<<<<<<<<<<<
 * 
 *         Lpp_max[0] *= 2
 */
    __pyx_t_6 = (__pyx_v_h[__pyx_v_k]);
    __pyx_t_14 = (__pyx_v_Lpp_max[0]);
    if (((__pyx_t_6 > __pyx_t_14) != 0)) {
      __pyx_t_15 = __pyx_t_6;
    } else {
      __pyx_t_15 = __pyx_t_14;
    }
    (__pyx_v_Lpp_max[0]) = __pyx_t_15;
  }

  /* "lightning/impl/primal_cd_fast.pyx":737
 *             Lpp_max[0] = max(Lpp_max[0], h[k])
 * 
 *         Lpp_max[0] *= 2             # <<<<<<<<<<<<<<
 *         Lpp_max[0] = min(max(Lpp_max[0], LOWER), UPPER)
 * 
 */
  __pyx_t_12 = 0;
  (__pyx_v_Lpp_max[__pyx_t_12]) = ((__pyx_v_Lpp_max[__pyx_t_12]) * 2.0);

  /* "lightning/impl/primal_cd_fast.pyx":738
 * 
 *         Lpp_max[0] *= 2
 *         Lpp_max[0] = min(max(Lpp_max[0], LOWER), UPPER)             # <<<<<<<<<<<<<<
 * 
 *     cdef void update_mc(self,
 */
  __pyx_t_15 = 1000000000.0;
  __pyx_t_6 = 0.01;
  __pyx_t_14 = (__pyx_v_Lpp_max[0]);
  if (((__pyx_t_6 > __pyx_t_14) != 0)) {
    __pyx_t_16 = __pyx_t_6;
  } else {
    __pyx_t_16 = __pyx_t_14;
  }
  __pyx_t_6 = __pyx_t_16;
  if (((__pyx_t_15 < __pyx_t_6) != 0)) {
    __pyx_t_16 = __pyx_t_15;
  } else {
    __pyx_t_16 = __pyx_t_6;
  }
  (__pyx_v_Lpp_max[0]) = __pyx_t_16;

  /* "lightning/impl/primal_cd_fast.pyx":678
 *     # Multiclass
 * 
 *     cdef void derivatives_mc(self,             # <<<<<<<<<<<<<<
 *                              int j,
 *                              double C,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.SquaredHinge.derivatives_mc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":740
 *         Lpp_max[0] = min(max(Lpp_max[0], LOWER), UPPER)
 * 
 *     cdef void update_mc(self,             # <<<<<<<<<<<<<<
 *                         double C,
 *                         int n_samples,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_update_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, double __pyx_v_C, int __pyx_v_n_samples, int __pyx_v_n_vectors, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, int *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_d, double *__pyx_v_d_old, CYTHON_UNUSED double *__pyx_v_h, double *__pyx_v_L_new) {
  int __pyx_v_ii;
  int __pyx_v_i;
  int __pyx_v_k;
  double __pyx_v_tmp;
  double __pyx_v_b_new;
  double *__pyx_v_b_ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  __Pyx_RefNannySetupContext("update_mc", 0);

  /* "lightning/impl/primal_cd_fast.pyx":759
 * 
 *         # New objective value
 *         L_new[0] = 0             # <<<<<<<<<<<<<<
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 */
  (__pyx_v_L_new[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":760
 *         # New objective value
 *         L_new[0] = 0
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             b_ptr = b + i
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":761
 *         L_new[0] = 0
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             b_ptr = b + i
 * 
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":762
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             b_ptr = b + i             # <<<<<<<<<<<<<<
 * 
 *             tmp = d_old[y[i]] - d[y[i]]
 */
    __pyx_v_b_ptr = (__pyx_v_b + __pyx_v_i);

    /* "lightning/impl/primal_cd_fast.pyx":764
 *             b_ptr = b + i
 * 
 *             tmp = d_old[y[i]] - d[y[i]]             # <<<<<<<<<<<<<<
 * 
 *             for k in xrange(n_vectors):
 */
    __pyx_v_tmp = ((__pyx_v_d_old[(__pyx_v_y[__pyx_v_i])]) - (__pyx_v_d[(__pyx_v_y[__pyx_v_i])]));

    /* "lightning/impl/primal_cd_fast.pyx":766
 *             tmp = d_old[y[i]] - d[y[i]]
 * 
 *             for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                 if k != y[i]:
 *                     # b_ptr[0] = b[k, i]
 */
    __pyx_t_3 = __pyx_v_n_vectors;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_k = __pyx_t_4;

      /* "lightning/impl/primal_cd_fast.pyx":767
 * 
 *             for k in xrange(n_vectors):
 *                 if k != y[i]:             # <<<<<<<<<<<<<<
 *                     # b_ptr[0] = b[k, i]
 *                     b_new = b_ptr[0] + (tmp - (d_old[k] - d[k])) * data[ii]
 */
      __pyx_t_5 = ((__pyx_v_k != (__pyx_v_y[__pyx_v_i])) != 0);
      if (__pyx_t_5) {

        /* "lightning/impl/primal_cd_fast.pyx":769
 *                 if k != y[i]:
 *                     # b_ptr[0] = b[k, i]
 *                     b_new = b_ptr[0] + (tmp - (d_old[k] - d[k])) * data[ii]             # <<<<<<<<<<<<<<
 *                     b_ptr[0] = b_new
 *                     if b_new > 0:
 */
        __pyx_v_b_new = ((__pyx_v_b_ptr[0]) + ((__pyx_v_tmp - ((__pyx_v_d_old[__pyx_v_k]) - (__pyx_v_d[__pyx_v_k]))) * (__pyx_v_data[__pyx_v_ii])));

        /* "lightning/impl/primal_cd_fast.pyx":770
 *                     # b_ptr[0] = b[k, i]
 *                     b_new = b_ptr[0] + (tmp - (d_old[k] - d[k])) * data[ii]
 *                     b_ptr[0] = b_new             # <<<<<<<<<<<<<<
 *                     if b_new > 0:
 *                         L_new[0] += C * b_new * b_new
 */
        (__pyx_v_b_ptr[0]) = __pyx_v_b_new;

        /* "lightning/impl/primal_cd_fast.pyx":771
 *                     b_new = b_ptr[0] + (tmp - (d_old[k] - d[k])) * data[ii]
 *                     b_ptr[0] = b_new
 *                     if b_new > 0:             # <<<<<<<<<<<<<<
 *                         L_new[0] += C * b_new * b_new
 * 
 */
        __pyx_t_5 = ((__pyx_v_b_new > 0.0) != 0);
        if (__pyx_t_5) {

          /* "lightning/impl/primal_cd_fast.pyx":772
 *                     b_ptr[0] = b_new
 *                     if b_new > 0:
 *                         L_new[0] += C * b_new * b_new             # <<<<<<<<<<<<<<
 * 
 *                 b_ptr += n_samples
 */
          __pyx_t_6 = 0;
          (__pyx_v_L_new[__pyx_t_6]) = ((__pyx_v_L_new[__pyx_t_6]) + ((__pyx_v_C * __pyx_v_b_new) * __pyx_v_b_new));

          /* "lightning/impl/primal_cd_fast.pyx":771
 *                     b_new = b_ptr[0] + (tmp - (d_old[k] - d[k])) * data[ii]
 *                     b_ptr[0] = b_new
 *                     if b_new > 0:             # <<<<<<<<<<<<<<
 *                         L_new[0] += C * b_new * b_new
 * 
 */
        }

        /* "lightning/impl/primal_cd_fast.pyx":767
 * 
 *             for k in xrange(n_vectors):
 *                 if k != y[i]:             # <<<<<<<<<<<<<<
 *                     # b_ptr[0] = b[k, i]
 *                     b_new = b_ptr[0] + (tmp - (d_old[k] - d[k])) * data[ii]
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":774
 *                         L_new[0] += C * b_new * b_new
 * 
 *                 b_ptr += n_samples             # <<<<<<<<<<<<<<
 * 
 *     cdef void lipschitz_constant_mt(self,
 */
      __pyx_v_b_ptr = (__pyx_v_b_ptr + __pyx_v_n_samples);
    }
  }

  /* "lightning/impl/primal_cd_fast.pyx":740
 *         Lpp_max[0] = min(max(Lpp_max[0], LOWER), UPPER)
 * 
 *     cdef void update_mc(self,             # <<<<<<<<<<<<<<
 *                         double C,
 *                         int n_samples,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":776
 *                 b_ptr += n_samples
 * 
 *     cdef void lipschitz_constant_mt(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_lipschitz_constant_mt(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double __pyx_v_C, double *__pyx_v_out) {
  double __pyx_v_scale;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lipschitz_constant_mt", 0);

  /* "lightning/impl/primal_cd_fast.pyx":782
 *                                     double* out):
 * 
 *         cdef double scale = 2 * C * n_vectors             # <<<<<<<<<<<<<<
 *         self._lipschitz_constant(X, scale, out)
 * 
 */
  __pyx_v_scale = ((2.0 * __pyx_v_C) * __pyx_v_n_vectors);

  /* "lightning/impl/primal_cd_fast.pyx":783
 * 
 *         cdef double scale = 2 * C * n_vectors
 *         self._lipschitz_constant(X, scale, out)             # <<<<<<<<<<<<<<
 * 
 *     cdef void lipschitz_constant_mc(self,
 */
  ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_SquaredHinge *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._lipschitz_constant(((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self), __pyx_v_X, __pyx_v_scale, __pyx_v_out);

  /* "lightning/impl/primal_cd_fast.pyx":776
 *                 b_ptr += n_samples
 * 
 *     cdef void lipschitz_constant_mt(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":785
 *         self._lipschitz_constant(X, scale, out)
 * 
 *     cdef void lipschitz_constant_mc(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_lipschitz_constant_mc(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *__pyx_v_self, int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double __pyx_v_C, double *__pyx_v_out) {
  double __pyx_v_scale;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lipschitz_constant_mc", 0);

  /* "lightning/impl/primal_cd_fast.pyx":791
 *                                     double* out):
 * 
 *         cdef double scale = 4 * C * (n_vectors - 1)             # <<<<<<<<<<<<<<
 *         self._lipschitz_constant(X, scale, out)
 * 
 */
  __pyx_v_scale = ((4.0 * __pyx_v_C) * (__pyx_v_n_vectors - 1));

  /* "lightning/impl/primal_cd_fast.pyx":792
 * 
 *         cdef double scale = 4 * C * (n_vectors - 1)
 *         self._lipschitz_constant(X, scale, out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_SquaredHinge *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._lipschitz_constant(((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self), __pyx_v_X, __pyx_v_scale, __pyx_v_out);

  /* "lightning/impl/primal_cd_fast.pyx":785
 *         self._lipschitz_constant(X, scale, out)
 * 
 *     cdef void lipschitz_constant_mc(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":797
 * cdef class SmoothHinge(LossFunction):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  int max_steps=20,
 *                  double sigma=0.01,
 */

/* Python wrapper */
static int __pyx_pw_9lightning_4impl_14primal_cd_fast_11SmoothHinge_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9lightning_4impl_14primal_cd_fast_11SmoothHinge_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_max_steps;
  double __pyx_v_sigma;
  double __pyx_v_beta;
  int __pyx_v_verbose;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_steps,&__pyx_n_s_sigma,&__pyx_n_s_beta,&__pyx_n_s_verbose,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_steps);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beta);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_max_steps = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_max_steps == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_max_steps = ((int)20);
    }
    if (values[1]) {
      __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sigma = ((double)0.01);
    }
    if (values[2]) {
      __pyx_v_beta = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_beta == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_beta = ((double)0.5);
    }
    if (values[3]) {
      __pyx_v_verbose = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_verbose == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 801; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_verbose = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 797; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lightning.impl.primal_cd_fast.SmoothHinge.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9lightning_4impl_14primal_cd_fast_11SmoothHinge___init__(((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge *)__pyx_v_self), __pyx_v_max_steps, __pyx_v_sigma, __pyx_v_beta, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9lightning_4impl_14primal_cd_fast_11SmoothHinge___init__(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge *__pyx_v_self, int __pyx_v_max_steps, double __pyx_v_sigma, double __pyx_v_beta, int __pyx_v_verbose) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "lightning/impl/primal_cd_fast.pyx":802
 *                  double beta=0.5,
 *                  int verbose=0):
 *         self.max_steps = max_steps             # <<<<<<<<<<<<<<
 *         self.sigma = sigma
 *         self.beta = beta
 */
  __pyx_v_self->__pyx_base.max_steps = __pyx_v_max_steps;

  /* "lightning/impl/primal_cd_fast.pyx":803
 *                  int verbose=0):
 *         self.max_steps = max_steps
 *         self.sigma = sigma             # <<<<<<<<<<<<<<
 *         self.beta = beta
 *         self.verbose = verbose
 */
  __pyx_v_self->__pyx_base.sigma = __pyx_v_sigma;

  /* "lightning/impl/primal_cd_fast.pyx":804
 *         self.max_steps = max_steps
 *         self.sigma = sigma
 *         self.beta = beta             # <<<<<<<<<<<<<<
 *         self.verbose = verbose
 * 
 */
  __pyx_v_self->__pyx_base.beta = __pyx_v_beta;

  /* "lightning/impl/primal_cd_fast.pyx":805
 *         self.sigma = sigma
 *         self.beta = beta
 *         self.verbose = verbose             # <<<<<<<<<<<<<<
 * 
 *     cdef void derivatives(self,
 */
  __pyx_v_self->__pyx_base.verbose = __pyx_v_verbose;

  /* "lightning/impl/primal_cd_fast.pyx":797
 * cdef class SmoothHinge(LossFunction):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  int max_steps=20,
 *                  double sigma=0.01,
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lightning/impl/primal_cd_fast.pyx":807
 *         self.verbose = verbose
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_11SmoothHinge_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_Lp, double *__pyx_v_Lpp, double *__pyx_v_L) {
  int __pyx_v_i;
  int __pyx_v_ii;
  double __pyx_v_val;
  double __pyx_v_tmp;
  double __pyx_v_gamma;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  __Pyx_RefNannySetupContext("derivatives", 0);

  /* "lightning/impl/primal_cd_fast.pyx":820
 *         cdef int i, ii
 *         cdef double val, tmp
 *         cdef double gamma = 1.0             # <<<<<<<<<<<<<<
 * 
 *         # First derivative
 */
  __pyx_v_gamma = 1.0;

  /* "lightning/impl/primal_cd_fast.pyx":823
 * 
 *         # First derivative
 *         Lp[0] = 0             # <<<<<<<<<<<<<<
 *         # Second derivative
 *         Lpp[0] = 0
 */
  (__pyx_v_Lp[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":825
 *         Lp[0] = 0
 *         # Second derivative
 *         Lpp[0] = 0             # <<<<<<<<<<<<<<
 *         # Objective value
 *         L[0] = 0
 */
  (__pyx_v_Lpp[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":827
 *         Lpp[0] = 0
 *         # Objective value
 *         L[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":829
 *         L[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             val = data[ii] * y[i]
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":830
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             val = data[ii] * y[i]
 * 
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":831
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             val = data[ii] * y[i]             # <<<<<<<<<<<<<<
 * 
 *             if 0 <= b[i] and b[i] <= 1:
 */
    __pyx_v_val = ((__pyx_v_data[__pyx_v_ii]) * (__pyx_v_y[__pyx_v_i]));

    /* "lightning/impl/primal_cd_fast.pyx":833
 *             val = data[ii] * y[i]
 * 
 *             if 0 <= b[i] and b[i] <= 1:             # <<<<<<<<<<<<<<
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp / gamma
 */
    __pyx_t_4 = ((0.0 <= (__pyx_v_b[__pyx_v_i])) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_4 = (((__pyx_v_b[__pyx_v_i]) <= 1.0) != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_3) {

      /* "lightning/impl/primal_cd_fast.pyx":834
 * 
 *             if 0 <= b[i] and b[i] <= 1:
 *                 tmp = val * C             # <<<<<<<<<<<<<<
 *                 Lp[0] -= b[i] * tmp / gamma
 *                 Lpp[0] += val * tmp / gamma
 */
      __pyx_v_tmp = (__pyx_v_val * __pyx_v_C);

      /* "lightning/impl/primal_cd_fast.pyx":835
 *             if 0 <= b[i] and b[i] <= 1:
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp / gamma             # <<<<<<<<<<<<<<
 *                 Lpp[0] += val * tmp / gamma
 *                 L[0] += C * 0.5 / gamma * b[i] * b[i]
 */
      __pyx_t_5 = 0;
      (__pyx_v_Lp[__pyx_t_5]) = ((__pyx_v_Lp[__pyx_t_5]) - (((__pyx_v_b[__pyx_v_i]) * __pyx_v_tmp) / __pyx_v_gamma));

      /* "lightning/impl/primal_cd_fast.pyx":836
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp / gamma
 *                 Lpp[0] += val * tmp / gamma             # <<<<<<<<<<<<<<
 *                 L[0] += C * 0.5 / gamma * b[i] * b[i]
 *             elif b[i] >= gamma:
 */
      __pyx_t_5 = 0;
      (__pyx_v_Lpp[__pyx_t_5]) = ((__pyx_v_Lpp[__pyx_t_5]) + ((__pyx_v_val * __pyx_v_tmp) / __pyx_v_gamma));

      /* "lightning/impl/primal_cd_fast.pyx":837
 *                 Lp[0] -= b[i] * tmp / gamma
 *                 Lpp[0] += val * tmp / gamma
 *                 L[0] += C * 0.5 / gamma * b[i] * b[i]             # <<<<<<<<<<<<<<
 *             elif b[i] >= gamma:
 *                 tmp = val * C
 */
      __pyx_t_5 = 0;
      (__pyx_v_L[__pyx_t_5]) = ((__pyx_v_L[__pyx_t_5]) + ((((__pyx_v_C * 0.5) / __pyx_v_gamma) * (__pyx_v_b[__pyx_v_i])) * (__pyx_v_b[__pyx_v_i])));

      /* "lightning/impl/primal_cd_fast.pyx":833
 *             val = data[ii] * y[i]
 * 
 *             if 0 <= b[i] and b[i] <= 1:             # <<<<<<<<<<<<<<
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp / gamma
 */
      goto __pyx_L5;
    }

    /* "lightning/impl/primal_cd_fast.pyx":838
 *                 Lpp[0] += val * tmp / gamma
 *                 L[0] += C * 0.5 / gamma * b[i] * b[i]
 *             elif b[i] >= gamma:             # <<<<<<<<<<<<<<
 *                 tmp = val * C
 *                 Lp[0] -= tmp
 */
    __pyx_t_3 = (((__pyx_v_b[__pyx_v_i]) >= __pyx_v_gamma) != 0);
    if (__pyx_t_3) {

      /* "lightning/impl/primal_cd_fast.pyx":839
 *                 L[0] += C * 0.5 / gamma * b[i] * b[i]
 *             elif b[i] >= gamma:
 *                 tmp = val * C             # <<<<<<<<<<<<<<
 *                 Lp[0] -= tmp
 *                 L[0] += C * (b[i] - 0.5 * gamma)
 */
      __pyx_v_tmp = (__pyx_v_val * __pyx_v_C);

      /* "lightning/impl/primal_cd_fast.pyx":840
 *             elif b[i] >= gamma:
 *                 tmp = val * C
 *                 Lp[0] -= tmp             # <<<<<<<<<<<<<<
 *                 L[0] += C * (b[i] - 0.5 * gamma)
 * 
 */
      __pyx_t_5 = 0;
      (__pyx_v_Lp[__pyx_t_5]) = ((__pyx_v_Lp[__pyx_t_5]) - __pyx_v_tmp);

      /* "lightning/impl/primal_cd_fast.pyx":841
 *                 tmp = val * C
 *                 Lp[0] -= tmp
 *                 L[0] += C * (b[i] - 0.5 * gamma)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = 0;
      (__pyx_v_L[__pyx_t_5]) = ((__pyx_v_L[__pyx_t_5]) + (__pyx_v_C * ((__pyx_v_b[__pyx_v_i]) - (0.5 * __pyx_v_gamma))));

      /* "lightning/impl/primal_cd_fast.pyx":838
 *                 Lpp[0] += val * tmp / gamma
 *                 L[0] += C * 0.5 / gamma * b[i] * b[i]
 *             elif b[i] >= gamma:             # <<<<<<<<<<<<<<
 *                 tmp = val * C
 *                 Lp[0] -= tmp
 */
    }
    __pyx_L5:;
  }

  /* "lightning/impl/primal_cd_fast.pyx":807
 *         self.verbose = verbose
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":844
 * 
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_11SmoothHinge_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_z_diff, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_L_new) {
  int __pyx_v_i;
  int __pyx_v_ii;
  double __pyx_v_b_new;
  double __pyx_v_gamma;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  __Pyx_RefNannySetupContext("update", 0);

  /* "lightning/impl/primal_cd_fast.pyx":856
 *         cdef int i, ii
 *         cdef double b_new
 *         cdef double gamma = 1.0             # <<<<<<<<<<<<<<
 * 
 *         # New objective value
 */
  __pyx_v_gamma = 1.0;

  /* "lightning/impl/primal_cd_fast.pyx":859
 * 
 *         # New objective value
 *         L_new[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L_new[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":861
 *         L_new[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             b_new = b[i] + z_diff * data[ii] * y[i]
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":862
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             b_new = b[i] + z_diff * data[ii] * y[i]
 *             # b[i] = 1 - y[i] * np.dot(w, X[i])
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":863
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             b_new = b[i] + z_diff * data[ii] * y[i]             # <<<<<<<<<<<<<<
 *             # b[i] = 1 - y[i] * np.dot(w, X[i])
 *             b[i] = b_new
 */
    __pyx_v_b_new = ((__pyx_v_b[__pyx_v_i]) + ((__pyx_v_z_diff * (__pyx_v_data[__pyx_v_ii])) * (__pyx_v_y[__pyx_v_i])));

    /* "lightning/impl/primal_cd_fast.pyx":865
 *             b_new = b[i] + z_diff * data[ii] * y[i]
 *             # b[i] = 1 - y[i] * np.dot(w, X[i])
 *             b[i] = b_new             # <<<<<<<<<<<<<<
 * 
 *             if 0 <= b_new and b_new <= 1:
 */
    (__pyx_v_b[__pyx_v_i]) = __pyx_v_b_new;

    /* "lightning/impl/primal_cd_fast.pyx":867
 *             b[i] = b_new
 * 
 *             if 0 <= b_new and b_new <= 1:             # <<<<<<<<<<<<<<
 *                 L_new[0] += 0.5 / gamma * b_new * b_new
 *             elif b_new >= gamma:
 */
    __pyx_t_4 = ((0.0 <= __pyx_v_b_new) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_4 = ((__pyx_v_b_new <= 1.0) != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_3) {

      /* "lightning/impl/primal_cd_fast.pyx":868
 * 
 *             if 0 <= b_new and b_new <= 1:
 *                 L_new[0] += 0.5 / gamma * b_new * b_new             # <<<<<<<<<<<<<<
 *             elif b_new >= gamma:
 *                 L_new[0] += b_new - 0.5 * gamma
 */
      __pyx_t_5 = 0;
      (__pyx_v_L_new[__pyx_t_5]) = ((__pyx_v_L_new[__pyx_t_5]) + (((0.5 / __pyx_v_gamma) * __pyx_v_b_new) * __pyx_v_b_new));

      /* "lightning/impl/primal_cd_fast.pyx":867
 *             b[i] = b_new
 * 
 *             if 0 <= b_new and b_new <= 1:             # <<<<<<<<<<<<<<
 *                 L_new[0] += 0.5 / gamma * b_new * b_new
 *             elif b_new >= gamma:
 */
      goto __pyx_L5;
    }

    /* "lightning/impl/primal_cd_fast.pyx":869
 *             if 0 <= b_new and b_new <= 1:
 *                 L_new[0] += 0.5 / gamma * b_new * b_new
 *             elif b_new >= gamma:             # <<<<<<<<<<<<<<
 *                 L_new[0] += b_new - 0.5 * gamma
 * 
 */
    __pyx_t_3 = ((__pyx_v_b_new >= __pyx_v_gamma) != 0);
    if (__pyx_t_3) {

      /* "lightning/impl/primal_cd_fast.pyx":870
 *                 L_new[0] += 0.5 / gamma * b_new * b_new
 *             elif b_new >= gamma:
 *                 L_new[0] += b_new - 0.5 * gamma             # <<<<<<<<<<<<<<
 * 
 *         L_new[0] *= C
 */
      __pyx_t_5 = 0;
      (__pyx_v_L_new[__pyx_t_5]) = ((__pyx_v_L_new[__pyx_t_5]) + (__pyx_v_b_new - (0.5 * __pyx_v_gamma)));

      /* "lightning/impl/primal_cd_fast.pyx":869
 *             if 0 <= b_new and b_new <= 1:
 *                 L_new[0] += 0.5 / gamma * b_new * b_new
 *             elif b_new >= gamma:             # <<<<<<<<<<<<<<
 *                 L_new[0] += b_new - 0.5 * gamma
 * 
 */
    }
    __pyx_L5:;
  }

  /* "lightning/impl/primal_cd_fast.pyx":872
 *                 L_new[0] += b_new - 0.5 * gamma
 * 
 *         L_new[0] *= C             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = 0;
  (__pyx_v_L_new[__pyx_t_5]) = ((__pyx_v_L_new[__pyx_t_5]) * __pyx_v_C);

  /* "lightning/impl/primal_cd_fast.pyx":844
 * 
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":877
 * cdef class ModifiedHuber(LossFunction):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  int max_steps=30,
 *                  double sigma=0.01,
 */

/* Python wrapper */
static int __pyx_pw_9lightning_4impl_14primal_cd_fast_13ModifiedHuber_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9lightning_4impl_14primal_cd_fast_13ModifiedHuber_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_max_steps;
  double __pyx_v_sigma;
  double __pyx_v_beta;
  int __pyx_v_verbose;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_steps,&__pyx_n_s_sigma,&__pyx_n_s_beta,&__pyx_n_s_verbose,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_steps);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beta);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_max_steps = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_max_steps == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 878; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_max_steps = ((int)30);
    }
    if (values[1]) {
      __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sigma = ((double)0.01);
    }
    if (values[2]) {
      __pyx_v_beta = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_beta == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_beta = ((double)0.5);
    }
    if (values[3]) {
      __pyx_v_verbose = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_verbose == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_verbose = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lightning.impl.primal_cd_fast.ModifiedHuber.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9lightning_4impl_14primal_cd_fast_13ModifiedHuber___init__(((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber *)__pyx_v_self), __pyx_v_max_steps, __pyx_v_sigma, __pyx_v_beta, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9lightning_4impl_14primal_cd_fast_13ModifiedHuber___init__(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber *__pyx_v_self, int __pyx_v_max_steps, double __pyx_v_sigma, double __pyx_v_beta, int __pyx_v_verbose) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "lightning/impl/primal_cd_fast.pyx":882
 *                  double beta=0.5,
 *                  int verbose=0):
 *         self.max_steps = max_steps             # <<<<<<<<<<<<<<
 *         self.sigma = sigma
 *         self.beta = beta
 */
  __pyx_v_self->__pyx_base.max_steps = __pyx_v_max_steps;

  /* "lightning/impl/primal_cd_fast.pyx":883
 *                  int verbose=0):
 *         self.max_steps = max_steps
 *         self.sigma = sigma             # <<<<<<<<<<<<<<
 *         self.beta = beta
 *         self.verbose = verbose
 */
  __pyx_v_self->__pyx_base.sigma = __pyx_v_sigma;

  /* "lightning/impl/primal_cd_fast.pyx":884
 *         self.max_steps = max_steps
 *         self.sigma = sigma
 *         self.beta = beta             # <<<<<<<<<<<<<<
 *         self.verbose = verbose
 * 
 */
  __pyx_v_self->__pyx_base.beta = __pyx_v_beta;

  /* "lightning/impl/primal_cd_fast.pyx":885
 *         self.sigma = sigma
 *         self.beta = beta
 *         self.verbose = verbose             # <<<<<<<<<<<<<<
 * 
 *     cdef void derivatives(self,
 */
  __pyx_v_self->__pyx_base.verbose = __pyx_v_verbose;

  /* "lightning/impl/primal_cd_fast.pyx":877
 * cdef class ModifiedHuber(LossFunction):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  int max_steps=30,
 *                  double sigma=0.01,
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lightning/impl/primal_cd_fast.pyx":887
 *         self.verbose = verbose
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_13ModifiedHuber_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_Lp, double *__pyx_v_Lpp, double *__pyx_v_L) {
  int __pyx_v_i;
  int __pyx_v_ii;
  double __pyx_v_val;
  double __pyx_v_tmp;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  __Pyx_RefNannySetupContext("derivatives", 0);

  /* "lightning/impl/primal_cd_fast.pyx":902
 * 
 *         # First derivative
 *         Lp[0] = 0             # <<<<<<<<<<<<<<
 *         # Second derivative
 *         Lpp[0] = 0
 */
  (__pyx_v_Lp[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":904
 *         Lp[0] = 0
 *         # Second derivative
 *         Lpp[0] = 0             # <<<<<<<<<<<<<<
 *         # Objective value
 *         L[0] = 0
 */
  (__pyx_v_Lpp[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":906
 *         Lpp[0] = 0
 *         # Objective value
 *         L[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":908
 *         L[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             val = data[ii] * y[i]
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":909
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             val = data[ii] * y[i]
 * 
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":910
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             val = data[ii] * y[i]             # <<<<<<<<<<<<<<
 * 
 *             if b[i] > 2:
 */
    __pyx_v_val = ((__pyx_v_data[__pyx_v_ii]) * (__pyx_v_y[__pyx_v_i]));

    /* "lightning/impl/primal_cd_fast.pyx":912
 *             val = data[ii] * y[i]
 * 
 *             if b[i] > 2:             # <<<<<<<<<<<<<<
 *                 Lp[0] -= 2 * val * C
 *                 # -4 yp = 4 (b[i] - 1)
 */
    __pyx_t_3 = (((__pyx_v_b[__pyx_v_i]) > 2.0) != 0);
    if (__pyx_t_3) {

      /* "lightning/impl/primal_cd_fast.pyx":913
 * 
 *             if b[i] > 2:
 *                 Lp[0] -= 2 * val * C             # <<<<<<<<<<<<<<
 *                 # -4 yp = 4 (b[i] - 1)
 *                 L[0] += 4 * C * (b[i] - 1)
 */
      __pyx_t_4 = 0;
      (__pyx_v_Lp[__pyx_t_4]) = ((__pyx_v_Lp[__pyx_t_4]) - ((2.0 * __pyx_v_val) * __pyx_v_C));

      /* "lightning/impl/primal_cd_fast.pyx":915
 *                 Lp[0] -= 2 * val * C
 *                 # -4 yp = 4 (b[i] - 1)
 *                 L[0] += 4 * C * (b[i] - 1)             # <<<<<<<<<<<<<<
 *             elif b[i] > 0:
 *                 tmp = val * C
 */
      __pyx_t_4 = 0;
      (__pyx_v_L[__pyx_t_4]) = ((__pyx_v_L[__pyx_t_4]) + ((4.0 * __pyx_v_C) * ((__pyx_v_b[__pyx_v_i]) - 1.0)));

      /* "lightning/impl/primal_cd_fast.pyx":912
 *             val = data[ii] * y[i]
 * 
 *             if b[i] > 2:             # <<<<<<<<<<<<<<
 *                 Lp[0] -= 2 * val * C
 *                 # -4 yp = 4 (b[i] - 1)
 */
      goto __pyx_L5;
    }

    /* "lightning/impl/primal_cd_fast.pyx":916
 *                 # -4 yp = 4 (b[i] - 1)
 *                 L[0] += 4 * C * (b[i] - 1)
 *             elif b[i] > 0:             # <<<<<<<<<<<<<<
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp
 */
    __pyx_t_3 = (((__pyx_v_b[__pyx_v_i]) > 0.0) != 0);
    if (__pyx_t_3) {

      /* "lightning/impl/primal_cd_fast.pyx":917
 *                 L[0] += 4 * C * (b[i] - 1)
 *             elif b[i] > 0:
 *                 tmp = val * C             # <<<<<<<<<<<<<<
 *                 Lp[0] -= b[i] * tmp
 *                 Lpp[0] += val * tmp
 */
      __pyx_v_tmp = (__pyx_v_val * __pyx_v_C);

      /* "lightning/impl/primal_cd_fast.pyx":918
 *             elif b[i] > 0:
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp             # <<<<<<<<<<<<<<
 *                 Lpp[0] += val * tmp
 *                 L[0] += C * b[i] * b[i]
 */
      __pyx_t_4 = 0;
      (__pyx_v_Lp[__pyx_t_4]) = ((__pyx_v_Lp[__pyx_t_4]) - ((__pyx_v_b[__pyx_v_i]) * __pyx_v_tmp));

      /* "lightning/impl/primal_cd_fast.pyx":919
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp
 *                 Lpp[0] += val * tmp             # <<<<<<<<<<<<<<
 *                 L[0] += C * b[i] * b[i]
 * 
 */
      __pyx_t_4 = 0;
      (__pyx_v_Lpp[__pyx_t_4]) = ((__pyx_v_Lpp[__pyx_t_4]) + (__pyx_v_val * __pyx_v_tmp));

      /* "lightning/impl/primal_cd_fast.pyx":920
 *                 Lp[0] -= b[i] * tmp
 *                 Lpp[0] += val * tmp
 *                 L[0] += C * b[i] * b[i]             # <<<<<<<<<<<<<<
 * 
 *         Lp[0] *= 2
 */
      __pyx_t_4 = 0;
      (__pyx_v_L[__pyx_t_4]) = ((__pyx_v_L[__pyx_t_4]) + ((__pyx_v_C * (__pyx_v_b[__pyx_v_i])) * (__pyx_v_b[__pyx_v_i])));

      /* "lightning/impl/primal_cd_fast.pyx":916
 *                 # -4 yp = 4 (b[i] - 1)
 *                 L[0] += 4 * C * (b[i] - 1)
 *             elif b[i] > 0:             # <<<<<<<<<<<<<<
 *                 tmp = val * C
 *                 Lp[0] -= b[i] * tmp
 */
    }
    __pyx_L5:;
  }

  /* "lightning/impl/primal_cd_fast.pyx":922
 *                 L[0] += C * b[i] * b[i]
 * 
 *         Lp[0] *= 2             # <<<<<<<<<<<<<<
 *         Lpp[0] *= 2
 * 
 */
  __pyx_t_4 = 0;
  (__pyx_v_Lp[__pyx_t_4]) = ((__pyx_v_Lp[__pyx_t_4]) * 2.0);

  /* "lightning/impl/primal_cd_fast.pyx":923
 * 
 *         Lp[0] *= 2
 *         Lpp[0] *= 2             # <<<<<<<<<<<<<<
 * 
 *     cdef void update(self,
 */
  __pyx_t_4 = 0;
  (__pyx_v_Lpp[__pyx_t_4]) = ((__pyx_v_Lpp[__pyx_t_4]) * 2.0);

  /* "lightning/impl/primal_cd_fast.pyx":887
 *         self.verbose = verbose
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":925
 *         Lpp[0] *= 2
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_13ModifiedHuber_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_z_diff, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_L_new) {
  int __pyx_v_i;
  int __pyx_v_ii;
  double __pyx_v_b_new;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  __Pyx_RefNannySetupContext("update", 0);

  /* "lightning/impl/primal_cd_fast.pyx":938
 *         cdef double b_new
 * 
 *         L_new[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L_new[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":940
 *         L_new[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             b_new = b[i] + z_diff * data[ii] * y[i]
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":941
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             b_new = b[i] + z_diff * data[ii] * y[i]
 *             b[i] = b_new
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":942
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             b_new = b[i] + z_diff * data[ii] * y[i]             # <<<<<<<<<<<<<<
 *             b[i] = b_new
 * 
 */
    __pyx_v_b_new = ((__pyx_v_b[__pyx_v_i]) + ((__pyx_v_z_diff * (__pyx_v_data[__pyx_v_ii])) * (__pyx_v_y[__pyx_v_i])));

    /* "lightning/impl/primal_cd_fast.pyx":943
 *             i = indices[ii]
 *             b_new = b[i] + z_diff * data[ii] * y[i]
 *             b[i] = b_new             # <<<<<<<<<<<<<<
 * 
 *             if b_new > 2:
 */
    (__pyx_v_b[__pyx_v_i]) = __pyx_v_b_new;

    /* "lightning/impl/primal_cd_fast.pyx":945
 *             b[i] = b_new
 * 
 *             if b_new > 2:             # <<<<<<<<<<<<<<
 *                 L_new[0] += 4 * C * (b[i] - 1)
 *             elif b_new > 0:
 */
    __pyx_t_3 = ((__pyx_v_b_new > 2.0) != 0);
    if (__pyx_t_3) {

      /* "lightning/impl/primal_cd_fast.pyx":946
 * 
 *             if b_new > 2:
 *                 L_new[0] += 4 * C * (b[i] - 1)             # <<<<<<<<<<<<<<
 *             elif b_new > 0:
 *                 L_new[0] += C * b_new * b_new
 */
      __pyx_t_4 = 0;
      (__pyx_v_L_new[__pyx_t_4]) = ((__pyx_v_L_new[__pyx_t_4]) + ((4.0 * __pyx_v_C) * ((__pyx_v_b[__pyx_v_i]) - 1.0)));

      /* "lightning/impl/primal_cd_fast.pyx":945
 *             b[i] = b_new
 * 
 *             if b_new > 2:             # <<<<<<<<<<<<<<
 *                 L_new[0] += 4 * C * (b[i] - 1)
 *             elif b_new > 0:
 */
      goto __pyx_L5;
    }

    /* "lightning/impl/primal_cd_fast.pyx":947
 *             if b_new > 2:
 *                 L_new[0] += 4 * C * (b[i] - 1)
 *             elif b_new > 0:             # <<<<<<<<<<<<<<
 *                 L_new[0] += C * b_new * b_new
 * 
 */
    __pyx_t_3 = ((__pyx_v_b_new > 0.0) != 0);
    if (__pyx_t_3) {

      /* "lightning/impl/primal_cd_fast.pyx":948
 *                 L_new[0] += 4 * C * (b[i] - 1)
 *             elif b_new > 0:
 *                 L_new[0] += C * b_new * b_new             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_4 = 0;
      (__pyx_v_L_new[__pyx_t_4]) = ((__pyx_v_L_new[__pyx_t_4]) + ((__pyx_v_C * __pyx_v_b_new) * __pyx_v_b_new));

      /* "lightning/impl/primal_cd_fast.pyx":947
 *             if b_new > 2:
 *                 L_new[0] += 4 * C * (b[i] - 1)
 *             elif b_new > 0:             # <<<<<<<<<<<<<<
 *                 L_new[0] += C * b_new * b_new
 * 
 */
    }
    __pyx_L5:;
  }

  /* "lightning/impl/primal_cd_fast.pyx":925
 *         Lpp[0] *= 2
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":953
 * cdef class Log(LossFunction):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  int max_steps=30,
 *                  double sigma=0.01,
 */

/* Python wrapper */
static int __pyx_pw_9lightning_4impl_14primal_cd_fast_3Log_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9lightning_4impl_14primal_cd_fast_3Log_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_max_steps;
  double __pyx_v_sigma;
  double __pyx_v_beta;
  int __pyx_v_verbose;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_steps,&__pyx_n_s_sigma,&__pyx_n_s_beta,&__pyx_n_s_verbose,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_steps);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sigma);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_beta);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_max_steps = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_max_steps == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 954; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_max_steps = ((int)30);
    }
    if (values[1]) {
      __pyx_v_sigma = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_sigma == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sigma = ((double)0.01);
    }
    if (values[2]) {
      __pyx_v_beta = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_beta == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 956; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_beta = ((double)0.5);
    }
    if (values[3]) {
      __pyx_v_verbose = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_verbose == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_verbose = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lightning.impl.primal_cd_fast.Log.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9lightning_4impl_14primal_cd_fast_3Log___init__(((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *)__pyx_v_self), __pyx_v_max_steps, __pyx_v_sigma, __pyx_v_beta, __pyx_v_verbose);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9lightning_4impl_14primal_cd_fast_3Log___init__(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, int __pyx_v_max_steps, double __pyx_v_sigma, double __pyx_v_beta, int __pyx_v_verbose) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "lightning/impl/primal_cd_fast.pyx":958
 *                  double beta=0.5,
 *                  int verbose=0):
 *         self.max_steps = max_steps             # <<<<<<<<<<<<<<
 *         self.sigma = sigma
 *         self.beta = beta
 */
  __pyx_v_self->__pyx_base.max_steps = __pyx_v_max_steps;

  /* "lightning/impl/primal_cd_fast.pyx":959
 *                  int verbose=0):
 *         self.max_steps = max_steps
 *         self.sigma = sigma             # <<<<<<<<<<<<<<
 *         self.beta = beta
 *         self.verbose = verbose
 */
  __pyx_v_self->__pyx_base.sigma = __pyx_v_sigma;

  /* "lightning/impl/primal_cd_fast.pyx":960
 *         self.max_steps = max_steps
 *         self.sigma = sigma
 *         self.beta = beta             # <<<<<<<<<<<<<<
 *         self.verbose = verbose
 * 
 */
  __pyx_v_self->__pyx_base.beta = __pyx_v_beta;

  /* "lightning/impl/primal_cd_fast.pyx":961
 *         self.sigma = sigma
 *         self.beta = beta
 *         self.verbose = verbose             # <<<<<<<<<<<<<<
 * 
 *     # Binary
 */
  __pyx_v_self->__pyx_base.verbose = __pyx_v_verbose;

  /* "lightning/impl/primal_cd_fast.pyx":953
 * cdef class Log(LossFunction):
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  int max_steps=30,
 *                  double sigma=0.01,
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "lightning/impl/primal_cd_fast.pyx":965
 *     # Binary
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_derivatives(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_Lp, double *__pyx_v_Lpp, double *__pyx_v_L) {
  int __pyx_v_i;
  int __pyx_v_ii;
  double __pyx_v_val;
  double __pyx_v_tau;
  double __pyx_v_exppred;
  double __pyx_v_tmp;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  __Pyx_RefNannySetupContext("derivatives", 0);

  /* "lightning/impl/primal_cd_fast.pyx":980
 * 
 *         # First derivative
 *         Lp[0] = 0             # <<<<<<<<<<<<<<
 *         # Second derivative
 *         Lpp[0] = 0
 */
  (__pyx_v_Lp[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":982
 *         Lp[0] = 0
 *         # Second derivative
 *         Lpp[0] = 0             # <<<<<<<<<<<<<<
 *         # Objective value
 *         L[0] = 0
 */
  (__pyx_v_Lpp[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":984
 *         Lpp[0] = 0
 *         # Objective value
 *         L[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":986
 *         L[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             val = data[ii] * y[i]
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":987
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             val = data[ii] * y[i]
 * 
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":988
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             val = data[ii] * y[i]             # <<<<<<<<<<<<<<
 * 
 *             exppred = 1 + 1 / b[i]
 */
    __pyx_v_val = ((__pyx_v_data[__pyx_v_ii]) * (__pyx_v_y[__pyx_v_i]));

    /* "lightning/impl/primal_cd_fast.pyx":990
 *             val = data[ii] * y[i]
 * 
 *             exppred = 1 + 1 / b[i]             # <<<<<<<<<<<<<<
 *             tau = 1 / exppred
 *             tmp = val * C
 */
    __pyx_v_exppred = (1.0 + (1.0 / (__pyx_v_b[__pyx_v_i])));

    /* "lightning/impl/primal_cd_fast.pyx":991
 * 
 *             exppred = 1 + 1 / b[i]
 *             tau = 1 / exppred             # <<<<<<<<<<<<<<
 *             tmp = val * C
 *             Lp[0] += tmp * (tau - 1)
 */
    __pyx_v_tau = (1.0 / __pyx_v_exppred);

    /* "lightning/impl/primal_cd_fast.pyx":992
 *             exppred = 1 + 1 / b[i]
 *             tau = 1 / exppred
 *             tmp = val * C             # <<<<<<<<<<<<<<
 *             Lp[0] += tmp * (tau - 1)
 *             Lpp[0] += tmp * val * tau * (1 - tau)
 */
    __pyx_v_tmp = (__pyx_v_val * __pyx_v_C);

    /* "lightning/impl/primal_cd_fast.pyx":993
 *             tau = 1 / exppred
 *             tmp = val * C
 *             Lp[0] += tmp * (tau - 1)             # <<<<<<<<<<<<<<
 *             Lpp[0] += tmp * val * tau * (1 - tau)
 *             L[0] += C * log(exppred)
 */
    __pyx_t_3 = 0;
    (__pyx_v_Lp[__pyx_t_3]) = ((__pyx_v_Lp[__pyx_t_3]) + (__pyx_v_tmp * (__pyx_v_tau - 1.0)));

    /* "lightning/impl/primal_cd_fast.pyx":994
 *             tmp = val * C
 *             Lp[0] += tmp * (tau - 1)
 *             Lpp[0] += tmp * val * tau * (1 - tau)             # <<<<<<<<<<<<<<
 *             L[0] += C * log(exppred)
 * 
 */
    __pyx_t_3 = 0;
    (__pyx_v_Lpp[__pyx_t_3]) = ((__pyx_v_Lpp[__pyx_t_3]) + (((__pyx_v_tmp * __pyx_v_val) * __pyx_v_tau) * (1.0 - __pyx_v_tau)));

    /* "lightning/impl/primal_cd_fast.pyx":995
 *             Lp[0] += tmp * (tau - 1)
 *             Lpp[0] += tmp * val * tau * (1 - tau)
 *             L[0] += C * log(exppred)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = 0;
    (__pyx_v_L[__pyx_t_3]) = ((__pyx_v_L[__pyx_t_3]) + (__pyx_v_C * log(__pyx_v_exppred)));
  }

  /* "lightning/impl/primal_cd_fast.pyx":965
 *     # Binary
 * 
 *     cdef void derivatives(self,             # <<<<<<<<<<<<<<
 *                           int j,
 *                           double C,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":998
 * 
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_update(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_z_diff, double __pyx_v_C, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, double *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_L_new) {
  int __pyx_v_i;
  int __pyx_v_ii;
  double __pyx_v_exppred;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  __Pyx_RefNannySetupContext("update", 0);

  /* "lightning/impl/primal_cd_fast.pyx":1012
 * 
 *         # New objective value
 *         L_new[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L_new[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":1014
 *         L_new[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             b[i] /= exp(z_diff * data[ii] * y[i])
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":1015
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             b[i] /= exp(z_diff * data[ii] * y[i])
 *             exppred = 1 + 1 / b[i]
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":1016
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             b[i] /= exp(z_diff * data[ii] * y[i])             # <<<<<<<<<<<<<<
 *             exppred = 1 + 1 / b[i]
 *             L_new[0] += C * log(exppred)
 */
    __pyx_t_3 = __pyx_v_i;
    (__pyx_v_b[__pyx_t_3]) = ((__pyx_v_b[__pyx_t_3]) / exp(((__pyx_v_z_diff * (__pyx_v_data[__pyx_v_ii])) * (__pyx_v_y[__pyx_v_i]))));

    /* "lightning/impl/primal_cd_fast.pyx":1017
 *             i = indices[ii]
 *             b[i] /= exp(z_diff * data[ii] * y[i])
 *             exppred = 1 + 1 / b[i]             # <<<<<<<<<<<<<<
 *             L_new[0] += C * log(exppred)
 * 
 */
    __pyx_v_exppred = (1.0 + (1.0 / (__pyx_v_b[__pyx_v_i])));

    /* "lightning/impl/primal_cd_fast.pyx":1018
 *             b[i] /= exp(z_diff * data[ii] * y[i])
 *             exppred = 1 + 1 / b[i]
 *             L_new[0] += C * log(exppred)             # <<<<<<<<<<<<<<
 * 
 *     # Multiclass
 */
    __pyx_t_4 = 0;
    (__pyx_v_L_new[__pyx_t_4]) = ((__pyx_v_L_new[__pyx_t_4]) + (__pyx_v_C * log(__pyx_v_exppred)));
  }

  /* "lightning/impl/primal_cd_fast.pyx":998
 * 
 * 
 *     cdef void update(self,             # <<<<<<<<<<<<<<
 *                      int j,
 *                      double z_diff,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":1022
 *     # Multiclass
 * 
 *     cdef void derivatives_mc(self,             # <<<<<<<<<<<<<<
 *                              int j,
 *                              double C,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_derivatives_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, CYTHON_UNUSED int __pyx_v_j, double __pyx_v_C, int __pyx_v_n_samples, int __pyx_v_n_vectors, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, int *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_g, double *__pyx_v_Z, double *__pyx_v_L, double *__pyx_v_Lpp_max) {
  int __pyx_v_ii;
  int __pyx_v_i;
  int __pyx_v_k;
  double __pyx_v_Lpp;
  double __pyx_v_tmp;
  double __pyx_v_tmp2;
  double *__pyx_v_b_ptr;
  double __pyx_v_DBL_MAX;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  long __pyx_t_12;
  int __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("derivatives_mc", 0);

  /* "lightning/impl/primal_cd_fast.pyx":1040
 *         cdef double Lpp, tmp, tmp2
 *         cdef double* b_ptr
 *         cdef double DBL_MAX = np.finfo(np.double).max             # <<<<<<<<<<<<<<
 * 
 *         # Objective value
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_finfo); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_max); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_DBL_MAX = __pyx_t_6;

  /* "lightning/impl/primal_cd_fast.pyx":1043
 * 
 *         # Objective value
 *         L[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":1045
 *         L[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             b_ptr = b + i
 */
  __pyx_t_7 = __pyx_v_n_nz;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_ii = __pyx_t_8;

    /* "lightning/impl/primal_cd_fast.pyx":1046
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             b_ptr = b + i
 *             Z[i] = 0 # Normalization term
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":1047
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             b_ptr = b + i             # <<<<<<<<<<<<<<
 *             Z[i] = 0 # Normalization term
 *             for k in xrange(n_vectors):
 */
    __pyx_v_b_ptr = (__pyx_v_b + __pyx_v_i);

    /* "lightning/impl/primal_cd_fast.pyx":1048
 *             i = indices[ii]
 *             b_ptr = b + i
 *             Z[i] = 0 # Normalization term             # <<<<<<<<<<<<<<
 *             for k in xrange(n_vectors):
 *                 # b_ptr[0] = b[k, i]
 */
    (__pyx_v_Z[__pyx_v_i]) = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":1049
 *             b_ptr = b + i
 *             Z[i] = 0 # Normalization term
 *             for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                 # b_ptr[0] = b[k, i]
 *                 Z[i] += b_ptr[0]
 */
    __pyx_t_9 = __pyx_v_n_vectors;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_k = __pyx_t_10;

      /* "lightning/impl/primal_cd_fast.pyx":1051
 *             for k in xrange(n_vectors):
 *                 # b_ptr[0] = b[k, i]
 *                 Z[i] += b_ptr[0]             # <<<<<<<<<<<<<<
 *                 b_ptr += n_samples
 *             L[0] += C * log(Z[i])
 */
      __pyx_t_11 = __pyx_v_i;
      (__pyx_v_Z[__pyx_t_11]) = ((__pyx_v_Z[__pyx_t_11]) + (__pyx_v_b_ptr[0]));

      /* "lightning/impl/primal_cd_fast.pyx":1052
 *                 # b_ptr[0] = b[k, i]
 *                 Z[i] += b_ptr[0]
 *                 b_ptr += n_samples             # <<<<<<<<<<<<<<
 *             L[0] += C * log(Z[i])
 * 
 */
      __pyx_v_b_ptr = (__pyx_v_b_ptr + __pyx_v_n_samples);
    }

    /* "lightning/impl/primal_cd_fast.pyx":1053
 *                 Z[i] += b_ptr[0]
 *                 b_ptr += n_samples
 *             L[0] += C * log(Z[i])             # <<<<<<<<<<<<<<
 * 
 *         # Largest second derivative
 */
    __pyx_t_12 = 0;
    (__pyx_v_L[__pyx_t_12]) = ((__pyx_v_L[__pyx_t_12]) + (__pyx_v_C * log((__pyx_v_Z[__pyx_v_i]))));
  }

  /* "lightning/impl/primal_cd_fast.pyx":1056
 * 
 *         # Largest second derivative
 *         Lpp_max[0] = -DBL_MAX             # <<<<<<<<<<<<<<
 * 
 *         b_ptr = b
 */
  (__pyx_v_Lpp_max[0]) = (-__pyx_v_DBL_MAX);

  /* "lightning/impl/primal_cd_fast.pyx":1058
 *         Lpp_max[0] = -DBL_MAX
 * 
 *         b_ptr = b             # <<<<<<<<<<<<<<
 *         for k in xrange(n_vectors):
 *             # First derivatives (k th element of the partial gradient)
 */
  __pyx_v_b_ptr = __pyx_v_b;

  /* "lightning/impl/primal_cd_fast.pyx":1059
 * 
 *         b_ptr = b
 *         for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *             # First derivatives (k th element of the partial gradient)
 *             g[k] = 0
 */
  __pyx_t_7 = __pyx_v_n_vectors;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_k = __pyx_t_8;

    /* "lightning/impl/primal_cd_fast.pyx":1061
 *         for k in xrange(n_vectors):
 *             # First derivatives (k th element of the partial gradient)
 *             g[k] = 0             # <<<<<<<<<<<<<<
 *             # Second derivative
 *             Lpp = 0
 */
    (__pyx_v_g[__pyx_v_k]) = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":1063
 *             g[k] = 0
 *             # Second derivative
 *             Lpp = 0             # <<<<<<<<<<<<<<
 * 
 *             for ii in xrange(n_nz):
 */
    __pyx_v_Lpp = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":1065
 *             Lpp = 0
 * 
 *             for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *                 i = indices[ii]
 * 
 */
    __pyx_t_9 = __pyx_v_n_nz;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_ii = __pyx_t_10;

      /* "lightning/impl/primal_cd_fast.pyx":1066
 * 
 *             for ii in xrange(n_nz):
 *                 i = indices[ii]             # <<<<<<<<<<<<<<
 * 
 *                 if Z[i] == 0:
 */
      __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

      /* "lightning/impl/primal_cd_fast.pyx":1068
 *                 i = indices[ii]
 * 
 *                 if Z[i] == 0:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      __pyx_t_13 = (((__pyx_v_Z[__pyx_v_i]) == 0.0) != 0);
      if (__pyx_t_13) {

        /* "lightning/impl/primal_cd_fast.pyx":1069
 * 
 *                 if Z[i] == 0:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 # b_ptr[i] = b[k, i]
 */
        goto __pyx_L9_continue;

        /* "lightning/impl/primal_cd_fast.pyx":1068
 *                 i = indices[ii]
 * 
 *                 if Z[i] == 0:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":1072
 * 
 *                 # b_ptr[i] = b[k, i]
 *                 tmp = b_ptr[i] / Z[i]             # <<<<<<<<<<<<<<
 *                 tmp2 = data[ii] * C
 *                 Lpp += tmp2 * data[ii] * tmp * (1 - tmp)
 */
      __pyx_v_tmp = ((__pyx_v_b_ptr[__pyx_v_i]) / (__pyx_v_Z[__pyx_v_i]));

      /* "lightning/impl/primal_cd_fast.pyx":1073
 *                 # b_ptr[i] = b[k, i]
 *                 tmp = b_ptr[i] / Z[i]
 *                 tmp2 = data[ii] * C             # <<<<<<<<<<<<<<
 *                 Lpp += tmp2 * data[ii] * tmp * (1 - tmp)
 * 
 */
      __pyx_v_tmp2 = ((__pyx_v_data[__pyx_v_ii]) * __pyx_v_C);

      /* "lightning/impl/primal_cd_fast.pyx":1074
 *                 tmp = b_ptr[i] / Z[i]
 *                 tmp2 = data[ii] * C
 *                 Lpp += tmp2 * data[ii] * tmp * (1 - tmp)             # <<<<<<<<<<<<<<
 * 
 *                 if k == y[i]:
 */
      __pyx_v_Lpp = (__pyx_v_Lpp + (((__pyx_v_tmp2 * (__pyx_v_data[__pyx_v_ii])) * __pyx_v_tmp) * (1.0 - __pyx_v_tmp)));

      /* "lightning/impl/primal_cd_fast.pyx":1076
 *                 Lpp += tmp2 * data[ii] * tmp * (1 - tmp)
 * 
 *                 if k == y[i]:             # <<<<<<<<<<<<<<
 *                     tmp -= 1
 * 
 */
      __pyx_t_13 = ((__pyx_v_k == (__pyx_v_y[__pyx_v_i])) != 0);
      if (__pyx_t_13) {

        /* "lightning/impl/primal_cd_fast.pyx":1077
 * 
 *                 if k == y[i]:
 *                     tmp -= 1             # <<<<<<<<<<<<<<
 * 
 *                 g[k] += tmp * tmp2
 */
        __pyx_v_tmp = (__pyx_v_tmp - 1.0);

        /* "lightning/impl/primal_cd_fast.pyx":1076
 *                 Lpp += tmp2 * data[ii] * tmp * (1 - tmp)
 * 
 *                 if k == y[i]:             # <<<<<<<<<<<<<<
 *                     tmp -= 1
 * 
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":1079
 *                     tmp -= 1
 * 
 *                 g[k] += tmp * tmp2             # <<<<<<<<<<<<<<
 * 
 *             Lpp_max[0] = max(Lpp, Lpp_max[0])
 */
      __pyx_t_11 = __pyx_v_k;
      (__pyx_v_g[__pyx_t_11]) = ((__pyx_v_g[__pyx_t_11]) + (__pyx_v_tmp * __pyx_v_tmp2));
      __pyx_L9_continue:;
    }

    /* "lightning/impl/primal_cd_fast.pyx":1081
 *                 g[k] += tmp * tmp2
 * 
 *             Lpp_max[0] = max(Lpp, Lpp_max[0])             # <<<<<<<<<<<<<<
 *             b_ptr += n_samples
 * 
 */
    __pyx_t_6 = (__pyx_v_Lpp_max[0]);
    __pyx_t_14 = __pyx_v_Lpp;
    if (((__pyx_t_6 > __pyx_t_14) != 0)) {
      __pyx_t_15 = __pyx_t_6;
    } else {
      __pyx_t_15 = __pyx_t_14;
    }
    (__pyx_v_Lpp_max[0]) = __pyx_t_15;

    /* "lightning/impl/primal_cd_fast.pyx":1082
 * 
 *             Lpp_max[0] = max(Lpp, Lpp_max[0])
 *             b_ptr += n_samples             # <<<<<<<<<<<<<<
 * 
 *         Lpp_max[0] = min(max(Lpp_max[0], LOWER), UPPER)
 */
    __pyx_v_b_ptr = (__pyx_v_b_ptr + __pyx_v_n_samples);
  }

  /* "lightning/impl/primal_cd_fast.pyx":1084
 *             b_ptr += n_samples
 * 
 *         Lpp_max[0] = min(max(Lpp_max[0], LOWER), UPPER)             # <<<<<<<<<<<<<<
 * 
 *     cdef void update_mc(self,
 */
  __pyx_t_15 = 1000000000.0;
  __pyx_t_6 = 0.01;
  __pyx_t_14 = (__pyx_v_Lpp_max[0]);
  if (((__pyx_t_6 > __pyx_t_14) != 0)) {
    __pyx_t_16 = __pyx_t_6;
  } else {
    __pyx_t_16 = __pyx_t_14;
  }
  __pyx_t_6 = __pyx_t_16;
  if (((__pyx_t_15 < __pyx_t_6) != 0)) {
    __pyx_t_16 = __pyx_t_15;
  } else {
    __pyx_t_16 = __pyx_t_6;
  }
  (__pyx_v_Lpp_max[0]) = __pyx_t_16;

  /* "lightning/impl/primal_cd_fast.pyx":1022
 *     # Multiclass
 * 
 *     cdef void derivatives_mc(self,             # <<<<<<<<<<<<<<
 *                              int j,
 *                              double C,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.Log.derivatives_mc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":1086
 *         Lpp_max[0] = min(max(Lpp_max[0], LOWER), UPPER)
 * 
 *     cdef void update_mc(self,             # <<<<<<<<<<<<<<
 *                         double C,
 *                         int n_samples,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_update_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, double __pyx_v_C, int __pyx_v_n_samples, int __pyx_v_n_vectors, int *__pyx_v_indices, double *__pyx_v_data, int __pyx_v_n_nz, int *__pyx_v_y, double *__pyx_v_b, double *__pyx_v_d, double *__pyx_v_d_old, double *__pyx_v_Z, double *__pyx_v_L_new) {
  int __pyx_v_i;
  int __pyx_v_ii;
  int __pyx_v_k;
  double __pyx_v_tmp;
  double *__pyx_v_b_ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("update_mc", 0);

  /* "lightning/impl/primal_cd_fast.pyx":1104
 * 
 *         # New objective value
 *         L_new[0] = 0             # <<<<<<<<<<<<<<
 * 
 *         for ii in xrange(n_nz):
 */
  (__pyx_v_L_new[0]) = 0.0;

  /* "lightning/impl/primal_cd_fast.pyx":1106
 *         L_new[0] = 0
 * 
 *         for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *             i = indices[ii]
 *             b_ptr = b + i
 */
  __pyx_t_1 = __pyx_v_n_nz;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_ii = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":1107
 * 
 *         for ii in xrange(n_nz):
 *             i = indices[ii]             # <<<<<<<<<<<<<<
 *             b_ptr = b + i
 *             tmp = d_old[y[i]] - d[y[i]]
 */
    __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

    /* "lightning/impl/primal_cd_fast.pyx":1108
 *         for ii in xrange(n_nz):
 *             i = indices[ii]
 *             b_ptr = b + i             # <<<<<<<<<<<<<<
 *             tmp = d_old[y[i]] - d[y[i]]
 *             Z[i] = 0
 */
    __pyx_v_b_ptr = (__pyx_v_b + __pyx_v_i);

    /* "lightning/impl/primal_cd_fast.pyx":1109
 *             i = indices[ii]
 *             b_ptr = b + i
 *             tmp = d_old[y[i]] - d[y[i]]             # <<<<<<<<<<<<<<
 *             Z[i] = 0
 * 
 */
    __pyx_v_tmp = ((__pyx_v_d_old[(__pyx_v_y[__pyx_v_i])]) - (__pyx_v_d[(__pyx_v_y[__pyx_v_i])]));

    /* "lightning/impl/primal_cd_fast.pyx":1110
 *             b_ptr = b + i
 *             tmp = d_old[y[i]] - d[y[i]]
 *             Z[i] = 0             # <<<<<<<<<<<<<<
 * 
 *             for k in xrange(n_vectors):
 */
    (__pyx_v_Z[__pyx_v_i]) = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":1112
 *             Z[i] = 0
 * 
 *             for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                 # b_ptr[0] = b[k, i]
 *                 if y[i] != k:
 */
    __pyx_t_3 = __pyx_v_n_vectors;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_k = __pyx_t_4;

      /* "lightning/impl/primal_cd_fast.pyx":1114
 *             for k in xrange(n_vectors):
 *                 # b_ptr[0] = b[k, i]
 *                 if y[i] != k:             # <<<<<<<<<<<<<<
 *                     b_ptr[0] *= exp((d[k] - d_old[k] + tmp) * data[ii])
 *                 Z[i] += b_ptr[0]
 */
      __pyx_t_5 = (((__pyx_v_y[__pyx_v_i]) != __pyx_v_k) != 0);
      if (__pyx_t_5) {

        /* "lightning/impl/primal_cd_fast.pyx":1115
 *                 # b_ptr[0] = b[k, i]
 *                 if y[i] != k:
 *                     b_ptr[0] *= exp((d[k] - d_old[k] + tmp) * data[ii])             # <<<<<<<<<<<<<<
 *                 Z[i] += b_ptr[0]
 *                 b_ptr += n_samples
 */
        __pyx_t_6 = 0;
        (__pyx_v_b_ptr[__pyx_t_6]) = ((__pyx_v_b_ptr[__pyx_t_6]) * exp(((((__pyx_v_d[__pyx_v_k]) - (__pyx_v_d_old[__pyx_v_k])) + __pyx_v_tmp) * (__pyx_v_data[__pyx_v_ii]))));

        /* "lightning/impl/primal_cd_fast.pyx":1114
 *             for k in xrange(n_vectors):
 *                 # b_ptr[0] = b[k, i]
 *                 if y[i] != k:             # <<<<<<<<<<<<<<
 *                     b_ptr[0] *= exp((d[k] - d_old[k] + tmp) * data[ii])
 *                 Z[i] += b_ptr[0]
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":1116
 *                 if y[i] != k:
 *                     b_ptr[0] *= exp((d[k] - d_old[k] + tmp) * data[ii])
 *                 Z[i] += b_ptr[0]             # <<<<<<<<<<<<<<
 *                 b_ptr += n_samples
 * 
 */
      __pyx_t_7 = __pyx_v_i;
      (__pyx_v_Z[__pyx_t_7]) = ((__pyx_v_Z[__pyx_t_7]) + (__pyx_v_b_ptr[0]));

      /* "lightning/impl/primal_cd_fast.pyx":1117
 *                     b_ptr[0] *= exp((d[k] - d_old[k] + tmp) * data[ii])
 *                 Z[i] += b_ptr[0]
 *                 b_ptr += n_samples             # <<<<<<<<<<<<<<
 * 
 *             L_new[0] += C * log(Z[i])
 */
      __pyx_v_b_ptr = (__pyx_v_b_ptr + __pyx_v_n_samples);
    }

    /* "lightning/impl/primal_cd_fast.pyx":1119
 *                 b_ptr += n_samples
 * 
 *             L_new[0] += C * log(Z[i])             # <<<<<<<<<<<<<<
 * 
 *     cdef void recompute(self,
 */
    __pyx_t_6 = 0;
    (__pyx_v_L_new[__pyx_t_6]) = ((__pyx_v_L_new[__pyx_t_6]) + (__pyx_v_C * log((__pyx_v_Z[__pyx_v_i]))));
  }

  /* "lightning/impl/primal_cd_fast.pyx":1086
 *         Lpp_max[0] = min(max(Lpp_max[0], LOWER), UPPER)
 * 
 *     cdef void update_mc(self,             # <<<<<<<<<<<<<<
 *                         double C,
 *                         int n_samples,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":1121
 *             L_new[0] += C * log(Z[i])
 * 
 *     cdef void recompute(self,             # <<<<<<<<<<<<<<
 *                         ColumnDataset X,
 *                         double* y,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_recompute(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double *__pyx_v_y, double *__pyx_v_w, double *__pyx_v_b) {
  int __pyx_v_n_samples;
  int __pyx_v_n_features;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_ii;
  double *__pyx_v_data;
  int *__pyx_v_indices;
  int __pyx_v_n_nz;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("recompute", 0);

  /* "lightning/impl/primal_cd_fast.pyx":1126
 *                         double* w,
 *                         double* b):
 *         cdef int n_samples = X.get_n_samples()             # <<<<<<<<<<<<<<
 *         cdef int n_features = X.get_n_features()
 *         cdef int i, j, ii
 */
  __pyx_v_n_samples = ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->__pyx_base.get_n_samples(((struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset *)__pyx_v_X), 0);

  /* "lightning/impl/primal_cd_fast.pyx":1127
 *                         double* b):
 *         cdef int n_samples = X.get_n_samples()
 *         cdef int n_features = X.get_n_features()             # <<<<<<<<<<<<<<
 *         cdef int i, j, ii
 *         cdef double tmp
 */
  __pyx_v_n_features = ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->__pyx_base.get_n_features(((struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset *)__pyx_v_X), 0);

  /* "lightning/impl/primal_cd_fast.pyx":1136
 *         cdef int n_nz
 * 
 *         for i in xrange(n_samples):             # <<<<<<<<<<<<<<
 *             b[i] = 0
 * 
 */
  __pyx_t_1 = __pyx_v_n_samples;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":1137
 * 
 *         for i in xrange(n_samples):
 *             b[i] = 0             # <<<<<<<<<<<<<<
 * 
 *         for j in xrange(n_features):
 */
    (__pyx_v_b[__pyx_v_i]) = 0.0;
  }

  /* "lightning/impl/primal_cd_fast.pyx":1139
 *             b[i] = 0
 * 
 *         for j in xrange(n_features):             # <<<<<<<<<<<<<<
 *             X.get_column_ptr(j, &indices, &data, &n_nz)
 * 
 */
  __pyx_t_1 = __pyx_v_n_features;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_j = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":1140
 * 
 *         for j in xrange(n_features):
 *             X.get_column_ptr(j, &indices, &data, &n_nz)             # <<<<<<<<<<<<<<
 * 
 *             for ii in xrange(n_nz):
 */
    ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->get_column_ptr(__pyx_v_X, __pyx_v_j, (&__pyx_v_indices), (&__pyx_v_data), (&__pyx_v_n_nz));

    /* "lightning/impl/primal_cd_fast.pyx":1142
 *             X.get_column_ptr(j, &indices, &data, &n_nz)
 * 
 *             for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *                 i = indices[ii]
 *                 b[i] += data[ii] * w[j]
 */
    __pyx_t_3 = __pyx_v_n_nz;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_ii = __pyx_t_4;

      /* "lightning/impl/primal_cd_fast.pyx":1143
 * 
 *             for ii in xrange(n_nz):
 *                 i = indices[ii]             # <<<<<<<<<<<<<<
 *                 b[i] += data[ii] * w[j]
 * 
 */
      __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

      /* "lightning/impl/primal_cd_fast.pyx":1144
 *             for ii in xrange(n_nz):
 *                 i = indices[ii]
 *                 b[i] += data[ii] * w[j]             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(n_samples):
 */
      __pyx_t_5 = __pyx_v_i;
      (__pyx_v_b[__pyx_t_5]) = ((__pyx_v_b[__pyx_t_5]) + ((__pyx_v_data[__pyx_v_ii]) * (__pyx_v_w[__pyx_v_j])));
    }
  }

  /* "lightning/impl/primal_cd_fast.pyx":1146
 *                 b[i] += data[ii] * w[j]
 * 
 *         for i in xrange(n_samples):             # <<<<<<<<<<<<<<
 *             b[i] = exp(y[i] * b[i])
 * 
 */
  __pyx_t_1 = __pyx_v_n_samples;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":1147
 * 
 *         for i in xrange(n_samples):
 *             b[i] = exp(y[i] * b[i])             # <<<<<<<<<<<<<<
 * 
 *     cdef void recompute_mc(self,
 */
    (__pyx_v_b[__pyx_v_i]) = exp(((__pyx_v_y[__pyx_v_i]) * (__pyx_v_b[__pyx_v_i])));
  }

  /* "lightning/impl/primal_cd_fast.pyx":1121
 *             L_new[0] += C * log(Z[i])
 * 
 *     cdef void recompute(self,             # <<<<<<<<<<<<<<
 *                         ColumnDataset X,
 *                         double* y,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":1149
 *             b[i] = exp(y[i] * b[i])
 * 
 *     cdef void recompute_mc(self,             # <<<<<<<<<<<<<<
 *                            int n_vectors,
 *                            ColumnDataset X,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_recompute_mc(CYTHON_UNUSED struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, int *__pyx_v_y, PyArrayObject *__pyx_v_w, PyArrayObject *__pyx_v_b) {
  int __pyx_v_n_samples;
  int __pyx_v_n_features;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_k2;
  int __pyx_v_ii;
  double __pyx_v_tmp;
  double *__pyx_v_data;
  int *__pyx_v_indices;
  int __pyx_v_n_nz;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_b;
  __Pyx_Buffer __pyx_pybuffer_b;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_w;
  __Pyx_Buffer __pyx_pybuffer_w;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("recompute_mc", 0);
  __pyx_pybuffer_w.pybuffer.buf = NULL;
  __pyx_pybuffer_w.refcount = 0;
  __pyx_pybuffernd_w.data = NULL;
  __pyx_pybuffernd_w.rcbuffer = &__pyx_pybuffer_w;
  __pyx_pybuffer_b.pybuffer.buf = NULL;
  __pyx_pybuffer_b.refcount = 0;
  __pyx_pybuffernd_b.data = NULL;
  __pyx_pybuffernd_b.rcbuffer = &__pyx_pybuffer_b;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_w.rcbuffer->pybuffer, (PyObject*)__pyx_v_w, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_w.diminfo[0].strides = __pyx_pybuffernd_w.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_w.diminfo[0].shape = __pyx_pybuffernd_w.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_w.diminfo[1].strides = __pyx_pybuffernd_w.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_w.diminfo[1].shape = __pyx_pybuffernd_w.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_b.rcbuffer->pybuffer, (PyObject*)__pyx_v_b, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_b.diminfo[0].strides = __pyx_pybuffernd_b.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_b.diminfo[0].shape = __pyx_pybuffernd_b.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_b.diminfo[1].strides = __pyx_pybuffernd_b.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_b.diminfo[1].shape = __pyx_pybuffernd_b.rcbuffer->pybuffer.shape[1];

  /* "lightning/impl/primal_cd_fast.pyx":1155
 *                            np.ndarray[double, ndim=2, mode='c'] w,
 *                            np.ndarray[double, ndim=2, mode='c'] b):
 *         cdef int n_samples = X.get_n_samples()             # <<<<<<<<<<<<<<
 *         cdef int n_features = X.get_n_features()
 *         cdef int i, j, k, k2, ii
 */
  __pyx_v_n_samples = ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->__pyx_base.get_n_samples(((struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset *)__pyx_v_X), 0);

  /* "lightning/impl/primal_cd_fast.pyx":1156
 *                            np.ndarray[double, ndim=2, mode='c'] b):
 *         cdef int n_samples = X.get_n_samples()
 *         cdef int n_features = X.get_n_features()             # <<<<<<<<<<<<<<
 *         cdef int i, j, k, k2, ii
 *         cdef double tmp
 */
  __pyx_v_n_features = ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->__pyx_base.get_n_features(((struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset *)__pyx_v_X), 0);

  /* "lightning/impl/primal_cd_fast.pyx":1165
 *         cdef int n_nz
 * 
 *         for i in xrange(n_samples):             # <<<<<<<<<<<<<<
 *             for k in xrange(n_vectors):
 *                 b[k, i] = 0
 */
  __pyx_t_1 = __pyx_v_n_samples;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":1166
 * 
 *         for i in xrange(n_samples):
 *             for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                 b[k, i] = 0
 * 
 */
    __pyx_t_3 = __pyx_v_n_vectors;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_k = __pyx_t_4;

      /* "lightning/impl/primal_cd_fast.pyx":1167
 *         for i in xrange(n_samples):
 *             for k in xrange(n_vectors):
 *                 b[k, i] = 0             # <<<<<<<<<<<<<<
 * 
 *         for j in xrange(n_features):
 */
      __pyx_t_5 = __pyx_v_k;
      __pyx_t_6 = __pyx_v_i;
      *__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_b.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_b.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_b.diminfo[1].strides) = 0.0;
    }
  }

  /* "lightning/impl/primal_cd_fast.pyx":1169
 *                 b[k, i] = 0
 * 
 *         for j in xrange(n_features):             # <<<<<<<<<<<<<<
 *             X.get_column_ptr(j, &indices, &data, &n_nz)
 * 
 */
  __pyx_t_1 = __pyx_v_n_features;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_j = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":1170
 * 
 *         for j in xrange(n_features):
 *             X.get_column_ptr(j, &indices, &data, &n_nz)             # <<<<<<<<<<<<<<
 * 
 *             for ii in xrange(n_nz):
 */
    ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->get_column_ptr(__pyx_v_X, __pyx_v_j, (&__pyx_v_indices), (&__pyx_v_data), (&__pyx_v_n_nz));

    /* "lightning/impl/primal_cd_fast.pyx":1172
 *             X.get_column_ptr(j, &indices, &data, &n_nz)
 * 
 *             for ii in xrange(n_nz):             # <<<<<<<<<<<<<<
 *                 i = indices[ii]
 * 
 */
    __pyx_t_3 = __pyx_v_n_nz;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_ii = __pyx_t_4;

      /* "lightning/impl/primal_cd_fast.pyx":1173
 * 
 *             for ii in xrange(n_nz):
 *                 i = indices[ii]             # <<<<<<<<<<<<<<
 * 
 *                 for k in xrange(n_vectors):
 */
      __pyx_v_i = (__pyx_v_indices[__pyx_v_ii]);

      /* "lightning/impl/primal_cd_fast.pyx":1175
 *                 i = indices[ii]
 * 
 *                 for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                     tmp = w[k, j] * data[ii]
 *                     if k == y[i]:
 */
      __pyx_t_7 = __pyx_v_n_vectors;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
        __pyx_v_k = __pyx_t_8;

        /* "lightning/impl/primal_cd_fast.pyx":1176
 * 
 *                 for k in xrange(n_vectors):
 *                     tmp = w[k, j] * data[ii]             # <<<<<<<<<<<<<<
 *                     if k == y[i]:
 *                         for k2 in xrange(n_vectors):
 */
        __pyx_t_9 = __pyx_v_k;
        __pyx_t_10 = __pyx_v_j;
        __pyx_v_tmp = ((*__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_w.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_w.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_w.diminfo[1].strides)) * (__pyx_v_data[__pyx_v_ii]));

        /* "lightning/impl/primal_cd_fast.pyx":1177
 *                 for k in xrange(n_vectors):
 *                     tmp = w[k, j] * data[ii]
 *                     if k == y[i]:             # <<<<<<<<<<<<<<
 *                         for k2 in xrange(n_vectors):
 *                             if k2 != y[i]:
 */
        __pyx_t_11 = ((__pyx_v_k == (__pyx_v_y[__pyx_v_i])) != 0);
        if (__pyx_t_11) {

          /* "lightning/impl/primal_cd_fast.pyx":1178
 *                     tmp = w[k, j] * data[ii]
 *                     if k == y[i]:
 *                         for k2 in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                             if k2 != y[i]:
 *                                 b[k2, i] -= tmp
 */
          __pyx_t_12 = __pyx_v_n_vectors;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
            __pyx_v_k2 = __pyx_t_13;

            /* "lightning/impl/primal_cd_fast.pyx":1179
 *                     if k == y[i]:
 *                         for k2 in xrange(n_vectors):
 *                             if k2 != y[i]:             # <<<<<<<<<<<<<<
 *                                 b[k2, i] -= tmp
 *                     else:
 */
            __pyx_t_11 = ((__pyx_v_k2 != (__pyx_v_y[__pyx_v_i])) != 0);
            if (__pyx_t_11) {

              /* "lightning/impl/primal_cd_fast.pyx":1180
 *                         for k2 in xrange(n_vectors):
 *                             if k2 != y[i]:
 *                                 b[k2, i] -= tmp             # <<<<<<<<<<<<<<
 *                     else:
 *                         b[k, i] += tmp
 */
              __pyx_t_14 = __pyx_v_k2;
              __pyx_t_15 = __pyx_v_i;
              *__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_b.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_b.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_b.diminfo[1].strides) -= __pyx_v_tmp;

              /* "lightning/impl/primal_cd_fast.pyx":1179
 *                     if k == y[i]:
 *                         for k2 in xrange(n_vectors):
 *                             if k2 != y[i]:             # <<<<<<<<<<<<<<
 *                                 b[k2, i] -= tmp
 *                     else:
 */
            }
          }

          /* "lightning/impl/primal_cd_fast.pyx":1177
 *                 for k in xrange(n_vectors):
 *                     tmp = w[k, j] * data[ii]
 *                     if k == y[i]:             # <<<<<<<<<<<<<<
 *                         for k2 in xrange(n_vectors):
 *                             if k2 != y[i]:
 */
          goto __pyx_L13;
        }

        /* "lightning/impl/primal_cd_fast.pyx":1182
 *                                 b[k2, i] -= tmp
 *                     else:
 *                         b[k, i] += tmp             # <<<<<<<<<<<<<<
 * 
 *         for i in xrange(n_samples):
 */
        /*else*/ {
          __pyx_t_16 = __pyx_v_k;
          __pyx_t_17 = __pyx_v_i;
          *__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_b.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_b.diminfo[0].strides, __pyx_t_17, __pyx_pybuffernd_b.diminfo[1].strides) += __pyx_v_tmp;
        }
        __pyx_L13:;
      }
    }
  }

  /* "lightning/impl/primal_cd_fast.pyx":1184
 *                         b[k, i] += tmp
 * 
 *         for i in xrange(n_samples):             # <<<<<<<<<<<<<<
 *             for k in xrange(n_vectors):
 *                 if k != y[i]:
 */
  __pyx_t_1 = __pyx_v_n_samples;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "lightning/impl/primal_cd_fast.pyx":1185
 * 
 *         for i in xrange(n_samples):
 *             for k in xrange(n_vectors):             # <<<<<<<<<<<<<<
 *                 if k != y[i]:
 *                     b[k, i] = exp(b[k, i])
 */
    __pyx_t_3 = __pyx_v_n_vectors;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_k = __pyx_t_4;

      /* "lightning/impl/primal_cd_fast.pyx":1186
 *         for i in xrange(n_samples):
 *             for k in xrange(n_vectors):
 *                 if k != y[i]:             # <<<<<<<<<<<<<<
 *                     b[k, i] = exp(b[k, i])
 *                 else:
 */
      __pyx_t_11 = ((__pyx_v_k != (__pyx_v_y[__pyx_v_i])) != 0);
      if (__pyx_t_11) {

        /* "lightning/impl/primal_cd_fast.pyx":1187
 *             for k in xrange(n_vectors):
 *                 if k != y[i]:
 *                     b[k, i] = exp(b[k, i])             # <<<<<<<<<<<<<<
 *                 else:
 *                     b[k, i] = 1
 */
        __pyx_t_18 = __pyx_v_k;
        __pyx_t_19 = __pyx_v_i;
        __pyx_t_20 = __pyx_v_k;
        __pyx_t_21 = __pyx_v_i;
        *__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_b.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_b.diminfo[0].strides, __pyx_t_21, __pyx_pybuffernd_b.diminfo[1].strides) = exp((*__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_b.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_b.diminfo[0].strides, __pyx_t_19, __pyx_pybuffernd_b.diminfo[1].strides)));

        /* "lightning/impl/primal_cd_fast.pyx":1186
 *         for i in xrange(n_samples):
 *             for k in xrange(n_vectors):
 *                 if k != y[i]:             # <<<<<<<<<<<<<<
 *                     b[k, i] = exp(b[k, i])
 *                 else:
 */
        goto __pyx_L21;
      }

      /* "lightning/impl/primal_cd_fast.pyx":1189
 *                     b[k, i] = exp(b[k, i])
 *                 else:
 *                     b[k, i] = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef void lipschitz_constant_mt(self,
 */
      /*else*/ {
        __pyx_t_22 = __pyx_v_k;
        __pyx_t_23 = __pyx_v_i;
        *__Pyx_BufPtrCContig2d(double *, __pyx_pybuffernd_b.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_b.diminfo[0].strides, __pyx_t_23, __pyx_pybuffernd_b.diminfo[1].strides) = 1.0;
      }
      __pyx_L21:;
    }
  }

  /* "lightning/impl/primal_cd_fast.pyx":1149
 *             b[i] = exp(y[i] * b[i])
 * 
 *     cdef void recompute_mc(self,             # <<<<<<<<<<<<<<
 *                            int n_vectors,
 *                            ColumnDataset X,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_b.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_w.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("lightning.impl.primal_cd_fast.Log.recompute_mc", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_b.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_w.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":1191
 *                     b[k, i] = 1
 * 
 *     cdef void lipschitz_constant_mt(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_lipschitz_constant_mt(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double __pyx_v_C, double *__pyx_v_out) {
  double __pyx_v_scale;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lipschitz_constant_mt", 0);

  /* "lightning/impl/primal_cd_fast.pyx":1197
 *                                     double* out):
 * 
 *         cdef double scale = 0.25 * C * n_vectors             # <<<<<<<<<<<<<<
 *         self._lipschitz_constant(X, scale, out)
 * 
 */
  __pyx_v_scale = ((0.25 * __pyx_v_C) * __pyx_v_n_vectors);

  /* "lightning/impl/primal_cd_fast.pyx":1198
 * 
 *         cdef double scale = 0.25 * C * n_vectors
 *         self._lipschitz_constant(X, scale, out)             # <<<<<<<<<<<<<<
 * 
 *     cdef void lipschitz_constant_mc(self,
 */
  ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_Log *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._lipschitz_constant(((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self), __pyx_v_X, __pyx_v_scale, __pyx_v_out);

  /* "lightning/impl/primal_cd_fast.pyx":1191
 *                     b[k, i] = 1
 * 
 *     cdef void lipschitz_constant_mt(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":1200
 *         self._lipschitz_constant(X, scale, out)
 * 
 *     cdef void lipschitz_constant_mc(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

static void __pyx_f_9lightning_4impl_14primal_cd_fast_3Log_lipschitz_constant_mc(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *__pyx_v_self, CYTHON_UNUSED int __pyx_v_n_vectors, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, double __pyx_v_C, double *__pyx_v_out) {
  double __pyx_v_scale;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lipschitz_constant_mc", 0);

  /* "lightning/impl/primal_cd_fast.pyx":1206
 *                                     double* out):
 * 
 *         cdef double scale = C * 0.5             # <<<<<<<<<<<<<<
 *         self._lipschitz_constant(X, scale, out)
 * 
 */
  __pyx_v_scale = (__pyx_v_C * 0.5);

  /* "lightning/impl/primal_cd_fast.pyx":1207
 * 
 *         cdef double scale = C * 0.5
 *         self._lipschitz_constant(X, scale, out)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_Log *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._lipschitz_constant(((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_self), __pyx_v_X, __pyx_v_scale, __pyx_v_out);

  /* "lightning/impl/primal_cd_fast.pyx":1200
 *         self._lipschitz_constant(X, scale, out)
 * 
 *     cdef void lipschitz_constant_mc(self,             # <<<<<<<<<<<<<<
 *                                     int n_vectors,
 *                                     ColumnDataset X,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "lightning/impl/primal_cd_fast.pyx":1210
 * 
 * 
 * def _primal_cd(self,             # <<<<<<<<<<<<<<
 *                np.ndarray[double, ndim=2, mode='c'] w,
 *                np.ndarray[double, ndim=2, mode='c'] b,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9lightning_4impl_14primal_cd_fast_1_primal_cd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_9lightning_4impl_14primal_cd_fast_1_primal_cd = {"_primal_cd", (PyCFunction)__pyx_pw_9lightning_4impl_14primal_cd_fast_1_primal_cd, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9lightning_4impl_14primal_cd_fast_1_primal_cd(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyArrayObject *__pyx_v_w = 0;
  PyArrayObject *__pyx_v_b = 0;
  struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X = 0;
  PyArrayObject *__pyx_v_y = 0;
  PyArrayObject *__pyx_v_Y = 0;
  int __pyx_v_k;
  int __pyx_v_multiclass;
  PyArrayObject *__pyx_v_active_set = 0;
  int __pyx_v_penalty;
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_loss = 0;
  PyObject *__pyx_v_selection = 0;
  int __pyx_v_permute;
  PyObject *__pyx_v_termination = 0;
  double __pyx_v_C;
  double __pyx_v_alpha;
  int __pyx_v_max_iter;
  int __pyx_v_max_steps;
  int __pyx_v_shrinking;
  double __pyx_v_violation_init;
  struct __pyx_obj_9lightning_4impl_9randomkit_11random_fast_RandomState *__pyx_v_rs = 0;
  double __pyx_v_tol;
  PyObject *__pyx_v_callback = 0;
  int __pyx_v_n_calls;
  int __pyx_v_verbose;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_primal_cd (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_w,&__pyx_n_s_b,&__pyx_n_s_X,&__pyx_n_s_y,&__pyx_n_s_Y,&__pyx_n_s_k,&__pyx_n_s_multiclass,&__pyx_n_s_active_set,&__pyx_n_s_penalty,&__pyx_n_s_loss,&__pyx_n_s_selection,&__pyx_n_s_permute,&__pyx_n_s_termination,&__pyx_n_s_C,&__pyx_n_s_alpha,&__pyx_n_s_max_iter,&__pyx_n_s_max_steps,&__pyx_n_s_shrinking,&__pyx_n_s_violation_init,&__pyx_n_s_rs,&__pyx_n_s_tol,&__pyx_n_s_callback,&__pyx_n_s_n_calls,&__pyx_n_s_verbose,0};
    PyObject* values[25] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 25: values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_w)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_X)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_multiclass)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_active_set)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_penalty)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_loss)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 10); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 11:
        if (likely((values[11] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_selection)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 11); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 12:
        if (likely((values[12] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_permute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 12); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 13:
        if (likely((values[13] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_termination)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 13); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 14:
        if (likely((values[14] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_C)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 14); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 15:
        if (likely((values[15] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 15); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 16:
        if (likely((values[16] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_iter)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 16); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 17:
        if (likely((values[17] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_steps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 17); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 18:
        if (likely((values[18] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_shrinking)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 18); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 19:
        if (likely((values[19] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_violation_init)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 19); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 20:
        if (likely((values[20] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 20); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 21:
        if (likely((values[21] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 21); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 22:
        if (likely((values[22] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 22); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 23:
        if (likely((values[23] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_calls)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 23); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 24:
        if (likely((values[24] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verbose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, 24); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_primal_cd") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 25) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
      values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
      values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
      values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
      values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
      values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
      values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
      values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
      values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
      values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
      values[24] = PyTuple_GET_ITEM(__pyx_args, 24);
    }
    __pyx_v_self = values[0];
    __pyx_v_w = ((PyArrayObject *)values[1]);
    __pyx_v_b = ((PyArrayObject *)values[2]);
    __pyx_v_X = ((struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *)values[3]);
    __pyx_v_y = ((PyArrayObject *)values[4]);
    __pyx_v_Y = ((PyArrayObject *)values[5]);
    __pyx_v_k = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_k == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_multiclass = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_multiclass == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1217; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_active_set = ((PyArrayObject *)values[8]);
    __pyx_v_penalty = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_penalty == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_loss = ((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *)values[10]);
    __pyx_v_selection = values[11];
    __pyx_v_permute = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_permute == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1222; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_termination = values[13];
    __pyx_v_C = __pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_C == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[15]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_iter = __Pyx_PyInt_As_int(values[16]); if (unlikely((__pyx_v_max_iter == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1226; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_max_steps = __Pyx_PyInt_As_int(values[17]); if (unlikely((__pyx_v_max_steps == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1227; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_shrinking = __Pyx_PyInt_As_int(values[18]); if (unlikely((__pyx_v_shrinking == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_violation_init = __pyx_PyFloat_AsDouble(values[19]); if (unlikely((__pyx_v_violation_init == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1229; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rs = ((struct __pyx_obj_9lightning_4impl_9randomkit_11random_fast_RandomState *)values[20]);
    __pyx_v_tol = __pyx_PyFloat_AsDouble(values[21]); if (unlikely((__pyx_v_tol == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1231; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_callback = values[22];
    __pyx_v_n_calls = __Pyx_PyInt_As_int(values[23]); if (unlikely((__pyx_v_n_calls == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1233; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_verbose = __Pyx_PyInt_As_int(values[24]); if (unlikely((__pyx_v_verbose == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_primal_cd", 1, 25, 25, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("lightning.impl.primal_cd_fast._primal_cd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_w), __pyx_ptype_5numpy_ndarray, 1, "w", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_5numpy_ndarray, 1, "b", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_X), __pyx_ptype_9lightning_4impl_12dataset_fast_ColumnDataset, 1, "X", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Y), __pyx_ptype_5numpy_ndarray, 1, "Y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_active_set), __pyx_ptype_5numpy_ndarray, 1, "active_set", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_loss), __pyx_ptype_9lightning_4impl_14primal_cd_fast_LossFunction, 1, "loss", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rs), __pyx_ptype_9lightning_4impl_9randomkit_11random_fast_RandomState, 1, "rs", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_9lightning_4impl_14primal_cd_fast__primal_cd(__pyx_self, __pyx_v_self, __pyx_v_w, __pyx_v_b, __pyx_v_X, __pyx_v_y, __pyx_v_Y, __pyx_v_k, __pyx_v_multiclass, __pyx_v_active_set, __pyx_v_penalty, __pyx_v_loss, __pyx_v_selection, __pyx_v_permute, __pyx_v_termination, __pyx_v_C, __pyx_v_alpha, __pyx_v_max_iter, __pyx_v_max_steps, __pyx_v_shrinking, __pyx_v_violation_init, __pyx_v_rs, __pyx_v_tol, __pyx_v_callback, __pyx_v_n_calls, __pyx_v_verbose);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9lightning_4impl_14primal_cd_fast__primal_cd(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyArrayObject *__pyx_v_w, PyArrayObject *__pyx_v_b, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *__pyx_v_X, PyArrayObject *__pyx_v_y, PyArrayObject *__pyx_v_Y, int __pyx_v_k, int __pyx_v_multiclass, PyArrayObject *__pyx_v_active_set, int __pyx_v_penalty, struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *__pyx_v_loss, PyObject *__pyx_v_selection, int __pyx_v_permute, PyObject *__pyx_v_termination, double __pyx_v_C, double __pyx_v_alpha, int __pyx_v_max_iter, int __pyx_v_max_steps, int __pyx_v_shrinking, double __pyx_v_violation_init, struct __pyx_obj_9lightning_4impl_9randomkit_11random_fast_RandomState *__pyx_v_rs, double __pyx_v_tol, PyObject *__pyx_v_callback, int __pyx_v_n_calls, int __pyx_v_verbose) {
  int __pyx_v_n_samples;
  int __pyx_v_n_features;
  int __pyx_v_n_vectors;
  int __pyx_v_active_size;
  int __pyx_v_active_size_start;
  double __pyx_v_DBL_MAX;
  int __pyx_v_t;
  int __pyx_v_s;
  int __pyx_v_j;
  double __pyx_v_violation_max_old;
  double __pyx_v_violation_max;
  double __pyx_v_violation;
  double __pyx_v_violation_sum;
  int __pyx_v_check_violation_sum;
  int __pyx_v_check_violation_max;
  int __pyx_v_stop;
  int __pyx_v_has_callback;
  int __pyx_v_shrink;
  int __pyx_v_cyclic;
  int __pyx_v_uniform;
  PyArrayObject *__pyx_v_Lcst = 0;
  double *__pyx_v_b_ptr;
  double *__pyx_v_y_ptr;
  double *__pyx_v_w_ptr;
  int *__pyx_v_active_set_ptr;
  PyArrayObject *__pyx_v_g = 0;
  PyArrayObject *__pyx_v_d = 0;
  PyArrayObject *__pyx_v_d_old = 0;
  PyArrayObject *__pyx_v_buf = 0;
  double *__pyx_v_buf_ptr;
  CYTHON_UNUSED double __pyx_v_M;
  CYTHON_UNUSED double __pyx_v_m;
  PyObject *__pyx_v_ret = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_Lcst;
  __Pyx_Buffer __pyx_pybuffer_Lcst;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_Y;
  __Pyx_Buffer __pyx_pybuffer_Y;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_active_set;
  __Pyx_Buffer __pyx_pybuffer_active_set;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_b;
  __Pyx_Buffer __pyx_pybuffer_b;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_buf;
  __Pyx_Buffer __pyx_pybuffer_buf;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_d;
  __Pyx_Buffer __pyx_pybuffer_d;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_d_old;
  __Pyx_Buffer __pyx_pybuffer_d_old;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_g;
  __Pyx_Buffer __pyx_pybuffer_g;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_w;
  __Pyx_Buffer __pyx_pybuffer_w;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyArrayObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  double __pyx_t_22;
  double __pyx_t_23;
  int __pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_primal_cd", 0);
  __pyx_pybuffer_Lcst.pybuffer.buf = NULL;
  __pyx_pybuffer_Lcst.refcount = 0;
  __pyx_pybuffernd_Lcst.data = NULL;
  __pyx_pybuffernd_Lcst.rcbuffer = &__pyx_pybuffer_Lcst;
  __pyx_pybuffer_g.pybuffer.buf = NULL;
  __pyx_pybuffer_g.refcount = 0;
  __pyx_pybuffernd_g.data = NULL;
  __pyx_pybuffernd_g.rcbuffer = &__pyx_pybuffer_g;
  __pyx_pybuffer_d.pybuffer.buf = NULL;
  __pyx_pybuffer_d.refcount = 0;
  __pyx_pybuffernd_d.data = NULL;
  __pyx_pybuffernd_d.rcbuffer = &__pyx_pybuffer_d;
  __pyx_pybuffer_d_old.pybuffer.buf = NULL;
  __pyx_pybuffer_d_old.refcount = 0;
  __pyx_pybuffernd_d_old.data = NULL;
  __pyx_pybuffernd_d_old.rcbuffer = &__pyx_pybuffer_d_old;
  __pyx_pybuffer_buf.pybuffer.buf = NULL;
  __pyx_pybuffer_buf.refcount = 0;
  __pyx_pybuffernd_buf.data = NULL;
  __pyx_pybuffernd_buf.rcbuffer = &__pyx_pybuffer_buf;
  __pyx_pybuffer_w.pybuffer.buf = NULL;
  __pyx_pybuffer_w.refcount = 0;
  __pyx_pybuffernd_w.data = NULL;
  __pyx_pybuffernd_w.rcbuffer = &__pyx_pybuffer_w;
  __pyx_pybuffer_b.pybuffer.buf = NULL;
  __pyx_pybuffer_b.refcount = 0;
  __pyx_pybuffernd_b.data = NULL;
  __pyx_pybuffernd_b.rcbuffer = &__pyx_pybuffer_b;
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
  __pyx_pybuffer_Y.pybuffer.buf = NULL;
  __pyx_pybuffer_Y.refcount = 0;
  __pyx_pybuffernd_Y.data = NULL;
  __pyx_pybuffernd_Y.rcbuffer = &__pyx_pybuffer_Y;
  __pyx_pybuffer_active_set.pybuffer.buf = NULL;
  __pyx_pybuffer_active_set.refcount = 0;
  __pyx_pybuffernd_active_set.data = NULL;
  __pyx_pybuffernd_active_set.rcbuffer = &__pyx_pybuffer_active_set;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_w.rcbuffer->pybuffer, (PyObject*)__pyx_v_w, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_w.diminfo[0].strides = __pyx_pybuffernd_w.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_w.diminfo[0].shape = __pyx_pybuffernd_w.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_w.diminfo[1].strides = __pyx_pybuffernd_w.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_w.diminfo[1].shape = __pyx_pybuffernd_w.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_b.rcbuffer->pybuffer, (PyObject*)__pyx_v_b, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_b.diminfo[0].strides = __pyx_pybuffernd_b.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_b.diminfo[0].shape = __pyx_pybuffernd_b.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_b.diminfo[1].strides = __pyx_pybuffernd_b.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_b.diminfo[1].shape = __pyx_pybuffernd_b.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_Y.rcbuffer->pybuffer, (PyObject*)__pyx_v_Y, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_F_CONTIGUOUS, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_Y.diminfo[0].strides = __pyx_pybuffernd_Y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_Y.diminfo[0].shape = __pyx_pybuffernd_Y.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_Y.diminfo[1].strides = __pyx_pybuffernd_Y.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_Y.diminfo[1].shape = __pyx_pybuffernd_Y.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_active_set.rcbuffer->pybuffer, (PyObject*)__pyx_v_active_set, &__Pyx_TypeInfo_int, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_pybuffernd_active_set.diminfo[0].strides = __pyx_pybuffernd_active_set.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_active_set.diminfo[0].shape = __pyx_pybuffernd_active_set.rcbuffer->pybuffer.shape[0];

  /* "lightning/impl/primal_cd_fast.pyx":1237
 * 
 *     # Dataset
 *     cdef int n_samples = X.get_n_samples()             # <<<<<<<<<<<<<<
 *     cdef int n_features = X.get_n_features()
 *     cdef int n_vectors = w.shape[0]
 */
  __pyx_v_n_samples = ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->__pyx_base.get_n_samples(((struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset *)__pyx_v_X), 0);

  /* "lightning/impl/primal_cd_fast.pyx":1238
 *     # Dataset
 *     cdef int n_samples = X.get_n_samples()
 *     cdef int n_features = X.get_n_features()             # <<<<<<<<<<<<<<
 *     cdef int n_vectors = w.shape[0]
 *     cdef int active_size = active_set.shape[0]
 */
  __pyx_v_n_features = ((struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset *)__pyx_v_X->__pyx_base.__pyx_vtab)->__pyx_base.get_n_features(((struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset *)__pyx_v_X), 0);

  /* "lightning/impl/primal_cd_fast.pyx":1239
 *     cdef int n_samples = X.get_n_samples()
 *     cdef int n_features = X.get_n_features()
 *     cdef int n_vectors = w.shape[0]             # <<<<<<<<<<<<<<
 *     cdef int active_size = active_set.shape[0]
 *     cdef int active_size_start = active_size
 */
  __pyx_v_n_vectors = (__pyx_v_w->dimensions[0]);

  /* "lightning/impl/primal_cd_fast.pyx":1240
 *     cdef int n_features = X.get_n_features()
 *     cdef int n_vectors = w.shape[0]
 *     cdef int active_size = active_set.shape[0]             # <<<<<<<<<<<<<<
 *     cdef int active_size_start = active_size
 *     cdef double DBL_MAX = np.finfo(np.double).max
 */
  __pyx_v_active_size = (__pyx_v_active_set->dimensions[0]);

  /* "lightning/impl/primal_cd_fast.pyx":1241
 *     cdef int n_vectors = w.shape[0]
 *     cdef int active_size = active_set.shape[0]
 *     cdef int active_size_start = active_size             # <<<<<<<<<<<<<<
 *     cdef double DBL_MAX = np.finfo(np.double).max
 * 
 */
  __pyx_v_active_size_start = __pyx_v_active_size;

  /* "lightning/impl/primal_cd_fast.pyx":1242
 *     cdef int active_size = active_set.shape[0]
 *     cdef int active_size_start = active_size
 *     cdef double DBL_MAX = np.finfo(np.double).max             # <<<<<<<<<<<<<<
 * 
 *     # Counters
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_finfo); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_max); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_DBL_MAX = __pyx_t_6;

  /* "lightning/impl/primal_cd_fast.pyx":1248
 * 
 *     # Optimality violations
 *     cdef double violation_max_old = DBL_MAX             # <<<<<<<<<<<<<<
 *     cdef double violation_max
 *     cdef double violation
 */
  __pyx_v_violation_max_old = __pyx_v_DBL_MAX;

  /* "lightning/impl/primal_cd_fast.pyx":1254
 * 
 *     # Convergence
 *     cdef int check_violation_sum = termination == "violation_sum"             # <<<<<<<<<<<<<<
 *     cdef int check_violation_max = termination == "violation_max"
 *     cdef int stop = 0
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_termination, __pyx_n_s_violation_sum, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_check_violation_sum = __pyx_t_7;

  /* "lightning/impl/primal_cd_fast.pyx":1255
 *     # Convergence
 *     cdef int check_violation_sum = termination == "violation_sum"
 *     cdef int check_violation_max = termination == "violation_max"             # <<<<<<<<<<<<<<
 *     cdef int stop = 0
 *     cdef int has_callback = callback is not None
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_termination, __pyx_n_s_violation_max, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_check_violation_max = __pyx_t_7;

  /* "lightning/impl/primal_cd_fast.pyx":1256
 *     cdef int check_violation_sum = termination == "violation_sum"
 *     cdef int check_violation_max = termination == "violation_max"
 *     cdef int stop = 0             # <<<<<<<<<<<<<<
 *     cdef int has_callback = callback is not None
 *     cdef int shrink = 0
 */
  __pyx_v_stop = 0;

  /* "lightning/impl/primal_cd_fast.pyx":1257
 *     cdef int check_violation_max = termination == "violation_max"
 *     cdef int stop = 0
 *     cdef int has_callback = callback is not None             # <<<<<<<<<<<<<<
 *     cdef int shrink = 0
 * 
 */
  __pyx_t_8 = (__pyx_v_callback != Py_None);
  __pyx_v_has_callback = __pyx_t_8;

  /* "lightning/impl/primal_cd_fast.pyx":1258
 *     cdef int stop = 0
 *     cdef int has_callback = callback is not None
 *     cdef int shrink = 0             # <<<<<<<<<<<<<<
 * 
 *     # Coordinate selection
 */
  __pyx_v_shrink = 0;

  /* "lightning/impl/primal_cd_fast.pyx":1261
 * 
 *     # Coordinate selection
 *     cdef int cyclic = selection == "cyclic"             # <<<<<<<<<<<<<<
 *     cdef int uniform = selection == "uniform"
 *     if uniform:
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_selection, __pyx_n_s_cyclic, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_cyclic = __pyx_t_7;

  /* "lightning/impl/primal_cd_fast.pyx":1262
 *     # Coordinate selection
 *     cdef int cyclic = selection == "cyclic"
 *     cdef int uniform = selection == "uniform"             # <<<<<<<<<<<<<<
 *     if uniform:
 *         permute = 0
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_selection, __pyx_n_s_uniform, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_uniform = __pyx_t_7;

  /* "lightning/impl/primal_cd_fast.pyx":1263
 *     cdef int cyclic = selection == "cyclic"
 *     cdef int uniform = selection == "uniform"
 *     if uniform:             # <<<<<<<<<<<<<<
 *         permute = 0
 *         shrinking = 0
 */
  __pyx_t_8 = (__pyx_v_uniform != 0);
  if (__pyx_t_8) {

    /* "lightning/impl/primal_cd_fast.pyx":1264
 *     cdef int uniform = selection == "uniform"
 *     if uniform:
 *         permute = 0             # <<<<<<<<<<<<<<
 *         shrinking = 0
 * 
 */
    __pyx_v_permute = 0;

    /* "lightning/impl/primal_cd_fast.pyx":1265
 *     if uniform:
 *         permute = 0
 *         shrinking = 0             # <<<<<<<<<<<<<<
 * 
 *     # Lipschitz constants
 */
    __pyx_v_shrinking = 0;

    /* "lightning/impl/primal_cd_fast.pyx":1263
 *     cdef int cyclic = selection == "cyclic"
 *     cdef int uniform = selection == "uniform"
 *     if uniform:             # <<<<<<<<<<<<<<
 *         permute = 0
 *         shrinking = 0
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":1269
 *     # Lipschitz constants
 *     cdef np.ndarray[double, ndim=1, mode='c'] Lcst
 *     Lcst = np.zeros(n_features, dtype=np.float64)             # <<<<<<<<<<<<<<
 *     if max_steps == 0:
 *         if multiclass:
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n_features); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Lcst.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_Lcst.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_Lcst.rcbuffer->pybuffer, (PyObject*)__pyx_v_Lcst, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
    }
    __pyx_pybuffernd_Lcst.diminfo[0].strides = __pyx_pybuffernd_Lcst.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_Lcst.diminfo[0].shape = __pyx_pybuffernd_Lcst.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_9 = 0;
  __pyx_v_Lcst = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "lightning/impl/primal_cd_fast.pyx":1270
 *     cdef np.ndarray[double, ndim=1, mode='c'] Lcst
 *     Lcst = np.zeros(n_features, dtype=np.float64)
 *     if max_steps == 0:             # <<<<<<<<<<<<<<
 *         if multiclass:
 *             loss.lipschitz_constant_mc(n_vectors, X, C, <double*>Lcst.data)
 */
  __pyx_t_8 = ((__pyx_v_max_steps == 0) != 0);
  if (__pyx_t_8) {

    /* "lightning/impl/primal_cd_fast.pyx":1271
 *     Lcst = np.zeros(n_features, dtype=np.float64)
 *     if max_steps == 0:
 *         if multiclass:             # <<<<<<<<<<<<<<
 *             loss.lipschitz_constant_mc(n_vectors, X, C, <double*>Lcst.data)
 *         else:
 */
    __pyx_t_8 = (__pyx_v_multiclass != 0);
    if (__pyx_t_8) {

      /* "lightning/impl/primal_cd_fast.pyx":1272
 *     if max_steps == 0:
 *         if multiclass:
 *             loss.lipschitz_constant_mc(n_vectors, X, C, <double*>Lcst.data)             # <<<<<<<<<<<<<<
 *         else:
 *             loss.lipschitz_constant_mt(n_vectors, X, C, <double*>Lcst.data)
 */
      ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_loss->__pyx_vtab)->lipschitz_constant_mc(__pyx_v_loss, __pyx_v_n_vectors, __pyx_v_X, __pyx_v_C, ((double *)__pyx_v_Lcst->data));

      /* "lightning/impl/primal_cd_fast.pyx":1271
 *     Lcst = np.zeros(n_features, dtype=np.float64)
 *     if max_steps == 0:
 *         if multiclass:             # <<<<<<<<<<<<<<
 *             loss.lipschitz_constant_mc(n_vectors, X, C, <double*>Lcst.data)
 *         else:
 */
      goto __pyx_L5;
    }

    /* "lightning/impl/primal_cd_fast.pyx":1274
 *             loss.lipschitz_constant_mc(n_vectors, X, C, <double*>Lcst.data)
 *         else:
 *             loss.lipschitz_constant_mt(n_vectors, X, C, <double*>Lcst.data)             # <<<<<<<<<<<<<<
 * 
 *     # Vector containers
 */
    /*else*/ {
      ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_loss->__pyx_vtab)->lipschitz_constant_mt(__pyx_v_loss, __pyx_v_n_vectors, __pyx_v_X, __pyx_v_C, ((double *)__pyx_v_Lcst->data));
    }
    __pyx_L5:;

    /* "lightning/impl/primal_cd_fast.pyx":1270
 *     cdef np.ndarray[double, ndim=1, mode='c'] Lcst
 *     Lcst = np.zeros(n_features, dtype=np.float64)
 *     if max_steps == 0:             # <<<<<<<<<<<<<<
 *         if multiclass:
 *             loss.lipschitz_constant_mc(n_vectors, X, C, <double*>Lcst.data)
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":1280
 *     cdef double* y_ptr
 *     cdef double* w_ptr
 *     cdef int* active_set_ptr = <int*>active_set.data             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[double, ndim=1, mode='c'] g  # Partial gradient
 *     cdef np.ndarray[double, ndim=1, mode='c'] d  # Block update
 */
  __pyx_v_active_set_ptr = ((int *)__pyx_v_active_set->data);

  /* "lightning/impl/primal_cd_fast.pyx":1286
 *     cdef np.ndarray[double, ndim=1, mode='c'] buf  # Buffer
 *     cdef double* buf_ptr
 *     if k == -1:             # <<<<<<<<<<<<<<
 *         # Multiclass or multitask.
 *         g = np.zeros(n_vectors, dtype=np.float64)
 */
  __pyx_t_8 = ((__pyx_v_k == -1L) != 0);
  if (__pyx_t_8) {

    /* "lightning/impl/primal_cd_fast.pyx":1288
 *     if k == -1:
 *         # Multiclass or multitask.
 *         g = np.zeros(n_vectors, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         d = np.zeros(n_vectors, dtype=np.float64)
 *         d_old = np.zeros(n_vectors, dtype=np.float64)
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n_vectors); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_13 = ((PyArrayObject *)__pyx_t_4);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_g.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_g.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_g.rcbuffer->pybuffer, (PyObject*)__pyx_v_g, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_g.diminfo[0].strides = __pyx_pybuffernd_g.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_g.diminfo[0].shape = __pyx_pybuffernd_g.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_13 = 0;
    __pyx_v_g = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "lightning/impl/primal_cd_fast.pyx":1289
 *         # Multiclass or multitask.
 *         g = np.zeros(n_vectors, dtype=np.float64)
 *         d = np.zeros(n_vectors, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         d_old = np.zeros(n_vectors, dtype=np.float64)
 *         if multiclass:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_n_vectors); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_14 = ((PyArrayObject *)__pyx_t_1);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_d.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_d.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_d.rcbuffer->pybuffer, (PyObject*)__pyx_v_d, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
      }
      __pyx_pybuffernd_d.diminfo[0].strides = __pyx_pybuffernd_d.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_d.diminfo[0].shape = __pyx_pybuffernd_d.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_14 = 0;
    __pyx_v_d = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "lightning/impl/primal_cd_fast.pyx":1290
 *         g = np.zeros(n_vectors, dtype=np.float64)
 *         d = np.zeros(n_vectors, dtype=np.float64)
 *         d_old = np.zeros(n_vectors, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         if multiclass:
 *             buf = np.zeros(n_samples, dtype=np.float64)
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n_vectors); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_15 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_d_old.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_d_old.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_d_old.rcbuffer->pybuffer, (PyObject*)__pyx_v_d_old, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_d_old.diminfo[0].strides = __pyx_pybuffernd_d_old.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_d_old.diminfo[0].shape = __pyx_pybuffernd_d_old.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_15 = 0;
    __pyx_v_d_old = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "lightning/impl/primal_cd_fast.pyx":1291
 *         d = np.zeros(n_vectors, dtype=np.float64)
 *         d_old = np.zeros(n_vectors, dtype=np.float64)
 *         if multiclass:             # <<<<<<<<<<<<<<
 *             buf = np.zeros(n_samples, dtype=np.float64)
 *             buf_ptr = <double*>buf.data
 */
    __pyx_t_8 = (__pyx_v_multiclass != 0);
    if (__pyx_t_8) {

      /* "lightning/impl/primal_cd_fast.pyx":1292
 *         d_old = np.zeros(n_vectors, dtype=np.float64)
 *         if multiclass:
 *             buf = np.zeros(n_samples, dtype=np.float64)             # <<<<<<<<<<<<<<
 *             buf_ptr = <double*>buf.data
 *         b_ptr = <double*>b.data
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_16 = ((PyArrayObject *)__pyx_t_2);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_buf.rcbuffer->pybuffer);
        __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_buf.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_7 < 0)) {
          PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_buf.rcbuffer->pybuffer, (PyObject*)__pyx_v_buf, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
          }
        }
        __pyx_pybuffernd_buf.diminfo[0].strides = __pyx_pybuffernd_buf.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_buf.diminfo[0].shape = __pyx_pybuffernd_buf.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_16 = 0;
      __pyx_v_buf = ((PyArrayObject *)__pyx_t_2);
      __pyx_t_2 = 0;

      /* "lightning/impl/primal_cd_fast.pyx":1293
 *         if multiclass:
 *             buf = np.zeros(n_samples, dtype=np.float64)
 *             buf_ptr = <double*>buf.data             # <<<<<<<<<<<<<<
 *         b_ptr = <double*>b.data
 *     else:
 */
      __pyx_v_buf_ptr = ((double *)__pyx_v_buf->data);

      /* "lightning/impl/primal_cd_fast.pyx":1291
 *         d = np.zeros(n_vectors, dtype=np.float64)
 *         d_old = np.zeros(n_vectors, dtype=np.float64)
 *         if multiclass:             # <<<<<<<<<<<<<<
 *             buf = np.zeros(n_samples, dtype=np.float64)
 *             buf_ptr = <double*>buf.data
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":1294
 *             buf = np.zeros(n_samples, dtype=np.float64)
 *             buf_ptr = <double*>buf.data
 *         b_ptr = <double*>b.data             # <<<<<<<<<<<<<<
 *     else:
 *         # Binary classification or regression.
 */
    __pyx_v_b_ptr = ((double *)__pyx_v_b->data);

    /* "lightning/impl/primal_cd_fast.pyx":1286
 *     cdef np.ndarray[double, ndim=1, mode='c'] buf  # Buffer
 *     cdef double* buf_ptr
 *     if k == -1:             # <<<<<<<<<<<<<<
 *         # Multiclass or multitask.
 *         g = np.zeros(n_vectors, dtype=np.float64)
 */
    goto __pyx_L6;
  }

  /* "lightning/impl/primal_cd_fast.pyx":1297
 *     else:
 *         # Binary classification or regression.
 *         b_ptr = <double*>b.data + k * n_samples             # <<<<<<<<<<<<<<
 *         y_ptr = <double*>Y.data + k * n_samples
 *         w_ptr = <double*>w.data + k * n_features
 */
  /*else*/ {
    __pyx_v_b_ptr = (((double *)__pyx_v_b->data) + (__pyx_v_k * __pyx_v_n_samples));

    /* "lightning/impl/primal_cd_fast.pyx":1298
 *         # Binary classification or regression.
 *         b_ptr = <double*>b.data + k * n_samples
 *         y_ptr = <double*>Y.data + k * n_samples             # <<<<<<<<<<<<<<
 *         w_ptr = <double*>w.data + k * n_features
 *         buf = np.zeros(n_samples, dtype=np.float64)
 */
    __pyx_v_y_ptr = (((double *)__pyx_v_Y->data) + (__pyx_v_k * __pyx_v_n_samples));

    /* "lightning/impl/primal_cd_fast.pyx":1299
 *         b_ptr = <double*>b.data + k * n_samples
 *         y_ptr = <double*>Y.data + k * n_samples
 *         w_ptr = <double*>w.data + k * n_features             # <<<<<<<<<<<<<<
 *         buf = np.zeros(n_samples, dtype=np.float64)
 *         buf_ptr = <double*>buf.data
 */
    __pyx_v_w_ptr = (((double *)__pyx_v_w->data) + (__pyx_v_k * __pyx_v_n_features));

    /* "lightning/impl/primal_cd_fast.pyx":1300
 *         y_ptr = <double*>Y.data + k * n_samples
 *         w_ptr = <double*>w.data + k * n_features
 *         buf = np.zeros(n_samples, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         buf_ptr = <double*>buf.data
 * 
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_16 = ((PyArrayObject *)__pyx_t_4);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_buf.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_buf.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_buf.rcbuffer->pybuffer, (PyObject*)__pyx_v_buf, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_C_CONTIGUOUS, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_buf.diminfo[0].strides = __pyx_pybuffernd_buf.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_buf.diminfo[0].shape = __pyx_pybuffernd_buf.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_16 = 0;
    __pyx_v_buf = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "lightning/impl/primal_cd_fast.pyx":1301
 *         w_ptr = <double*>w.data + k * n_features
 *         buf = np.zeros(n_samples, dtype=np.float64)
 *         buf_ptr = <double*>buf.data             # <<<<<<<<<<<<<<
 * 
 *     for t in xrange(max_iter):
 */
    __pyx_v_buf_ptr = ((double *)__pyx_v_buf->data);
  }
  __pyx_L6:;

  /* "lightning/impl/primal_cd_fast.pyx":1303
 *         buf_ptr = <double*>buf.data
 * 
 *     for t in xrange(max_iter):             # <<<<<<<<<<<<<<
 *         # Permute features (cyclic case only)
 *         if permute:
 */
  __pyx_t_7 = __pyx_v_max_iter;
  for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
    __pyx_v_t = __pyx_t_17;

    /* "lightning/impl/primal_cd_fast.pyx":1305
 *     for t in xrange(max_iter):
 *         # Permute features (cyclic case only)
 *         if permute:             # <<<<<<<<<<<<<<
 *             rs.shuffle(active_set[:active_size])
 * 
 */
    __pyx_t_8 = (__pyx_v_permute != 0);
    if (__pyx_t_8) {

      /* "lightning/impl/primal_cd_fast.pyx":1306
 *         # Permute features (cyclic case only)
 *         if permute:
 *             rs.shuffle(active_set[:active_size])             # <<<<<<<<<<<<<<
 * 
 *         # Initialize violations.
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_rs), __pyx_n_s_shuffle); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_active_set), 0, __pyx_v_active_size, NULL, NULL, NULL, 0, 1, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "lightning/impl/primal_cd_fast.pyx":1305
 *     for t in xrange(max_iter):
 *         # Permute features (cyclic case only)
 *         if permute:             # <<<<<<<<<<<<<<
 *             rs.shuffle(active_set[:active_size])
 * 
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":1309
 * 
 *         # Initialize violations.
 *         violation_max = 0             # <<<<<<<<<<<<<<
 *         violation_sum = 0
 *         M = -DBL_MAX
 */
    __pyx_v_violation_max = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":1310
 *         # Initialize violations.
 *         violation_max = 0
 *         violation_sum = 0             # <<<<<<<<<<<<<<
 *         M = -DBL_MAX
 *         m = DBL_MAX
 */
    __pyx_v_violation_sum = 0.0;

    /* "lightning/impl/primal_cd_fast.pyx":1311
 *         violation_max = 0
 *         violation_sum = 0
 *         M = -DBL_MAX             # <<<<<<<<<<<<<<
 *         m = DBL_MAX
 * 
 */
    __pyx_v_M = (-__pyx_v_DBL_MAX);

    /* "lightning/impl/primal_cd_fast.pyx":1312
 *         violation_sum = 0
 *         M = -DBL_MAX
 *         m = DBL_MAX             # <<<<<<<<<<<<<<
 * 
 *         s = 0
 */
    __pyx_v_m = __pyx_v_DBL_MAX;

    /* "lightning/impl/primal_cd_fast.pyx":1314
 *         m = DBL_MAX
 * 
 *         s = 0             # <<<<<<<<<<<<<<
 *         while s < active_size:
 *             # Select coordinate.
 */
    __pyx_v_s = 0;

    /* "lightning/impl/primal_cd_fast.pyx":1315
 * 
 *         s = 0
 *         while s < active_size:             # <<<<<<<<<<<<<<
 *             # Select coordinate.
 *             if cyclic:
 */
    while (1) {
      __pyx_t_8 = ((__pyx_v_s < __pyx_v_active_size) != 0);
      if (!__pyx_t_8) break;

      /* "lightning/impl/primal_cd_fast.pyx":1317
 *         while s < active_size:
 *             # Select coordinate.
 *             if cyclic:             # <<<<<<<<<<<<<<
 *                 j = active_set[s]
 *             elif uniform:
 */
      __pyx_t_8 = (__pyx_v_cyclic != 0);
      if (__pyx_t_8) {

        /* "lightning/impl/primal_cd_fast.pyx":1318
 *             # Select coordinate.
 *             if cyclic:
 *                 j = active_set[s]             # <<<<<<<<<<<<<<
 *             elif uniform:
 *                 j = active_set[rs.randint(active_size - 1)]
 */
        __pyx_t_18 = __pyx_v_s;
        __pyx_v_j = (*__Pyx_BufPtrCContig1d(int *, __pyx_pybuffernd_active_set.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_active_set.diminfo[0].strides));

        /* "lightning/impl/primal_cd_fast.pyx":1317
 *         while s < active_size:
 *             # Select coordinate.
 *             if cyclic:             # <<<<<<<<<<<<<<
 *                 j = active_set[s]
 *             elif uniform:
 */
        goto __pyx_L13;
      }

      /* "lightning/impl/primal_cd_fast.pyx":1319
 *             if cyclic:
 *                 j = active_set[s]
 *             elif uniform:             # <<<<<<<<<<<<<<
 *                 j = active_set[rs.randint(active_size - 1)]
 * 
 */
      __pyx_t_8 = (__pyx_v_uniform != 0);
      if (__pyx_t_8) {

        /* "lightning/impl/primal_cd_fast.pyx":1320
 *                 j = active_set[s]
 *             elif uniform:
 *                 j = active_set[rs.randint(active_size - 1)]             # <<<<<<<<<<<<<<
 * 
 *             # Solve sub-problem.
 */
        __pyx_t_19 = ((struct __pyx_vtabstruct_9lightning_4impl_9randomkit_11random_fast_RandomState *)__pyx_v_rs->__pyx_vtab)->randint(__pyx_v_rs, (__pyx_v_active_size - 1), 0);
        __pyx_v_j = (*__Pyx_BufPtrCContig1d(int *, __pyx_pybuffernd_active_set.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_active_set.diminfo[0].strides));

        /* "lightning/impl/primal_cd_fast.pyx":1319
 *             if cyclic:
 *                 j = active_set[s]
 *             elif uniform:             # <<<<<<<<<<<<<<
 *                 j = active_set[rs.randint(active_size - 1)]
 * 
 */
      }
      __pyx_L13:;

      /* "lightning/impl/primal_cd_fast.pyx":1323
 * 
 *             # Solve sub-problem.
 *             if penalty == 1:             # <<<<<<<<<<<<<<
 *                 shrink = loss.solve_l1(j, C, alpha, w_ptr, n_samples, X,
 *                                        y_ptr, b_ptr, Lcst[j], violation_max_old,
 */
      switch (__pyx_v_penalty) {
        case 1:

        /* "lightning/impl/primal_cd_fast.pyx":1325
 *             if penalty == 1:
 *                 shrink = loss.solve_l1(j, C, alpha, w_ptr, n_samples, X,
 *                                        y_ptr, b_ptr, Lcst[j], violation_max_old,             # <<<<<<<<<<<<<<
 *                                        &violation, shrinking)
 *             elif penalty == 12:
 */
        __pyx_t_20 = __pyx_v_j;

        /* "lightning/impl/primal_cd_fast.pyx":1324
 *             # Solve sub-problem.
 *             if penalty == 1:
 *                 shrink = loss.solve_l1(j, C, alpha, w_ptr, n_samples, X,             # <<<<<<<<<<<<<<
 *                                        y_ptr, b_ptr, Lcst[j], violation_max_old,
 *                                        &violation, shrinking)
 */
        __pyx_v_shrink = ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_loss->__pyx_vtab)->solve_l1(__pyx_v_loss, __pyx_v_j, __pyx_v_C, __pyx_v_alpha, __pyx_v_w_ptr, __pyx_v_n_samples, __pyx_v_X, __pyx_v_y_ptr, __pyx_v_b_ptr, (*__Pyx_BufPtrCContig1d(double *, __pyx_pybuffernd_Lcst.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_Lcst.diminfo[0].strides)), __pyx_v_violation_max_old, (&__pyx_v_violation), __pyx_v_shrinking);

        /* "lightning/impl/primal_cd_fast.pyx":1323
 * 
 *             # Solve sub-problem.
 *             if penalty == 1:             # <<<<<<<<<<<<<<
 *                 shrink = loss.solve_l1(j, C, alpha, w_ptr, n_samples, X,
 *                                        y_ptr, b_ptr, Lcst[j], violation_max_old,
 */
        break;

        /* "lightning/impl/primal_cd_fast.pyx":1327
 *                                        y_ptr, b_ptr, Lcst[j], violation_max_old,
 *                                        &violation, shrinking)
 *             elif penalty == 12:             # <<<<<<<<<<<<<<
 *                 shrink = loss.solve_l1l2(j, C, alpha, w, n_vectors, X,
 *                                          <int*>y.data, Y, multiclass,
 */
        case 12:

        /* "lightning/impl/primal_cd_fast.pyx":1330
 *                 shrink = loss.solve_l1l2(j, C, alpha, w, n_vectors, X,
 *                                          <int*>y.data, Y, multiclass,
 *                                          b, Lcst[j], <double*>g.data,             # <<<<<<<<<<<<<<
 *                                          <double*>d.data, <double*>d_old.data,
 *                                          buf_ptr, violation_max_old,
 */
        __pyx_t_21 = __pyx_v_j;

        /* "lightning/impl/primal_cd_fast.pyx":1328
 *                                        &violation, shrinking)
 *             elif penalty == 12:
 *                 shrink = loss.solve_l1l2(j, C, alpha, w, n_vectors, X,             # <<<<<<<<<<<<<<
 *                                          <int*>y.data, Y, multiclass,
 *                                          b, Lcst[j], <double*>g.data,
 */
        __pyx_v_shrink = ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_loss->__pyx_vtab)->solve_l1l2(__pyx_v_loss, __pyx_v_j, __pyx_v_C, __pyx_v_alpha, ((PyArrayObject *)__pyx_v_w), __pyx_v_n_vectors, __pyx_v_X, ((int *)__pyx_v_y->data), ((PyArrayObject *)__pyx_v_Y), __pyx_v_multiclass, ((PyArrayObject *)__pyx_v_b), (*__Pyx_BufPtrCContig1d(double *, __pyx_pybuffernd_Lcst.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_Lcst.diminfo[0].strides)), ((double *)__pyx_v_g->data), ((double *)__pyx_v_d->data), ((double *)__pyx_v_d_old->data), __pyx_v_buf_ptr, __pyx_v_violation_max_old, (&__pyx_v_violation), __pyx_v_shrinking);

        /* "lightning/impl/primal_cd_fast.pyx":1327
 *                                        y_ptr, b_ptr, Lcst[j], violation_max_old,
 *                                        &violation, shrinking)
 *             elif penalty == 12:             # <<<<<<<<<<<<<<
 *                 shrink = loss.solve_l1l2(j, C, alpha, w, n_vectors, X,
 *                                          <int*>y.data, Y, multiclass,
 */
        break;

        /* "lightning/impl/primal_cd_fast.pyx":1334
 *                                          buf_ptr, violation_max_old,
 *                                          &violation, shrinking)
 *             elif penalty == 2:             # <<<<<<<<<<<<<<
 *                 loss.solve_l2(j, C, alpha, w_ptr, X, y_ptr, b_ptr, &violation)
 * 
 */
        case 2:

        /* "lightning/impl/primal_cd_fast.pyx":1335
 *                                          &violation, shrinking)
 *             elif penalty == 2:
 *                 loss.solve_l2(j, C, alpha, w_ptr, X, y_ptr, b_ptr, &violation)             # <<<<<<<<<<<<<<
 * 
 *             # Check if need to shrink.
 */
        ((struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction *)__pyx_v_loss->__pyx_vtab)->solve_l2(__pyx_v_loss, __pyx_v_j, __pyx_v_C, __pyx_v_alpha, __pyx_v_w_ptr, __pyx_v_X, __pyx_v_y_ptr, __pyx_v_b_ptr, (&__pyx_v_violation));

        /* "lightning/impl/primal_cd_fast.pyx":1334
 *                                          buf_ptr, violation_max_old,
 *                                          &violation, shrinking)
 *             elif penalty == 2:             # <<<<<<<<<<<<<<
 *                 loss.solve_l2(j, C, alpha, w_ptr, X, y_ptr, b_ptr, &violation)
 * 
 */
        break;
        default: break;
      }

      /* "lightning/impl/primal_cd_fast.pyx":1338
 * 
 *             # Check if need to shrink.
 *             if shrink:             # <<<<<<<<<<<<<<
 *                 active_size -= 1
 *                 _swap(active_set_ptr, s, active_size)
 */
      __pyx_t_8 = (__pyx_v_shrink != 0);
      if (__pyx_t_8) {

        /* "lightning/impl/primal_cd_fast.pyx":1339
 *             # Check if need to shrink.
 *             if shrink:
 *                 active_size -= 1             # <<<<<<<<<<<<<<
 *                 _swap(active_set_ptr, s, active_size)
 *                 continue
 */
        __pyx_v_active_size = (__pyx_v_active_size - 1);

        /* "lightning/impl/primal_cd_fast.pyx":1340
 *             if shrink:
 *                 active_size -= 1
 *                 _swap(active_set_ptr, s, active_size)             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
        __pyx_f_9lightning_4impl_14primal_cd_fast__swap(__pyx_v_active_set_ptr, __pyx_v_s, __pyx_v_active_size);

        /* "lightning/impl/primal_cd_fast.pyx":1341
 *                 active_size -= 1
 *                 _swap(active_set_ptr, s, active_size)
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             # Update violations.
 */
        goto __pyx_L11_continue;

        /* "lightning/impl/primal_cd_fast.pyx":1338
 * 
 *             # Check if need to shrink.
 *             if shrink:             # <<<<<<<<<<<<<<
 *                 active_size -= 1
 *                 _swap(active_set_ptr, s, active_size)
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":1344
 * 
 *             # Update violations.
 *             violation_max = max(violation_max, violation)             # <<<<<<<<<<<<<<
 *             violation_sum += violation
 * 
 */
      __pyx_t_6 = __pyx_v_violation;
      __pyx_t_22 = __pyx_v_violation_max;
      if (((__pyx_t_6 > __pyx_t_22) != 0)) {
        __pyx_t_23 = __pyx_t_6;
      } else {
        __pyx_t_23 = __pyx_t_22;
      }
      __pyx_v_violation_max = __pyx_t_23;

      /* "lightning/impl/primal_cd_fast.pyx":1345
 *             # Update violations.
 *             violation_max = max(violation_max, violation)
 *             violation_sum += violation             # <<<<<<<<<<<<<<
 * 
 *             # Callback
 */
      __pyx_v_violation_sum = (__pyx_v_violation_sum + __pyx_v_violation);

      /* "lightning/impl/primal_cd_fast.pyx":1348
 * 
 *             # Callback
 *             if has_callback and s % n_calls == 0:             # <<<<<<<<<<<<<<
 *                 ret = callback(self)
 *                 if ret is not None:
 */
      __pyx_t_24 = (__pyx_v_has_callback != 0);
      if (__pyx_t_24) {
      } else {
        __pyx_t_8 = __pyx_t_24;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_24 = (((__pyx_v_s % __pyx_v_n_calls) == 0) != 0);
      __pyx_t_8 = __pyx_t_24;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_8) {

        /* "lightning/impl/primal_cd_fast.pyx":1349
 *             # Callback
 *             if has_callback and s % n_calls == 0:
 *                 ret = callback(self)             # <<<<<<<<<<<<<<
 *                 if ret is not None:
 *                     stop = 1
 */
        __Pyx_INCREF(__pyx_v_callback);
        __pyx_t_2 = __pyx_v_callback; __pyx_t_1 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        if (!__pyx_t_1) {
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_self); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
        } else {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
          __Pyx_INCREF(__pyx_v_self);
          __Pyx_GIVEREF(__pyx_v_self);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_self);
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_ret, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "lightning/impl/primal_cd_fast.pyx":1350
 *             if has_callback and s % n_calls == 0:
 *                 ret = callback(self)
 *                 if ret is not None:             # <<<<<<<<<<<<<<
 *                     stop = 1
 *                     break
 */
        __pyx_t_8 = (__pyx_v_ret != Py_None);
        __pyx_t_24 = (__pyx_t_8 != 0);
        if (__pyx_t_24) {

          /* "lightning/impl/primal_cd_fast.pyx":1351
 *                 ret = callback(self)
 *                 if ret is not None:
 *                     stop = 1             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
          __pyx_v_stop = 1;

          /* "lightning/impl/primal_cd_fast.pyx":1352
 *                 if ret is not None:
 *                     stop = 1
 *                     break             # <<<<<<<<<<<<<<
 * 
 *             s += 1
 */
          goto __pyx_L12_break;

          /* "lightning/impl/primal_cd_fast.pyx":1350
 *             if has_callback and s % n_calls == 0:
 *                 ret = callback(self)
 *                 if ret is not None:             # <<<<<<<<<<<<<<
 *                     stop = 1
 *                     break
 */
        }

        /* "lightning/impl/primal_cd_fast.pyx":1348
 * 
 *             # Callback
 *             if has_callback and s % n_calls == 0:             # <<<<<<<<<<<<<<
 *                 ret = callback(self)
 *                 if ret is not None:
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":1354
 *                     break
 * 
 *             s += 1             # <<<<<<<<<<<<<<
 *         # end while active_size
 * 
 */
      __pyx_v_s = (__pyx_v_s + 1);
      __pyx_L11_continue:;
    }
    __pyx_L12_break:;

    /* "lightning/impl/primal_cd_fast.pyx":1357
 *         # end while active_size
 * 
 *         if stop:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_24 = (__pyx_v_stop != 0);
    if (__pyx_t_24) {

      /* "lightning/impl/primal_cd_fast.pyx":1358
 * 
 *         if stop:
 *             break             # <<<<<<<<<<<<<<
 * 
 *         # Initialize violations.
 */
      goto __pyx_L9_break;

      /* "lightning/impl/primal_cd_fast.pyx":1357
 *         # end while active_size
 * 
 *         if stop:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":1361
 * 
 *         # Initialize violations.
 *         if t == 0 and violation_init == 0:             # <<<<<<<<<<<<<<
 *             if check_violation_sum:
 *                 violation_init = violation_sum
 */
    __pyx_t_8 = ((__pyx_v_t == 0) != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_24 = __pyx_t_8;
      goto __pyx_L21_bool_binop_done;
    }
    __pyx_t_8 = ((__pyx_v_violation_init == 0.0) != 0);
    __pyx_t_24 = __pyx_t_8;
    __pyx_L21_bool_binop_done:;
    if (__pyx_t_24) {

      /* "lightning/impl/primal_cd_fast.pyx":1362
 *         # Initialize violations.
 *         if t == 0 and violation_init == 0:
 *             if check_violation_sum:             # <<<<<<<<<<<<<<
 *                 violation_init = violation_sum
 *             elif check_violation_max:
 */
      __pyx_t_24 = (__pyx_v_check_violation_sum != 0);
      if (__pyx_t_24) {

        /* "lightning/impl/primal_cd_fast.pyx":1363
 *         if t == 0 and violation_init == 0:
 *             if check_violation_sum:
 *                 violation_init = violation_sum             # <<<<<<<<<<<<<<
 *             elif check_violation_max:
 *                 violation_init = violation_max
 */
        __pyx_v_violation_init = __pyx_v_violation_sum;

        /* "lightning/impl/primal_cd_fast.pyx":1362
 *         # Initialize violations.
 *         if t == 0 and violation_init == 0:
 *             if check_violation_sum:             # <<<<<<<<<<<<<<
 *                 violation_init = violation_sum
 *             elif check_violation_max:
 */
        goto __pyx_L23;
      }

      /* "lightning/impl/primal_cd_fast.pyx":1364
 *             if check_violation_sum:
 *                 violation_init = violation_sum
 *             elif check_violation_max:             # <<<<<<<<<<<<<<
 *                 violation_init = violation_max
 * 
 */
      __pyx_t_24 = (__pyx_v_check_violation_max != 0);
      if (__pyx_t_24) {

        /* "lightning/impl/primal_cd_fast.pyx":1365
 *                 violation_init = violation_sum
 *             elif check_violation_max:
 *                 violation_init = violation_max             # <<<<<<<<<<<<<<
 * 
 *         # Verbose output.
 */
        __pyx_v_violation_init = __pyx_v_violation_max;

        /* "lightning/impl/primal_cd_fast.pyx":1364
 *             if check_violation_sum:
 *                 violation_init = violation_sum
 *             elif check_violation_max:             # <<<<<<<<<<<<<<
 *                 violation_init = violation_max
 * 
 */
      }
      __pyx_L23:;

      /* "lightning/impl/primal_cd_fast.pyx":1361
 * 
 *         # Initialize violations.
 *         if t == 0 and violation_init == 0:             # <<<<<<<<<<<<<<
 *             if check_violation_sum:
 *                 violation_init = violation_sum
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":1368
 * 
 *         # Verbose output.
 *         if verbose >= 1:             # <<<<<<<<<<<<<<
 *             if check_violation_sum:
 *                 print "iter", t + 1, violation_sum / violation_init, \
 */
    __pyx_t_24 = ((__pyx_v_verbose >= 1) != 0);
    if (__pyx_t_24) {

      /* "lightning/impl/primal_cd_fast.pyx":1369
 *         # Verbose output.
 *         if verbose >= 1:
 *             if check_violation_sum:             # <<<<<<<<<<<<<<
 *                 print "iter", t + 1, violation_sum / violation_init, \
 *                       "(%d)" % active_size
 */
      __pyx_t_24 = (__pyx_v_check_violation_sum != 0);
      if (__pyx_t_24) {

        /* "lightning/impl/primal_cd_fast.pyx":1370
 *         if verbose >= 1:
 *             if check_violation_sum:
 *                 print "iter", t + 1, violation_sum / violation_init, \             # <<<<<<<<<<<<<<
 *                       "(%d)" % active_size
 *             elif check_violation_max:
 */
        __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_t + 1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = PyFloat_FromDouble((__pyx_v_violation_sum / __pyx_v_violation_init)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);

        /* "lightning/impl/primal_cd_fast.pyx":1371
 *             if check_violation_sum:
 *                 print "iter", t + 1, violation_sum / violation_init, \
 *                       "(%d)" % active_size             # <<<<<<<<<<<<<<
 *             elif check_violation_max:
 *                 print "iter", t + 1, violation_max / violation_init, \
 */
        __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_active_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_d, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "lightning/impl/primal_cd_fast.pyx":1370
 *         if verbose >= 1:
 *             if check_violation_sum:
 *                 print "iter", t + 1, violation_sum / violation_init, \             # <<<<<<<<<<<<<<
 *                       "(%d)" % active_size
 *             elif check_violation_max:
 */
        __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_n_s_iter);
        __Pyx_GIVEREF(__pyx_n_s_iter);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_iter);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_1);
        __pyx_t_4 = 0;
        __pyx_t_2 = 0;
        __pyx_t_1 = 0;
        if (__Pyx_Print(0, __pyx_t_5, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "lightning/impl/primal_cd_fast.pyx":1369
 *         # Verbose output.
 *         if verbose >= 1:
 *             if check_violation_sum:             # <<<<<<<<<<<<<<
 *                 print "iter", t + 1, violation_sum / violation_init, \
 *                       "(%d)" % active_size
 */
        goto __pyx_L25;
      }

      /* "lightning/impl/primal_cd_fast.pyx":1372
 *                 print "iter", t + 1, violation_sum / violation_init, \
 *                       "(%d)" % active_size
 *             elif check_violation_max:             # <<<<<<<<<<<<<<
 *                 print "iter", t + 1, violation_max / violation_init, \
 *                       "(%d)" % active_size
 */
      __pyx_t_24 = (__pyx_v_check_violation_max != 0);
      if (__pyx_t_24) {

        /* "lightning/impl/primal_cd_fast.pyx":1373
 *                       "(%d)" % active_size
 *             elif check_violation_max:
 *                 print "iter", t + 1, violation_max / violation_init, \             # <<<<<<<<<<<<<<
 *                       "(%d)" % active_size
 * 
 */
        __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_t + 1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = PyFloat_FromDouble((__pyx_v_violation_max / __pyx_v_violation_init)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);

        /* "lightning/impl/primal_cd_fast.pyx":1374
 *             elif check_violation_max:
 *                 print "iter", t + 1, violation_max / violation_init, \
 *                       "(%d)" % active_size             # <<<<<<<<<<<<<<
 * 
 *         # Check convergence.
 */
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_active_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_d, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "lightning/impl/primal_cd_fast.pyx":1373
 *                       "(%d)" % active_size
 *             elif check_violation_max:
 *                 print "iter", t + 1, violation_max / violation_init, \             # <<<<<<<<<<<<<<
 *                       "(%d)" % active_size
 * 
 */
        __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_n_s_iter);
        __Pyx_GIVEREF(__pyx_n_s_iter);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_iter);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_1 = 0;
        __pyx_t_4 = 0;
        if (__Pyx_Print(0, __pyx_t_2, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "lightning/impl/primal_cd_fast.pyx":1372
 *                 print "iter", t + 1, violation_sum / violation_init, \
 *                       "(%d)" % active_size
 *             elif check_violation_max:             # <<<<<<<<<<<<<<
 *                 print "iter", t + 1, violation_max / violation_init, \
 *                       "(%d)" % active_size
 */
      }
      __pyx_L25:;

      /* "lightning/impl/primal_cd_fast.pyx":1368
 * 
 *         # Verbose output.
 *         if verbose >= 1:             # <<<<<<<<<<<<<<
 *             if check_violation_sum:
 *                 print "iter", t + 1, violation_sum / violation_init, \
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":1377
 * 
 *         # Check convergence.
 *         if (check_violation_sum and             # <<<<<<<<<<<<<<
 *             violation_sum <= tol * violation_init) or \
 *            (check_violation_max and
 */
    __pyx_t_8 = (__pyx_v_check_violation_sum != 0);
    if (!__pyx_t_8) {
      goto __pyx_L28_next_or;
    } else {
    }

    /* "lightning/impl/primal_cd_fast.pyx":1378
 *         # Check convergence.
 *         if (check_violation_sum and
 *             violation_sum <= tol * violation_init) or \             # <<<<<<<<<<<<<<
 *            (check_violation_max and
 *             violation_max <= tol * violation_init):
 */
    __pyx_t_8 = ((__pyx_v_violation_sum <= (__pyx_v_tol * __pyx_v_violation_init)) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_24 = __pyx_t_8;
      goto __pyx_L27_bool_binop_done;
    }
    __pyx_L28_next_or:;

    /* "lightning/impl/primal_cd_fast.pyx":1379
 *         if (check_violation_sum and
 *             violation_sum <= tol * violation_init) or \
 *            (check_violation_max and             # <<<<<<<<<<<<<<
 *             violation_max <= tol * violation_init):
 *             if active_size == active_size_start:
 */
    __pyx_t_8 = (__pyx_v_check_violation_max != 0);
    if (__pyx_t_8) {
    } else {
      __pyx_t_24 = __pyx_t_8;
      goto __pyx_L27_bool_binop_done;
    }

    /* "lightning/impl/primal_cd_fast.pyx":1380
 *             violation_sum <= tol * violation_init) or \
 *            (check_violation_max and
 *             violation_max <= tol * violation_init):             # <<<<<<<<<<<<<<
 *             if active_size == active_size_start:
 *                 if verbose >= 1:
 */
    __pyx_t_8 = ((__pyx_v_violation_max <= (__pyx_v_tol * __pyx_v_violation_init)) != 0);
    __pyx_t_24 = __pyx_t_8;
    __pyx_L27_bool_binop_done:;

    /* "lightning/impl/primal_cd_fast.pyx":1377
 * 
 *         # Check convergence.
 *         if (check_violation_sum and             # <<<<<<<<<<<<<<
 *             violation_sum <= tol * violation_init) or \
 *            (check_violation_max and
 */
    if (__pyx_t_24) {

      /* "lightning/impl/primal_cd_fast.pyx":1381
 *            (check_violation_max and
 *             violation_max <= tol * violation_init):
 *             if active_size == active_size_start:             # <<<<<<<<<<<<<<
 *                 if verbose >= 1:
 *                     print "\nConverged at iteration", t
 */
      __pyx_t_24 = ((__pyx_v_active_size == __pyx_v_active_size_start) != 0);
      if (__pyx_t_24) {

        /* "lightning/impl/primal_cd_fast.pyx":1382
 *             violation_max <= tol * violation_init):
 *             if active_size == active_size_start:
 *                 if verbose >= 1:             # <<<<<<<<<<<<<<
 *                     print "\nConverged at iteration", t
 *                 break
 */
        __pyx_t_24 = ((__pyx_v_verbose >= 1) != 0);
        if (__pyx_t_24) {

          /* "lightning/impl/primal_cd_fast.pyx":1383
 *             if active_size == active_size_start:
 *                 if verbose >= 1:
 *                     print "\nConverged at iteration", t             # <<<<<<<<<<<<<<
 *                 break
 *             else:
 */
          __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_kp_s_Converged_at_iteration);
          __Pyx_GIVEREF(__pyx_kp_s_Converged_at_iteration);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_Converged_at_iteration);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
          __pyx_t_2 = 0;
          if (__Pyx_Print(0, __pyx_t_4, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "lightning/impl/primal_cd_fast.pyx":1382
 *             violation_max <= tol * violation_init):
 *             if active_size == active_size_start:
 *                 if verbose >= 1:             # <<<<<<<<<<<<<<
 *                     print "\nConverged at iteration", t
 *                 break
 */
        }

        /* "lightning/impl/primal_cd_fast.pyx":1384
 *                 if verbose >= 1:
 *                     print "\nConverged at iteration", t
 *                 break             # <<<<<<<<<<<<<<
 *             else:
 *                 # When shrinking is enabled, we need to do one more outer
 */
        goto __pyx_L9_break;

        /* "lightning/impl/primal_cd_fast.pyx":1381
 *            (check_violation_max and
 *             violation_max <= tol * violation_init):
 *             if active_size == active_size_start:             # <<<<<<<<<<<<<<
 *                 if verbose >= 1:
 *                     print "\nConverged at iteration", t
 */
      }

      /* "lightning/impl/primal_cd_fast.pyx":1388
 *                 # When shrinking is enabled, we need to do one more outer
 *                 # iteration on the entire optimization problem.
 *                 active_size = active_size_start             # <<<<<<<<<<<<<<
 *                 violation_max_old = DBL_MAX
 *                 continue
 */
      /*else*/ {
        __pyx_v_active_size = __pyx_v_active_size_start;

        /* "lightning/impl/primal_cd_fast.pyx":1389
 *                 # iteration on the entire optimization problem.
 *                 active_size = active_size_start
 *                 violation_max_old = DBL_MAX             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
        __pyx_v_violation_max_old = __pyx_v_DBL_MAX;

        /* "lightning/impl/primal_cd_fast.pyx":1390
 *                 active_size = active_size_start
 *                 violation_max_old = DBL_MAX
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *         violation_max_old = violation_max
 */
        goto __pyx_L8_continue;
      }

      /* "lightning/impl/primal_cd_fast.pyx":1377
 * 
 *         # Check convergence.
 *         if (check_violation_sum and             # <<<<<<<<<<<<<<
 *             violation_sum <= tol * violation_init) or \
 *            (check_violation_max and
 */
    }

    /* "lightning/impl/primal_cd_fast.pyx":1392
 *                 continue
 * 
 *         violation_max_old = violation_max             # <<<<<<<<<<<<<<
 * 
 *     if k == -1:
 */
    __pyx_v_violation_max_old = __pyx_v_violation_max;
    __pyx_L8_continue:;
  }
  __pyx_L9_break:;

  /* "lightning/impl/primal_cd_fast.pyx":1394
 *         violation_max_old = violation_max
 * 
 *     if k == -1:             # <<<<<<<<<<<<<<
 *         return violation_init, w, b
 *     else:
 */
  __pyx_t_24 = ((__pyx_v_k == -1L) != 0);
  if (__pyx_t_24) {

    /* "lightning/impl/primal_cd_fast.pyx":1395
 * 
 *     if k == -1:
 *         return violation_init, w, b             # <<<<<<<<<<<<<<
 *     else:
 *         return violation_init, w[k], b[k]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_violation_init); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_v_w));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_w));
    PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_w));
    __Pyx_INCREF(((PyObject *)__pyx_v_b));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_b));
    PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_b));
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "lightning/impl/primal_cd_fast.pyx":1394
 *         violation_max_old = violation_max
 * 
 *     if k == -1:             # <<<<<<<<<<<<<<
 *         return violation_init, w, b
 *     else:
 */
  }

  /* "lightning/impl/primal_cd_fast.pyx":1397
 *         return violation_init, w, b
 *     else:
 *         return violation_init, w[k], b[k]             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_violation_init); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_w), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1397; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_b), __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1397; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "lightning/impl/primal_cd_fast.pyx":1210
 * 
 * 
 * def _primal_cd(self,             # <<<<<<<<<<<<<<
 *                np.ndarray[double, ndim=2, mode='c'] w,
 *                np.ndarray[double, ndim=2, mode='c'] b,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Lcst.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Y.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_active_set.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_b.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_buf.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_d.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_d_old.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_g.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_w.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("lightning.impl.primal_cd_fast._primal_cd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Lcst.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_Y.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_active_set.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_b.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_buf.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_d.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_d_old.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_g.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_w.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_Lcst);
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XDECREF((PyObject *)__pyx_v_d);
  __Pyx_XDECREF((PyObject *)__pyx_v_d_old);
  __Pyx_XDECREF((PyObject *)__pyx_v_buf);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d_2;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L15:;

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction;

static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_LossFunction(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *)o);
  p->__pyx_vtab = __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_LossFunction;
  return o;
}

static void __pyx_tp_dealloc_9lightning_4impl_14primal_cd_fast_LossFunction(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_9lightning_4impl_14primal_cd_fast_LossFunction = {
  PyVarObject_HEAD_INIT(0, 0)
  "lightning.impl.primal_cd_fast.LossFunction", /*tp_name*/
  sizeof(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9lightning_4impl_14primal_cd_fast_LossFunction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9lightning_4impl_14primal_cd_fast_LossFunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_Squared __pyx_vtable_9lightning_4impl_14primal_cd_fast_Squared;

static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_Squared(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared *p;
  PyObject *o = __pyx_tp_new_9lightning_4impl_14primal_cd_fast_LossFunction(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction*)__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_Squared;
  return o;
}

static PyMethodDef __pyx_methods_9lightning_4impl_14primal_cd_fast_Squared[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9lightning_4impl_14primal_cd_fast_Squared = {
  PyVarObject_HEAD_INIT(0, 0)
  "lightning.impl.primal_cd_fast.Squared", /*tp_name*/
  sizeof(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Squared), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9lightning_4impl_14primal_cd_fast_LossFunction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9lightning_4impl_14primal_cd_fast_Squared, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9lightning_4impl_14primal_cd_fast_7Squared_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9lightning_4impl_14primal_cd_fast_Squared, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_SquaredHinge __pyx_vtable_9lightning_4impl_14primal_cd_fast_SquaredHinge;

static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_SquaredHinge(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *p;
  PyObject *o = __pyx_tp_new_9lightning_4impl_14primal_cd_fast_LossFunction(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction*)__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_SquaredHinge;
  return o;
}

static PyMethodDef __pyx_methods_9lightning_4impl_14primal_cd_fast_SquaredHinge[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9lightning_4impl_14primal_cd_fast_SquaredHinge = {
  PyVarObject_HEAD_INIT(0, 0)
  "lightning.impl.primal_cd_fast.SquaredHinge", /*tp_name*/
  sizeof(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SquaredHinge), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9lightning_4impl_14primal_cd_fast_LossFunction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9lightning_4impl_14primal_cd_fast_SquaredHinge, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9lightning_4impl_14primal_cd_fast_12SquaredHinge_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9lightning_4impl_14primal_cd_fast_SquaredHinge, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_SmoothHinge __pyx_vtable_9lightning_4impl_14primal_cd_fast_SmoothHinge;

static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_SmoothHinge(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge *p;
  PyObject *o = __pyx_tp_new_9lightning_4impl_14primal_cd_fast_LossFunction(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction*)__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_SmoothHinge;
  return o;
}

static PyMethodDef __pyx_methods_9lightning_4impl_14primal_cd_fast_SmoothHinge[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9lightning_4impl_14primal_cd_fast_SmoothHinge = {
  PyVarObject_HEAD_INIT(0, 0)
  "lightning.impl.primal_cd_fast.SmoothHinge", /*tp_name*/
  sizeof(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_SmoothHinge), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9lightning_4impl_14primal_cd_fast_LossFunction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9lightning_4impl_14primal_cd_fast_SmoothHinge, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9lightning_4impl_14primal_cd_fast_11SmoothHinge_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9lightning_4impl_14primal_cd_fast_SmoothHinge, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_ModifiedHuber __pyx_vtable_9lightning_4impl_14primal_cd_fast_ModifiedHuber;

static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_ModifiedHuber(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber *p;
  PyObject *o = __pyx_tp_new_9lightning_4impl_14primal_cd_fast_LossFunction(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction*)__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_ModifiedHuber;
  return o;
}

static PyMethodDef __pyx_methods_9lightning_4impl_14primal_cd_fast_ModifiedHuber[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9lightning_4impl_14primal_cd_fast_ModifiedHuber = {
  PyVarObject_HEAD_INIT(0, 0)
  "lightning.impl.primal_cd_fast.ModifiedHuber", /*tp_name*/
  sizeof(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_ModifiedHuber), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9lightning_4impl_14primal_cd_fast_LossFunction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9lightning_4impl_14primal_cd_fast_ModifiedHuber, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9lightning_4impl_14primal_cd_fast_13ModifiedHuber_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9lightning_4impl_14primal_cd_fast_ModifiedHuber, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_Log __pyx_vtable_9lightning_4impl_14primal_cd_fast_Log;

static PyObject *__pyx_tp_new_9lightning_4impl_14primal_cd_fast_Log(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *p;
  PyObject *o = __pyx_tp_new_9lightning_4impl_14primal_cd_fast_LossFunction(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_9lightning_4impl_14primal_cd_fast_LossFunction*)__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_Log;
  return o;
}

static PyMethodDef __pyx_methods_9lightning_4impl_14primal_cd_fast_Log[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_9lightning_4impl_14primal_cd_fast_Log = {
  PyVarObject_HEAD_INIT(0, 0)
  "lightning.impl.primal_cd_fast.Log", /*tp_name*/
  sizeof(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_Log), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9lightning_4impl_14primal_cd_fast_LossFunction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9lightning_4impl_14primal_cd_fast_Log, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_9lightning_4impl_14primal_cd_fast_3Log_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9lightning_4impl_14primal_cd_fast_Log, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "primal_cd_fast",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 0, 1, 1},
  {&__pyx_kp_s_Converged_at_iteration, __pyx_k_Converged_at_iteration, sizeof(__pyx_k_Converged_at_iteration), 0, 0, 1, 0},
  {&__pyx_n_s_DBL_MAX, __pyx_k_DBL_MAX, sizeof(__pyx_k_DBL_MAX), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_Lcst, __pyx_k_Lcst, sizeof(__pyx_k_Lcst), 0, 0, 1, 1},
  {&__pyx_n_s_M, __pyx_k_M, sizeof(__pyx_k_M), 0, 0, 1, 1},
  {&__pyx_kp_s_Max_steps_reached_during_line_se, __pyx_k_Max_steps_reached_during_line_se, sizeof(__pyx_k_Max_steps_reached_during_line_se), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Shrink_variable, __pyx_k_Shrink_variable, sizeof(__pyx_k_Shrink_variable), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_fabianpedregosa_dev_light, __pyx_k_Users_fabianpedregosa_dev_light, sizeof(__pyx_k_Users_fabianpedregosa_dev_light), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {&__pyx_n_s_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 0, 1, 1},
  {&__pyx_n_s_active_set, __pyx_k_active_set, sizeof(__pyx_k_active_set), 0, 0, 1, 1},
  {&__pyx_n_s_active_set_ptr, __pyx_k_active_set_ptr, sizeof(__pyx_k_active_set_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_active_size, __pyx_k_active_size, sizeof(__pyx_k_active_size), 0, 0, 1, 1},
  {&__pyx_n_s_active_size_start, __pyx_k_active_size_start, sizeof(__pyx_k_active_size_start), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_b_ptr, __pyx_k_b_ptr, sizeof(__pyx_k_b_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_beta, __pyx_k_beta, sizeof(__pyx_k_beta), 0, 0, 1, 1},
  {&__pyx_n_s_buf, __pyx_k_buf, sizeof(__pyx_k_buf), 0, 0, 1, 1},
  {&__pyx_n_s_buf_ptr, __pyx_k_buf_ptr, sizeof(__pyx_k_buf_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_callback, __pyx_k_callback, sizeof(__pyx_k_callback), 0, 0, 1, 1},
  {&__pyx_n_s_check_violation_max, __pyx_k_check_violation_max, sizeof(__pyx_k_check_violation_max), 0, 0, 1, 1},
  {&__pyx_n_s_check_violation_sum, __pyx_k_check_violation_sum, sizeof(__pyx_k_check_violation_sum), 0, 0, 1, 1},
  {&__pyx_n_s_cyclic, __pyx_k_cyclic, sizeof(__pyx_k_cyclic), 0, 0, 1, 1},
  {&__pyx_kp_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 0},
  {&__pyx_n_s_d_2, __pyx_k_d_2, sizeof(__pyx_k_d_2), 0, 0, 1, 1},
  {&__pyx_n_s_d_old, __pyx_k_d_old, sizeof(__pyx_k_d_old), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_finfo, __pyx_k_finfo, sizeof(__pyx_k_finfo), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_has_callback, __pyx_k_has_callback, sizeof(__pyx_k_has_callback), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_lightning_impl_primal_cd_fast, __pyx_k_lightning_impl_primal_cd_fast, sizeof(__pyx_k_lightning_impl_primal_cd_fast), 0, 0, 1, 1},
  {&__pyx_n_s_loss, __pyx_k_loss, sizeof(__pyx_k_loss), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_iter, __pyx_k_max_iter, sizeof(__pyx_k_max_iter), 0, 0, 1, 1},
  {&__pyx_n_s_max_steps, __pyx_k_max_steps, sizeof(__pyx_k_max_steps), 0, 0, 1, 1},
  {&__pyx_n_s_multiclass, __pyx_k_multiclass, sizeof(__pyx_k_multiclass), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n_calls, __pyx_k_n_calls, sizeof(__pyx_k_n_calls), 0, 0, 1, 1},
  {&__pyx_n_s_n_features, __pyx_k_n_features, sizeof(__pyx_k_n_features), 0, 0, 1, 1},
  {&__pyx_n_s_n_samples, __pyx_k_n_samples, sizeof(__pyx_k_n_samples), 0, 0, 1, 1},
  {&__pyx_n_s_n_vectors, __pyx_k_n_vectors, sizeof(__pyx_k_n_vectors), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_penalty, __pyx_k_penalty, sizeof(__pyx_k_penalty), 0, 0, 1, 1},
  {&__pyx_n_s_permute, __pyx_k_permute, sizeof(__pyx_k_permute), 0, 0, 1, 1},
  {&__pyx_n_s_primal_cd, __pyx_k_primal_cd, sizeof(__pyx_k_primal_cd), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_rs, __pyx_k_rs, sizeof(__pyx_k_rs), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_selection, __pyx_k_selection, sizeof(__pyx_k_selection), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_shrink, __pyx_k_shrink, sizeof(__pyx_k_shrink), 0, 0, 1, 1},
  {&__pyx_n_s_shrinking, __pyx_k_shrinking, sizeof(__pyx_k_shrinking), 0, 0, 1, 1},
  {&__pyx_n_s_shuffle, __pyx_k_shuffle, sizeof(__pyx_k_shuffle), 0, 0, 1, 1},
  {&__pyx_n_s_sigma, __pyx_k_sigma, sizeof(__pyx_k_sigma), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_termination, __pyx_k_termination, sizeof(__pyx_k_termination), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tol, __pyx_k_tol, sizeof(__pyx_k_tol), 0, 0, 1, 1},
  {&__pyx_n_s_uniform, __pyx_k_uniform, sizeof(__pyx_k_uniform), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_verbose, __pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 0, 1, 1},
  {&__pyx_n_s_violation, __pyx_k_violation, sizeof(__pyx_k_violation), 0, 0, 1, 1},
  {&__pyx_n_s_violation_init, __pyx_k_violation_init, sizeof(__pyx_k_violation_init), 0, 0, 1, 1},
  {&__pyx_n_s_violation_max, __pyx_k_violation_max, sizeof(__pyx_k_violation_max), 0, 0, 1, 1},
  {&__pyx_n_s_violation_max_old, __pyx_k_violation_max_old, sizeof(__pyx_k_violation_max_old), 0, 0, 1, 1},
  {&__pyx_n_s_violation_sum, __pyx_k_violation_sum, sizeof(__pyx_k_violation_sum), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_w_ptr, __pyx_k_w_ptr, sizeof(__pyx_k_w_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y_ptr, __pyx_k_y_ptr, sizeof(__pyx_k_y_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "lightning/impl/primal_cd_fast.pyx":1210
 * 
 * 
 * def _primal_cd(self,             # <<<<<<<<<<<<<<
 *                np.ndarray[double, ndim=2, mode='c'] w,
 *                np.ndarray[double, ndim=2, mode='c'] b,
 */
  __pyx_tuple__7 = PyTuple_Pack(60, __pyx_n_s_self, __pyx_n_s_w, __pyx_n_s_b, __pyx_n_s_X, __pyx_n_s_y, __pyx_n_s_Y, __pyx_n_s_k, __pyx_n_s_multiclass, __pyx_n_s_active_set, __pyx_n_s_penalty, __pyx_n_s_loss, __pyx_n_s_selection, __pyx_n_s_permute, __pyx_n_s_termination, __pyx_n_s_C, __pyx_n_s_alpha, __pyx_n_s_max_iter, __pyx_n_s_max_steps, __pyx_n_s_shrinking, __pyx_n_s_violation_init, __pyx_n_s_rs, __pyx_n_s_tol, __pyx_n_s_callback, __pyx_n_s_n_calls, __pyx_n_s_verbose, __pyx_n_s_n_samples, __pyx_n_s_n_features, __pyx_n_s_n_vectors, __pyx_n_s_active_size, __pyx_n_s_active_size_start, __pyx_n_s_DBL_MAX, __pyx_n_s_t, __pyx_n_s_s, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_n, __pyx_n_s_violation_max_old, __pyx_n_s_violation_max, __pyx_n_s_violation, __pyx_n_s_violation_sum, __pyx_n_s_check_violation_sum, __pyx_n_s_check_violation_max, __pyx_n_s_stop, __pyx_n_s_has_callback, __pyx_n_s_shrink, __pyx_n_s_cyclic, __pyx_n_s_uniform, __pyx_n_s_Lcst, __pyx_n_s_b_ptr, __pyx_n_s_y_ptr, __pyx_n_s_w_ptr, __pyx_n_s_active_set_ptr, __pyx_n_s_g, __pyx_n_s_d_2, __pyx_n_s_d_old, __pyx_n_s_buf, __pyx_n_s_buf_ptr, __pyx_n_s_M, __pyx_n_s_m, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(25, 0, 60, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_fabianpedregosa_dev_light, __pyx_n_s_primal_cd, 1210, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initprimal_cd_fast(void); /*proto*/
PyMODINIT_FUNC initprimal_cd_fast(void)
#else
PyMODINIT_FUNC PyInit_primal_cd_fast(void); /*proto*/
PyMODINIT_FUNC PyInit_primal_cd_fast(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_primal_cd_fast(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("primal_cd_fast", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_lightning__impl__primal_cd_fast) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "lightning.impl.primal_cd_fast")) {
      if (unlikely(PyDict_SetItemString(modules, "lightning.impl.primal_cd_fast", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_LossFunction = &__pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.solve_l2 = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, double *, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_solve_l2;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.derivatives = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int *, double *, int, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_derivatives;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.update = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, int *, double *, int, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_update;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.recompute = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_recompute;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction._lipschitz_constant = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction__lipschitz_constant;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.solve_l1 = (int (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, double *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double *, double *, double, double, double *, int))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_solve_l1;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.solve_l1l2 = (int (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, PyArrayObject *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, int *, PyArrayObject *, int, PyArrayObject *, double, double *, double *, double *, double *, double, double *, int))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_solve_l1l2;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.derivatives_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int, int, int *, double *, int, int *, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_derivatives_mc;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.update_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, double, int, int, int *, double *, int, int *, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_update_mc;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.recompute_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, int *, PyArrayObject *, PyArrayObject *))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_recompute_mc;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.lipschitz_constant_mt = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_lipschitz_constant_mt;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_LossFunction.lipschitz_constant_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12LossFunction_lipschitz_constant_mc;
  if (PyType_Ready(&__pyx_type_9lightning_4impl_14primal_cd_fast_LossFunction) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9lightning_4impl_14primal_cd_fast_LossFunction.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9lightning_4impl_14primal_cd_fast_LossFunction.tp_dict, __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_LossFunction) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "LossFunction", (PyObject *)&__pyx_type_9lightning_4impl_14primal_cd_fast_LossFunction) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_14primal_cd_fast_LossFunction = &__pyx_type_9lightning_4impl_14primal_cd_fast_LossFunction;
  __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_Squared = &__pyx_vtable_9lightning_4impl_14primal_cd_fast_Squared;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Squared.__pyx_base = *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_LossFunction;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Squared.__pyx_base.derivatives = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int *, double *, int, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_7Squared_derivatives;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Squared.__pyx_base.update = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, int *, double *, int, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_7Squared_update;
  __pyx_type_9lightning_4impl_14primal_cd_fast_Squared.tp_base = __pyx_ptype_9lightning_4impl_14primal_cd_fast_LossFunction;
  if (PyType_Ready(&__pyx_type_9lightning_4impl_14primal_cd_fast_Squared) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9lightning_4impl_14primal_cd_fast_Squared.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9lightning_4impl_14primal_cd_fast_Squared.tp_dict, __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_Squared) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Squared", (PyObject *)&__pyx_type_9lightning_4impl_14primal_cd_fast_Squared) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_14primal_cd_fast_Squared = &__pyx_type_9lightning_4impl_14primal_cd_fast_Squared;
  __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_SquaredHinge = &__pyx_vtable_9lightning_4impl_14primal_cd_fast_SquaredHinge;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_SquaredHinge.__pyx_base = *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_LossFunction;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_SquaredHinge.__pyx_base.derivatives = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int *, double *, int, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_derivatives;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_SquaredHinge.__pyx_base.update = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, int *, double *, int, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_update;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_SquaredHinge.__pyx_base.derivatives_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int, int, int *, double *, int, int *, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_derivatives_mc;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_SquaredHinge.__pyx_base.update_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, double, int, int, int *, double *, int, int *, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_update_mc;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_SquaredHinge.__pyx_base.lipschitz_constant_mt = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_lipschitz_constant_mt;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_SquaredHinge.__pyx_base.lipschitz_constant_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_12SquaredHinge_lipschitz_constant_mc;
  __pyx_type_9lightning_4impl_14primal_cd_fast_SquaredHinge.tp_base = __pyx_ptype_9lightning_4impl_14primal_cd_fast_LossFunction;
  if (PyType_Ready(&__pyx_type_9lightning_4impl_14primal_cd_fast_SquaredHinge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9lightning_4impl_14primal_cd_fast_SquaredHinge.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9lightning_4impl_14primal_cd_fast_SquaredHinge.tp_dict, __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_SquaredHinge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "SquaredHinge", (PyObject *)&__pyx_type_9lightning_4impl_14primal_cd_fast_SquaredHinge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_14primal_cd_fast_SquaredHinge = &__pyx_type_9lightning_4impl_14primal_cd_fast_SquaredHinge;
  __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_SmoothHinge = &__pyx_vtable_9lightning_4impl_14primal_cd_fast_SmoothHinge;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_SmoothHinge.__pyx_base = *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_LossFunction;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_SmoothHinge.__pyx_base.derivatives = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int *, double *, int, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_11SmoothHinge_derivatives;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_SmoothHinge.__pyx_base.update = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, int *, double *, int, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_11SmoothHinge_update;
  __pyx_type_9lightning_4impl_14primal_cd_fast_SmoothHinge.tp_base = __pyx_ptype_9lightning_4impl_14primal_cd_fast_LossFunction;
  if (PyType_Ready(&__pyx_type_9lightning_4impl_14primal_cd_fast_SmoothHinge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9lightning_4impl_14primal_cd_fast_SmoothHinge.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9lightning_4impl_14primal_cd_fast_SmoothHinge.tp_dict, __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_SmoothHinge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "SmoothHinge", (PyObject *)&__pyx_type_9lightning_4impl_14primal_cd_fast_SmoothHinge) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_14primal_cd_fast_SmoothHinge = &__pyx_type_9lightning_4impl_14primal_cd_fast_SmoothHinge;
  __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_ModifiedHuber = &__pyx_vtable_9lightning_4impl_14primal_cd_fast_ModifiedHuber;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_ModifiedHuber.__pyx_base = *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_LossFunction;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_ModifiedHuber.__pyx_base.derivatives = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int *, double *, int, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_13ModifiedHuber_derivatives;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_ModifiedHuber.__pyx_base.update = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, int *, double *, int, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_13ModifiedHuber_update;
  __pyx_type_9lightning_4impl_14primal_cd_fast_ModifiedHuber.tp_base = __pyx_ptype_9lightning_4impl_14primal_cd_fast_LossFunction;
  if (PyType_Ready(&__pyx_type_9lightning_4impl_14primal_cd_fast_ModifiedHuber) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9lightning_4impl_14primal_cd_fast_ModifiedHuber.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9lightning_4impl_14primal_cd_fast_ModifiedHuber.tp_dict, __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_ModifiedHuber) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "ModifiedHuber", (PyObject *)&__pyx_type_9lightning_4impl_14primal_cd_fast_ModifiedHuber) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_14primal_cd_fast_ModifiedHuber = &__pyx_type_9lightning_4impl_14primal_cd_fast_ModifiedHuber;
  __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_Log = &__pyx_vtable_9lightning_4impl_14primal_cd_fast_Log;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Log.__pyx_base = *__pyx_vtabptr_9lightning_4impl_14primal_cd_fast_LossFunction;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Log.__pyx_base.derivatives = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int *, double *, int, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_3Log_derivatives;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Log.__pyx_base.update = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, double, int *, double *, int, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_3Log_update;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Log.__pyx_base.recompute = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_3Log_recompute;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Log.__pyx_base.derivatives_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, double, int, int, int *, double *, int, int *, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_3Log_derivatives_mc;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Log.__pyx_base.update_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, double, int, int, int *, double *, int, int *, double *, double *, double *, double *, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_3Log_update_mc;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Log.__pyx_base.recompute_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, int *, PyArrayObject *, PyArrayObject *))__pyx_f_9lightning_4impl_14primal_cd_fast_3Log_recompute_mc;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Log.__pyx_base.lipschitz_constant_mt = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_3Log_lipschitz_constant_mt;
  __pyx_vtable_9lightning_4impl_14primal_cd_fast_Log.__pyx_base.lipschitz_constant_mc = (void (*)(struct __pyx_obj_9lightning_4impl_14primal_cd_fast_LossFunction *, int, struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset *, double, double *))__pyx_f_9lightning_4impl_14primal_cd_fast_3Log_lipschitz_constant_mc;
  __pyx_type_9lightning_4impl_14primal_cd_fast_Log.tp_base = __pyx_ptype_9lightning_4impl_14primal_cd_fast_LossFunction;
  if (PyType_Ready(&__pyx_type_9lightning_4impl_14primal_cd_fast_Log) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_9lightning_4impl_14primal_cd_fast_Log.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_9lightning_4impl_14primal_cd_fast_Log.tp_dict, __pyx_vtabptr_9lightning_4impl_14primal_cd_fast_Log) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Log", (PyObject *)&__pyx_type_9lightning_4impl_14primal_cd_fast_Log) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 951; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_14primal_cd_fast_Log = &__pyx_type_9lightning_4impl_14primal_cd_fast_Log;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_9randomkit_11random_fast_RandomState = __Pyx_ImportType("lightning.impl.randomkit.random_fast", "RandomState", sizeof(struct __pyx_obj_9lightning_4impl_9randomkit_11random_fast_RandomState), 1); if (unlikely(!__pyx_ptype_9lightning_4impl_9randomkit_11random_fast_RandomState)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9lightning_4impl_9randomkit_11random_fast_RandomState = (struct __pyx_vtabstruct_9lightning_4impl_9randomkit_11random_fast_RandomState*)__Pyx_GetVtable(__pyx_ptype_9lightning_4impl_9randomkit_11random_fast_RandomState->tp_dict); if (unlikely(!__pyx_vtabptr_9lightning_4impl_9randomkit_11random_fast_RandomState)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_12dataset_fast_Dataset = __Pyx_ImportType("lightning.impl.dataset_fast", "Dataset", sizeof(struct __pyx_obj_9lightning_4impl_12dataset_fast_Dataset), 1); if (unlikely(!__pyx_ptype_9lightning_4impl_12dataset_fast_Dataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9lightning_4impl_12dataset_fast_Dataset = (struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_Dataset*)__Pyx_GetVtable(__pyx_ptype_9lightning_4impl_12dataset_fast_Dataset->tp_dict); if (unlikely(!__pyx_vtabptr_9lightning_4impl_12dataset_fast_Dataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_12dataset_fast_RowDataset = __Pyx_ImportType("lightning.impl.dataset_fast", "RowDataset", sizeof(struct __pyx_obj_9lightning_4impl_12dataset_fast_RowDataset), 1); if (unlikely(!__pyx_ptype_9lightning_4impl_12dataset_fast_RowDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9lightning_4impl_12dataset_fast_RowDataset = (struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_RowDataset*)__Pyx_GetVtable(__pyx_ptype_9lightning_4impl_12dataset_fast_RowDataset->tp_dict); if (unlikely(!__pyx_vtabptr_9lightning_4impl_12dataset_fast_RowDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_12dataset_fast_ColumnDataset = __Pyx_ImportType("lightning.impl.dataset_fast", "ColumnDataset", sizeof(struct __pyx_obj_9lightning_4impl_12dataset_fast_ColumnDataset), 1); if (unlikely(!__pyx_ptype_9lightning_4impl_12dataset_fast_ColumnDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9lightning_4impl_12dataset_fast_ColumnDataset = (struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ColumnDataset*)__Pyx_GetVtable(__pyx_ptype_9lightning_4impl_12dataset_fast_ColumnDataset->tp_dict); if (unlikely(!__pyx_vtabptr_9lightning_4impl_12dataset_fast_ColumnDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_12dataset_fast_ContiguousDataset = __Pyx_ImportType("lightning.impl.dataset_fast", "ContiguousDataset", sizeof(struct __pyx_obj_9lightning_4impl_12dataset_fast_ContiguousDataset), 1); if (unlikely(!__pyx_ptype_9lightning_4impl_12dataset_fast_ContiguousDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9lightning_4impl_12dataset_fast_ContiguousDataset = (struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_ContiguousDataset*)__Pyx_GetVtable(__pyx_ptype_9lightning_4impl_12dataset_fast_ContiguousDataset->tp_dict); if (unlikely(!__pyx_vtabptr_9lightning_4impl_12dataset_fast_ContiguousDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_12dataset_fast_FortranDataset = __Pyx_ImportType("lightning.impl.dataset_fast", "FortranDataset", sizeof(struct __pyx_obj_9lightning_4impl_12dataset_fast_FortranDataset), 1); if (unlikely(!__pyx_ptype_9lightning_4impl_12dataset_fast_FortranDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9lightning_4impl_12dataset_fast_FortranDataset = (struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_FortranDataset*)__Pyx_GetVtable(__pyx_ptype_9lightning_4impl_12dataset_fast_FortranDataset->tp_dict); if (unlikely(!__pyx_vtabptr_9lightning_4impl_12dataset_fast_FortranDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_12dataset_fast_CSRDataset = __Pyx_ImportType("lightning.impl.dataset_fast", "CSRDataset", sizeof(struct __pyx_obj_9lightning_4impl_12dataset_fast_CSRDataset), 1); if (unlikely(!__pyx_ptype_9lightning_4impl_12dataset_fast_CSRDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9lightning_4impl_12dataset_fast_CSRDataset = (struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_CSRDataset*)__Pyx_GetVtable(__pyx_ptype_9lightning_4impl_12dataset_fast_CSRDataset->tp_dict); if (unlikely(!__pyx_vtabptr_9lightning_4impl_12dataset_fast_CSRDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_9lightning_4impl_12dataset_fast_CSCDataset = __Pyx_ImportType("lightning.impl.dataset_fast", "CSCDataset", sizeof(struct __pyx_obj_9lightning_4impl_12dataset_fast_CSCDataset), 1); if (unlikely(!__pyx_ptype_9lightning_4impl_12dataset_fast_CSCDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_9lightning_4impl_12dataset_fast_CSCDataset = (struct __pyx_vtabstruct_9lightning_4impl_12dataset_fast_CSCDataset*)__Pyx_GetVtable(__pyx_ptype_9lightning_4impl_12dataset_fast_CSCDataset->tp_dict); if (unlikely(!__pyx_vtabptr_9lightning_4impl_12dataset_fast_CSCDataset)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "lightning/impl/primal_cd_fast.pyx":9
 * # License: BSD
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lightning/impl/primal_cd_fast.pyx":1210
 * 
 * 
 * def _primal_cd(self,             # <<<<<<<<<<<<<<
 *                np.ndarray[double, ndim=2, mode='c'] w,
 *                np.ndarray[double, ndim=2, mode='c'] b,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_9lightning_4impl_14primal_cd_fast_1_primal_cd, NULL, __pyx_n_s_lightning_impl_primal_cd_fast); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_primal_cd, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "lightning/impl/primal_cd_fast.pyx":1
 * # encoding: utf-8             # <<<<<<<<<<<<<<
 * # cython: cdivision=True
 * # cython: boundscheck=False
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../anaconda3/lib/python3.5/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init lightning.impl.primal_cd_fast", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init lightning.impl.primal_cd_fast");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


          #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
